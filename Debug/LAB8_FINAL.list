
LAB8_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099c4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000965fc  08009bc8  08009bc8  00019bc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080a01c4  080a01c4  000c01e4  2**0
                  CONTENTS
  4 .ARM          00000008  080a01c4  080a01c4  000b01c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080a01cc  080a01cc  000c01e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080a01cc  080a01cc  000b01cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080a01d0  080a01d0  000b01d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080a01d4  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  200001e4  080a03b8  000c01e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  080a03b8  000c0640  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000c01e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000c0212  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae46  00000000  00000000  000c0255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e49  00000000  00000000  000db09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  000deee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001158  00000000  00000000  000e0538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bdc8  00000000  00000000  000e1690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3f7  00000000  00000000  0010d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001071f6  00000000  00000000  0012c84f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c04  00000000  00000000  00233a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0023a64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009bac 	.word	0x08009bac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08009bac 	.word	0x08009bac

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC1_Init+0x98>)
 8000618:	2201      	movs	r2, #1
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x98>)
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <MX_ADC1_Init+0x98>)
 800064c:	f002 f902 	bl	8002854 <HAL_ADC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 fced 	bl	8001034 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065e:	2301      	movs	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x98>)
 800066c:	f002 fa9c 	bl	8002ba8 <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000676:	f000 fcdd 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000200 	.word	0x20000200
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x74>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d123      	bne.n	80006fa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80006e2:	2309      	movs	r3, #9
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_ADC_MspInit+0x7c>)
 80006f6:	f002 fe4b 	bl	8003390 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40012000 	.word	0x40012000
 8000708:	40023800 	.word	0x40023800
 800070c:	40020000 	.word	0x40020000

08000710 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4ba4      	ldr	r3, [pc, #656]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4aa3      	ldr	r2, [pc, #652]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4ba1      	ldr	r3, [pc, #644]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b9e      	ldr	r3, [pc, #632]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a9d      	ldr	r2, [pc, #628]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9b      	ldr	r3, [pc, #620]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b98      	ldr	r3, [pc, #608]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a97      	ldr	r2, [pc, #604]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b95      	ldr	r3, [pc, #596]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b92      	ldr	r3, [pc, #584]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a91      	ldr	r2, [pc, #580]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b8f      	ldr	r3, [pc, #572]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b8c      	ldr	r3, [pc, #560]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8b      	ldr	r2, [pc, #556]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b89      	ldr	r3, [pc, #548]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b86      	ldr	r3, [pc, #536]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a85      	ldr	r2, [pc, #532]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b83      	ldr	r3, [pc, #524]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b80      	ldr	r3, [pc, #512]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a7f      	ldr	r2, [pc, #508]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	4b7a      	ldr	r3, [pc, #488]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a79      	ldr	r2, [pc, #484]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b77      	ldr	r3, [pc, #476]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	4874      	ldr	r0, [pc, #464]	; (80009bc <MX_GPIO_Init+0x2ac>)
 80007ec:	f002 ff7c 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007f6:	4872      	ldr	r0, [pc, #456]	; (80009c0 <MX_GPIO_Init+0x2b0>)
 80007f8:	f002 ff76 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4870      	ldr	r0, [pc, #448]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000802:	f002 ff71 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800080c:	486e      	ldr	r0, [pc, #440]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 800080e:	f002 ff6b 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000812:	2314      	movs	r3, #20
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	4865      	ldr	r0, [pc, #404]	; (80009bc <MX_GPIO_Init+0x2ac>)
 8000826:	f002 fdb3 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800082a:	2368      	movs	r3, #104	; 0x68
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	485e      	ldr	r0, [pc, #376]	; (80009bc <MX_GPIO_Init+0x2ac>)
 8000842:	f002 fda5 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	485b      	ldr	r0, [pc, #364]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 800085c:	f002 fd98 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000860:	2332      	movs	r3, #50	; 0x32
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000870:	230b      	movs	r3, #11
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	4853      	ldr	r0, [pc, #332]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 800087c:	f002 fd88 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000880:	2386      	movs	r3, #134	; 0x86
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000890:	230b      	movs	r3, #11
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	484c      	ldr	r0, [pc, #304]	; (80009cc <MX_GPIO_Init+0x2bc>)
 800089c:	f002 fd78 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b2:	230b      	movs	r3, #11
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	4619      	mov	r1, r3
 80008bc:	4840      	ldr	r0, [pc, #256]	; (80009c0 <MX_GPIO_Init+0x2b0>)
 80008be:	f002 fd67 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008c2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4839      	ldr	r0, [pc, #228]	; (80009c0 <MX_GPIO_Init+0x2b0>)
 80008dc:	f002 fd58 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4833      	ldr	r0, [pc, #204]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80008f8:	f002 fd4a 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	482d      	ldr	r0, [pc, #180]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000910:	f002 fd3e 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000914:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	4619      	mov	r1, r3
 800092c:	4826      	ldr	r0, [pc, #152]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 800092e:	f002 fd2f 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000932:	230f      	movs	r3, #15
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	4822      	ldr	r0, [pc, #136]	; (80009d0 <MX_GPIO_Init+0x2c0>)
 8000948:	f002 fd22 	bl	8003390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800094c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800095e:	230b      	movs	r3, #11
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4816      	ldr	r0, [pc, #88]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800096a:	f002 fd11 	bl	8003390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2102      	movs	r1, #2
 8000972:	2006      	movs	r0, #6
 8000974:	f002 fc43 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000978:	2006      	movs	r0, #6
 800097a:	f002 fc5c 	bl	8003236 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	2007      	movs	r0, #7
 8000984:	f002 fc3b 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000988:	2007      	movs	r0, #7
 800098a:	f002 fc54 	bl	8003236 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2102      	movs	r1, #2
 8000992:	2008      	movs	r0, #8
 8000994:	f002 fc33 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000998:	2008      	movs	r0, #8
 800099a:	f002 fc4c 	bl	8003236 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2102      	movs	r1, #2
 80009a2:	2009      	movs	r0, #9
 80009a4:	f002 fc2b 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009a8:	2009      	movs	r0, #9
 80009aa:	f002 fc44 	bl	8003236 <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020c00 	.word	0x40020c00

080009d4 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_I2C4_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_I2C4_Init+0x7c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a10:	f002 fea8 	bl	8003764 <HAL_I2C_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f000 fb0b 	bl	8001034 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a22:	f002 ff2f 	bl	8003884 <HAL_I2CEx_ConfigAnalogFilter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f000 fb02 	bl	8001034 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a34:	f002 ff71 	bl	800391a <HAL_I2CEx_ConfigDigitalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 faf9 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000248 	.word	0x20000248
 8000a4c:	40006000 	.word	0x40006000
 8000a50:	00808cd2 	.word	0x00808cd2

08000a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0ae      	sub	sp, #184	; 0xb8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2290      	movs	r2, #144	; 0x90
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f007 f828 	bl	8007aca <memset>
  if(i2cHandle->Instance==I2C4)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <HAL_I2C_MspInit+0xb4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d13d      	bne.n	8000b00 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fc71 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000aa0:	f000 fac8 	bl	8001034 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aaa:	f043 0308 	orr.w	r3, r3, #8
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000abc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000adc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <HAL_I2C_MspInit+0xbc>)
 8000ae4:	f002 fc54 	bl	8003390 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	37b8      	adds	r7, #184	; 0xb8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40006000 	.word	0x40006000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020c00 	.word	0x40020c00

08000b14 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b18:	f3bf 8f4f 	dsb	sy
}
 8000b1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b1e:	f3bf 8f6f 	isb	sy
}
 8000b22:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <SCB_EnableICache+0x48>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2c:	f3bf 8f4f 	dsb	sy
}
 8000b30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b32:	f3bf 8f6f 	isb	sy
}
 8000b36:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <SCB_EnableICache+0x48>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <SCB_EnableICache+0x48>)
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b42:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b44:	f3bf 8f4f 	dsb	sy
}
 8000b48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b4a:	f3bf 8f6f 	isb	sy
}
 8000b4e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6e:	f3bf 8f4f 	dsb	sy
}
 8000b72:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b7a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	0b5b      	lsrs	r3, r3, #13
 8000b80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b84:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b8e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	015a      	lsls	r2, r3, #5
 8000b94:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b98:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b9e:	4911      	ldr	r1, [pc, #68]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1e5a      	subs	r2, r3, #1
 8000baa:	60ba      	str	r2, [r7, #8]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1ef      	bne.n	8000b90 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	60fa      	str	r2, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1e5      	bne.n	8000b86 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bba:	f3bf 8f4f 	dsb	sy
}
 8000bbe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bcc:	f3bf 8f4f 	dsb	sy
}
 8000bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bd2:	f3bf 8f6f 	isb	sy
}
 8000bd6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <displayTime>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayTime(int minute, int second) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
	char toMinute[10];
	char toSecond[10];

	sprintf(toMinute, "%02d", minute);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	490a      	ldr	r1, [pc, #40]	; (8000c24 <displayTime+0x3c>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f006 ff02 	bl	8007a04 <siprintf>
	sprintf(toSecond, "%02d", second);
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	4907      	ldr	r1, [pc, #28]	; (8000c24 <displayTime+0x3c>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f006 fefb 	bl	8007a04 <siprintf>
	sprintf(timeString, "%02d:%02d", minute, second);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4905      	ldr	r1, [pc, #20]	; (8000c28 <displayTime+0x40>)
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <displayTime+0x44>)
 8000c16:	f006 fef5 	bl	8007a04 <siprintf>
//	print("\r");
//	print(timeString);
}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	08009bc8 	.word	0x08009bc8
 8000c28:	08009bd0 	.word	0x08009bd0
 8000c2c:	200002ac 	.word	0x200002ac

08000c30 <display4096_to_45>:
void display4096_to_45(uint32_t myNumber) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	currentVal = (45 * myNumber) / 4096;
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	011a      	lsls	r2, r3, #4
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	0b1b      	lsrs	r3, r3, #12
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <display4096_to_45+0x8c>)
 8000c4a:	701a      	strb	r2, [r3, #0]
	if (currentVal != lastVal) {
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <display4096_to_45+0x8c>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <display4096_to_45+0x90>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d02c      	beq.n	8000cb2 <display4096_to_45+0x82>
		if (currentVal >= lastVal - swing && currentVal <= lastVal + swing) {
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <display4096_to_45+0x8c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <display4096_to_45+0x90>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4619      	mov	r1, r3
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <display4096_to_45+0x94>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	db0a      	blt.n	8000c84 <display4096_to_45+0x54>
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <display4096_to_45+0x8c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <display4096_to_45+0x90>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <display4096_to_45+0x94>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	440b      	add	r3, r1
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dd16      	ble.n	8000cb2 <display4096_to_45+0x82>
			// If it's within the swing range, don't update lastVal
		} else {
			lastVal = currentVal;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <display4096_to_45+0x8c>)
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <display4096_to_45+0x90>)
 8000c8a:	701a      	strb	r2, [r3, #0]
			sprintf(toDec45, "b%02d", lastVal);
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <display4096_to_45+0x90>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <display4096_to_45+0x98>)
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <display4096_to_45+0x9c>)
 8000c96:	f006 feb5 	bl	8007a04 <siprintf>
//			print(toDec45);
//			print("\r\n");
			HAL_UART_Transmit(&huart6, (uint8_t*) toDec45, strlen(toDec45),
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <display4096_to_45+0x9c>)
 8000c9c:	f7ff fb20 	bl	80002e0 <strlen>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	4908      	ldr	r1, [pc, #32]	; (8000ccc <display4096_to_45+0x9c>)
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <display4096_to_45+0xa0>)
 8000cac:	f005 f8a8 	bl	8005e00 <HAL_UART_Transmit>
					1000);
		}
	}

}
 8000cb0:	e7ff      	b.n	8000cb2 <display4096_to_45+0x82>
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200002ca 	.word	0x200002ca
 8000cc0:	200002cb 	.word	0x200002cb
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	08009bdc 	.word	0x08009bdc
 8000ccc:	200002a4 	.word	0x200002a4
 8000cd0:	20000468 	.word	0x20000468

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000cda:	f7ff ff1b 	bl	8000b14 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000cde:	f7ff ff3f 	bl	8000b60 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce2:	f001 fd2d 	bl	8002740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce6:	f000 f939 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cea:	f7ff fd11 	bl	8000710 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cee:	f000 fd65 	bl	80017bc <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000cf2:	f000 f9eb 	bl	80010cc <MX_SPI5_Init>
  MX_RNG_Init();
 8000cf6:	f000 f9a1 	bl	800103c <MX_RNG_Init>
  MX_TIM2_Init();
 8000cfa:	f000 fc93 	bl	8001624 <MX_TIM2_Init>
  MX_I2C4_Init();
 8000cfe:	f7ff fe69 	bl	80009d4 <MX_I2C4_Init>
  MX_ADC1_Init();
 8000d02:	f7ff fc73 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d06:	f000 fc39 	bl	800157c <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000d0a:	f000 fd87 	bl	800181c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000d0e:	f001 fa35 	bl	800217c <ILI9341_Init>
	HAL_ADC_Start(&hadc1);
 8000d12:	4879      	ldr	r0, [pc, #484]	; (8000ef8 <main+0x224>)
 8000d14:	f001 fde2 	bl	80028dc <HAL_ADC_Start>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 8000d18:	bf00      	nop
 8000d1a:	2164      	movs	r1, #100	; 0x64
 8000d1c:	4876      	ldr	r0, [pc, #472]	; (8000ef8 <main+0x224>)
 8000d1e:	f001 feab 	bl	8002a78 <HAL_ADC_PollForConversion>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f8      	bne.n	8000d1a <main+0x46>
		}
		adc_val = HAL_ADC_GetValue(&hadc1);
 8000d28:	4873      	ldr	r0, [pc, #460]	; (8000ef8 <main+0x224>)
 8000d2a:	f001 ff30 	bl	8002b8e <HAL_ADC_GetValue>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a72      	ldr	r2, [pc, #456]	; (8000efc <main+0x228>)
 8000d32:	6013      	str	r3, [r2, #0]
		display4096_to_45(adc_val);
 8000d34:	4b71      	ldr	r3, [pc, #452]	; (8000efc <main+0x228>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff79 	bl	8000c30 <display4096_to_45>
//		while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_RXNE) == RESET){}
		HAL_UART_Receive(&huart6, (uint8_t*) &ch1, 1, 1000);
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	2201      	movs	r2, #1
 8000d44:	496e      	ldr	r1, [pc, #440]	; (8000f00 <main+0x22c>)
 8000d46:	486f      	ldr	r0, [pc, #444]	; (8000f04 <main+0x230>)
 8000d48:	f005 f8dd 	bl	8005f06 <HAL_UART_Receive>
//		HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
		print(ch1);
 8000d4c:	4b6c      	ldr	r3, [pc, #432]	; (8000f00 <main+0x22c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461c      	mov	r4, r3
 8000d52:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <main+0x22c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fac2 	bl	80002e0 <strlen>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d64:	4621      	mov	r1, r4
 8000d66:	4868      	ldr	r0, [pc, #416]	; (8000f08 <main+0x234>)
 8000d68:	f005 f84a 	bl	8005e00 <HAL_UART_Transmit>
		if (ch1 == '0') {
 8000d6c:	4b64      	ldr	r3, [pc, #400]	; (8000f00 <main+0x22c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b30      	cmp	r3, #48	; 0x30
 8000d72:	d103      	bne.n	8000d7c <main+0xa8>
			playerSignal = 0;
 8000d74:	4b65      	ldr	r3, [pc, #404]	; (8000f0c <main+0x238>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e006      	b.n	8000d8a <main+0xb6>
		} else if (ch1 == '1') {
 8000d7c:	4b60      	ldr	r3, [pc, #384]	; (8000f00 <main+0x22c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b31      	cmp	r3, #49	; 0x31
 8000d82:	d102      	bne.n	8000d8a <main+0xb6>
			playerSignal = 1;
 8000d84:	4b61      	ldr	r3, [pc, #388]	; (8000f0c <main+0x238>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
		}

		if (state != 1) {
 8000d8a:	4b61      	ldr	r3, [pc, #388]	; (8000f10 <main+0x23c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d002      	beq.n	8000d98 <main+0xc4>
			isBackgroundFill = 0;
 8000d92:	4b60      	ldr	r3, [pc, #384]	; (8000f14 <main+0x240>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
		}

		if (state == 0) {
 8000d98:	4b5d      	ldr	r3, [pc, #372]	; (8000f10 <main+0x23c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d121      	bne.n	8000de4 <main+0x110>
			ILI9341_Draw_Image((const char*) image_data_setup,
 8000da0:	2102      	movs	r1, #2
 8000da2:	485d      	ldr	r0, [pc, #372]	; (8000f18 <main+0x244>)
 8000da4:	f000 ff0c 	bl	8001bc0 <ILI9341_Draw_Image>
			SCREEN_VERTICAL_2);
			minuteA = 10;
 8000da8:	4b5c      	ldr	r3, [pc, #368]	; (8000f1c <main+0x248>)
 8000daa:	220a      	movs	r2, #10
 8000dac:	601a      	str	r2, [r3, #0]
			secondA = 0;
 8000dae:	4b5c      	ldr	r3, [pc, #368]	; (8000f20 <main+0x24c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
			minuteB = 10;
 8000db4:	4b5b      	ldr	r3, [pc, #364]	; (8000f24 <main+0x250>)
 8000db6:	220a      	movs	r2, #10
 8000db8:	601a      	str	r2, [r3, #0]
			secondB = 0;
 8000dba:	4b5b      	ldr	r3, [pc, #364]	; (8000f28 <main+0x254>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
			sendTwo = 0;
 8000dc0:	4b5a      	ldr	r3, [pc, #360]	; (8000f2c <main+0x258>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]

			if (sendZero == 0) {
 8000dc6:	4b5a      	ldr	r3, [pc, #360]	; (8000f30 <main+0x25c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1a4      	bne.n	8000d18 <main+0x44>
				//send 0
				//print("0");
				HAL_UART_Transmit(&huart6, (uint8_t*) "000", 3, 1000);
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	4957      	ldr	r1, [pc, #348]	; (8000f34 <main+0x260>)
 8000dd6:	484b      	ldr	r0, [pc, #300]	; (8000f04 <main+0x230>)
 8000dd8:	f005 f812 	bl	8005e00 <HAL_UART_Transmit>
				sendZero = 1;
 8000ddc:	4b54      	ldr	r3, [pc, #336]	; (8000f30 <main+0x25c>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e799      	b.n	8000d18 <main+0x44>
			}
		} else if (state == 1) {
 8000de4:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <main+0x23c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d14f      	bne.n	8000e8c <main+0x1b8>
			sendTwo = 0;
 8000dec:	4b4f      	ldr	r3, [pc, #316]	; (8000f2c <main+0x258>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
			if (sendOne == 0) {
 8000df2:	4b51      	ldr	r3, [pc, #324]	; (8000f38 <main+0x264>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d110      	bne.n	8000e1c <main+0x148>
				//print("1");
				print("111 issend");
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	220a      	movs	r2, #10
 8000e00:	494e      	ldr	r1, [pc, #312]	; (8000f3c <main+0x268>)
 8000e02:	4841      	ldr	r0, [pc, #260]	; (8000f08 <main+0x234>)
 8000e04:	f004 fffc 	bl	8005e00 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart6, (uint8_t*) "111", 3, 1000);
 8000e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e0c:	2203      	movs	r2, #3
 8000e0e:	494c      	ldr	r1, [pc, #304]	; (8000f40 <main+0x26c>)
 8000e10:	483c      	ldr	r0, [pc, #240]	; (8000f04 <main+0x230>)
 8000e12:	f004 fff5 	bl	8005e00 <HAL_UART_Transmit>
				sendOne = 1;
 8000e16:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <main+0x264>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	601a      	str	r2, [r3, #0]
			}
			//send 1
			HAL_TIM_Base_Start_IT(&htim1);
 8000e1c:	4849      	ldr	r0, [pc, #292]	; (8000f44 <main+0x270>)
 8000e1e:	f004 faf9 	bl	8005414 <HAL_TIM_Base_Start_IT>
			if (isBackgroundFill == 0) {
 8000e22:	4b3c      	ldr	r3, [pc, #240]	; (8000f14 <main+0x240>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <main+0x164>

				ILI9341_Draw_Image((const char*) image_data_tot,
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	4846      	ldr	r0, [pc, #280]	; (8000f48 <main+0x274>)
 8000e2e:	f000 fec7 	bl	8001bc0 <ILI9341_Draw_Image>
						SCREEN_VERTICAL_2);
				isBackgroundFill = 1;
 8000e32:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <main+0x240>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	701a      	strb	r2, [r3, #0]
			}
			displayTime(minuteA, secondA);
 8000e38:	4b38      	ldr	r3, [pc, #224]	; (8000f1c <main+0x248>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a38      	ldr	r2, [pc, #224]	; (8000f20 <main+0x24c>)
 8000e3e:	6812      	ldr	r2, [r2, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fed0 	bl	8000be8 <displayTime>
			ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f001 f939 	bl	80020c0 <ILI9341_Set_Rotation>
			ILI9341_Draw_Text(timeString, 40, 140, WHITE, 3, BLACK);
 8000e4e:	2300      	movs	r3, #0
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	2303      	movs	r3, #3
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e5a:	228c      	movs	r2, #140	; 0x8c
 8000e5c:	2128      	movs	r1, #40	; 0x28
 8000e5e:	483b      	ldr	r0, [pc, #236]	; (8000f4c <main+0x278>)
 8000e60:	f000 fe7e 	bl	8001b60 <ILI9341_Draw_Text>
			displayTime(minuteB, secondB);
 8000e64:	4b2f      	ldr	r3, [pc, #188]	; (8000f24 <main+0x250>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a2f      	ldr	r2, [pc, #188]	; (8000f28 <main+0x254>)
 8000e6a:	6812      	ldr	r2, [r2, #0]
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff feba 	bl	8000be8 <displayTime>
			ILI9341_Draw_Text(timeString, 180, 140, WHITE, 3, BLACK);
 8000e74:	2300      	movs	r3, #0
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	2303      	movs	r3, #3
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e80:	228c      	movs	r2, #140	; 0x8c
 8000e82:	21b4      	movs	r1, #180	; 0xb4
 8000e84:	4831      	ldr	r0, [pc, #196]	; (8000f4c <main+0x278>)
 8000e86:	f000 fe6b 	bl	8001b60 <ILI9341_Draw_Text>
 8000e8a:	e745      	b.n	8000d18 <main+0x44>
		} else if (state == 2) { //PAUSE
 8000e8c:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <main+0x23c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d118      	bne.n	8000ec6 <main+0x1f2>
			sendOne = 0;
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <main+0x264>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
			if (sendTwo == 0) {
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <main+0x258>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d109      	bne.n	8000eb6 <main+0x1e2>
							//print("2");
							HAL_UART_Transmit(&huart6, (uint8_t*) "222", 3, 1000);
 8000ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea6:	2203      	movs	r2, #3
 8000ea8:	4929      	ldr	r1, [pc, #164]	; (8000f50 <main+0x27c>)
 8000eaa:	4816      	ldr	r0, [pc, #88]	; (8000f04 <main+0x230>)
 8000eac:	f004 ffa8 	bl	8005e00 <HAL_UART_Transmit>
							sendTwo = 1;
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	; (8000f2c <main+0x258>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
						}
			HAL_TIM_Base_Stop_IT(&htim1);
 8000eb6:	4823      	ldr	r0, [pc, #140]	; (8000f44 <main+0x270>)
 8000eb8:	f004 fb24 	bl	8005504 <HAL_TIM_Base_Stop_IT>
			ILI9341_Draw_Image((const char*) image_data_pause,
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4825      	ldr	r0, [pc, #148]	; (8000f54 <main+0x280>)
 8000ec0:	f000 fe7e 	bl	8001bc0 <ILI9341_Draw_Image>
 8000ec4:	e728      	b.n	8000d18 <main+0x44>
			SCREEN_VERTICAL_2);
		} else if (state == 3) {
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <main+0x23c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b03      	cmp	r3, #3
 8000ecc:	f47f af24 	bne.w	8000d18 <main+0x44>
			//Picture
			if (sendTwo == 0) {
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <main+0x258>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d109      	bne.n	8000eec <main+0x218>
										//print("2");
										HAL_UART_Transmit(&huart6, (uint8_t*) "222", 3, 1000);
 8000ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000edc:	2203      	movs	r2, #3
 8000ede:	491c      	ldr	r1, [pc, #112]	; (8000f50 <main+0x27c>)
 8000ee0:	4808      	ldr	r0, [pc, #32]	; (8000f04 <main+0x230>)
 8000ee2:	f004 ff8d 	bl	8005e00 <HAL_UART_Transmit>
										sendTwo = 1;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <main+0x258>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]
									}
			ILI9341_Draw_Image((const char*) image_data_end, SCREEN_VERTICAL_2);
 8000eec:	2102      	movs	r1, #2
 8000eee:	481a      	ldr	r0, [pc, #104]	; (8000f58 <main+0x284>)
 8000ef0:	f000 fe66 	bl	8001bc0 <ILI9341_Draw_Image>
	while (1) {
 8000ef4:	e710      	b.n	8000d18 <main+0x44>
 8000ef6:	bf00      	nop
 8000ef8:	20000200 	.word	0x20000200
 8000efc:	2000029c 	.word	0x2000029c
 8000f00:	200002cc 	.word	0x200002cc
 8000f04:	20000468 	.word	0x20000468
 8000f08:	200003e0 	.word	0x200003e0
 8000f0c:	200002c8 	.word	0x200002c8
 8000f10:	200002b8 	.word	0x200002b8
 8000f14:	200002c9 	.word	0x200002c9
 8000f18:	08054bfc 	.word	0x08054bfc
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	200002a0 	.word	0x200002a0
 8000f24:	20000004 	.word	0x20000004
 8000f28:	200002a8 	.word	0x200002a8
 8000f2c:	200002c4 	.word	0x200002c4
 8000f30:	200002bc 	.word	0x200002bc
 8000f34:	08009be4 	.word	0x08009be4
 8000f38:	200002c0 	.word	0x200002c0
 8000f3c:	08009be8 	.word	0x08009be8
 8000f40:	08009bf4 	.word	0x08009bf4
 8000f44:	20000348 	.word	0x20000348
 8000f48:	08009bfc 	.word	0x08009bfc
 8000f4c:	200002ac 	.word	0x200002ac
 8000f50:	08009bf8 	.word	0x08009bf8
 8000f54:	0802f3fc 	.word	0x0802f3fc
 8000f58:	0807a3fc 	.word	0x0807a3fc

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	; 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2234      	movs	r2, #52	; 0x34
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f006 fdad 	bl	8007aca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f80:	f002 fd18 	bl	80039b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f84:	4b29      	ldr	r3, [pc, #164]	; (800102c <SystemClock_Config+0xd0>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	4a28      	ldr	r2, [pc, #160]	; (800102c <SystemClock_Config+0xd0>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f90:	4b26      	ldr	r3, [pc, #152]	; (800102c <SystemClock_Config+0xd0>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <SystemClock_Config+0xd4>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <SystemClock_Config+0xd4>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b20      	ldr	r3, [pc, #128]	; (8001030 <SystemClock_Config+0xd4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fbc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000fd0:	2390      	movs	r3, #144	; 0x90
 8000fd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 031c 	add.w	r3, r7, #28
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fcf5 	bl	80039d4 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ff0:	f000 f820 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001004:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	2102      	movs	r1, #2
 8001012:	4618      	mov	r0, r3
 8001014:	f002 ff8c 	bl	8003f30 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800101e:	f000 f809 	bl	8001034 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x4>
	...

0800103c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_RNG_Init+0x20>)
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <MX_RNG_Init+0x24>)
 8001044:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_RNG_Init+0x20>)
 8001048:	f003 fdc0 	bl	8004bcc <HAL_RNG_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001052:	f7ff ffef 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200002d0 	.word	0x200002d0
 8001060:	50060800 	.word	0x50060800

08001064 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0a8      	sub	sp, #160	; 0xa0
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	2290      	movs	r2, #144	; 0x90
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f006 fd28 	bl	8007aca <memset>
  if(rngHandle->Instance==RNG)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <HAL_RNG_MspInit+0x60>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d11b      	bne.n	80010bc <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001084:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001088:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800108a:	2300      	movs	r3, #0
 800108c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f003 f971 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80010a0:	f7ff ffc8 	bl	8001034 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_RNG_MspInit+0x64>)
 80010a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_RNG_MspInit+0x64>)
 80010aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ae:	6353      	str	r3, [r2, #52]	; 0x34
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_RNG_MspInit+0x64>)
 80010b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80010bc:	bf00      	nop
 80010be:	37a0      	adds	r7, #160	; 0xa0
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	50060800 	.word	0x50060800
 80010c8:	40023800 	.word	0x40023800

080010cc <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80010d0:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <MX_SPI5_Init+0x74>)
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <MX_SPI5_Init+0x78>)
 80010d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80010d6:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <MX_SPI5_Init+0x74>)
 80010d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <MX_SPI5_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <MX_SPI5_Init+0x74>)
 80010e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010ea:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ec:	4b14      	ldr	r3, [pc, #80]	; (8001140 <MX_SPI5_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <MX_SPI5_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80010f8:	4b11      	ldr	r3, [pc, #68]	; (8001140 <MX_SPI5_Init+0x74>)
 80010fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fe:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <MX_SPI5_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001106:	4b0e      	ldr	r3, [pc, #56]	; (8001140 <MX_SPI5_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <MX_SPI5_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <MX_SPI5_Init+0x74>)
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001118:	4b09      	ldr	r3, [pc, #36]	; (8001140 <MX_SPI5_Init+0x74>)
 800111a:	2207      	movs	r2, #7
 800111c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800111e:	4b08      	ldr	r3, [pc, #32]	; (8001140 <MX_SPI5_Init+0x74>)
 8001120:	2200      	movs	r2, #0
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <MX_SPI5_Init+0x74>)
 8001126:	2200      	movs	r2, #0
 8001128:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	; (8001140 <MX_SPI5_Init+0x74>)
 800112c:	f003 fd78 	bl	8004c20 <HAL_SPI_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001136:	f7ff ff7d 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200002e0 	.word	0x200002e0
 8001144:	40015000 	.word	0x40015000

08001148 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0314 	add.w	r3, r7, #20
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a17      	ldr	r2, [pc, #92]	; (80011c4 <HAL_SPI_MspInit+0x7c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d128      	bne.n	80011bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800116a:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_SPI_MspInit+0x80>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <HAL_SPI_MspInit+0x80>)
 8001170:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_SPI_MspInit+0x80>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001182:	4b11      	ldr	r3, [pc, #68]	; (80011c8 <HAL_SPI_MspInit+0x80>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <HAL_SPI_MspInit+0x80>)
 8001188:	f043 0320 	orr.w	r3, r3, #32
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <HAL_SPI_MspInit+0x80>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0320 	and.w	r3, r3, #32
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800119a:	f44f 7360 	mov.w	r3, #896	; 0x380
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011ac:	2305      	movs	r3, #5
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	4619      	mov	r1, r3
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <HAL_SPI_MspInit+0x84>)
 80011b8:	f002 f8ea 	bl	8003390 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	3728      	adds	r7, #40	; 0x28
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40015000 	.word	0x40015000
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40021400 	.word	0x40021400

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <HAL_MspInit+0x44>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_MspInit+0x44>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x44>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x44>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a08      	ldr	r2, [pc, #32]	; (8001214 <HAL_MspInit+0x44>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_MspInit+0x44>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001206:	2005      	movs	r0, #5
 8001208:	f001 ffee 	bl	80031e8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40023800 	.word	0x40023800

08001218 <CountDown>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CountDown(int *playerMinute, int *playerSecond)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
	(*playerSecond)--;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	1e5a      	subs	r2, r3, #1
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	601a      	str	r2, [r3, #0]
	  if(*playerSecond == -1)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001234:	d115      	bne.n	8001262 <CountDown+0x4a>
	  {
		  if(*playerMinute == 0)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d105      	bne.n	800124a <CountDown+0x32>
		  {
			  *playerSecond = 0;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
			  state = 3;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <CountDown+0x58>)
 8001246:	2203      	movs	r2, #3
 8001248:	601a      	str	r2, [r3, #0]
		  }
		  if(*playerMinute != 0)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <CountDown+0x4a>
		  {
			  *playerSecond = 59;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	223b      	movs	r2, #59	; 0x3b
 8001256:	601a      	str	r2, [r3, #0]
			  (*playerMinute)--;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	1e5a      	subs	r2, r3, #1
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	200002b8 	.word	0x200002b8

08001274 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001278:	f001 faa8 	bl	80027cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001284:	2001      	movs	r0, #1
 8001286:	f002 fa49 	bl	800371c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(state != 3){
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <EXTI0_IRQHandler+0x1c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b03      	cmp	r3, #3
 8001290:	d002      	beq.n	8001298 <EXTI0_IRQHandler+0x18>

  state = 1;
 8001292:	4b02      	ldr	r3, [pc, #8]	; (800129c <EXTI0_IRQHandler+0x1c>)
 8001294:	2201      	movs	r2, #1
 8001296:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200002b8 	.word	0x200002b8

080012a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80012a4:	2002      	movs	r0, #2
 80012a6:	f002 fa39 	bl	800371c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  if(state ==1){
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <EXTI1_IRQHandler+0x1c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d102      	bne.n	80012b8 <EXTI1_IRQHandler+0x18>

  state = 2;
 80012b2:	4b02      	ldr	r3, [pc, #8]	; (80012bc <EXTI1_IRQHandler+0x1c>)
 80012b4:	2202      	movs	r2, #2
 80012b6:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI1_IRQn 1 */
}
 80012b8:	bf00      	nop
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	200002b8 	.word	0x200002b8

080012c0 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80012c4:	2004      	movs	r0, #4
 80012c6:	f002 fa29 	bl	800371c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  if(state != 0){
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <EXTI2_IRQHandler+0x1c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d002      	beq.n	80012d8 <EXTI2_IRQHandler+0x18>

  state = 3;
 80012d2:	4b02      	ldr	r3, [pc, #8]	; (80012dc <EXTI2_IRQHandler+0x1c>)
 80012d4:	2203      	movs	r2, #3
 80012d6:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI2_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200002b8 	.word	0x200002b8

080012e0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80012e4:	2008      	movs	r0, #8
 80012e6:	f002 fa19 	bl	800371c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  if (state == 3) {
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <EXTI3_IRQHandler+0x34>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d10e      	bne.n	8001310 <EXTI3_IRQHandler+0x30>
  				sendZero = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <EXTI3_IRQHandler+0x38>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
  				sendOne = 0;
 80012f8:	4b08      	ldr	r3, [pc, #32]	; (800131c <EXTI3_IRQHandler+0x3c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
  				sendTwo = 0;
 80012fe:	4b08      	ldr	r3, [pc, #32]	; (8001320 <EXTI3_IRQHandler+0x40>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
  				ch1 = '0';
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <EXTI3_IRQHandler+0x44>)
 8001306:	2230      	movs	r2, #48	; 0x30
 8001308:	701a      	strb	r2, [r3, #0]
  				state = 0;
 800130a:	4b02      	ldr	r3, [pc, #8]	; (8001314 <EXTI3_IRQHandler+0x34>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
  			}
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	200002b8 	.word	0x200002b8
 8001318:	200002bc 	.word	0x200002bc
 800131c:	200002c0 	.word	0x200002c0
 8001320:	200002c4 	.word	0x200002c4
 8001324:	200002cc 	.word	0x200002cc

08001328 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800132c:	480a      	ldr	r0, [pc, #40]	; (8001358 <TIM1_UP_TIM10_IRQHandler+0x30>)
 800132e:	f004 f918 	bl	8005562 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  CountDown(minuteA, secondA);
//  CountDown(minuteB, secondB);
//  secondA--;
  if(playerSignal == 0)
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <TIM1_UP_TIM10_IRQHandler+0x1c>
  {
	  CountDown(&minuteA, &secondA);
 800133a:	4909      	ldr	r1, [pc, #36]	; (8001360 <TIM1_UP_TIM10_IRQHandler+0x38>)
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 800133e:	f7ff ff6b 	bl	8001218 <CountDown>
  CountDown(&minuteB, &secondB);

  }

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001342:	e007      	b.n	8001354 <TIM1_UP_TIM10_IRQHandler+0x2c>
  else if(playerSignal == 1)
 8001344:	4b05      	ldr	r3, [pc, #20]	; (800135c <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d103      	bne.n	8001354 <TIM1_UP_TIM10_IRQHandler+0x2c>
  CountDown(&minuteB, &secondB);
 800134c:	4906      	ldr	r1, [pc, #24]	; (8001368 <TIM1_UP_TIM10_IRQHandler+0x40>)
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <TIM1_UP_TIM10_IRQHandler+0x44>)
 8001350:	f7ff ff62 	bl	8001218 <CountDown>
}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000348 	.word	0x20000348
 800135c:	200002c8 	.word	0x200002c8
 8001360:	200002a0 	.word	0x200002a0
 8001364:	20000000 	.word	0x20000000
 8001368:	200002a8 	.word	0x200002a8
 800136c:	20000004 	.word	0x20000004

08001370 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <USART6_IRQHandler+0x10>)
 8001376:	f004 fe8b 	bl	8006090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000468 	.word	0x20000468

08001384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
	return 1;
 8001388:	2301      	movs	r3, #1
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_kill>:

int _kill(int pid, int sig)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800139e:	f006 fbe7 	bl	8007b70 <__errno>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2216      	movs	r2, #22
 80013a6:	601a      	str	r2, [r3, #0]
	return -1;
 80013a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_exit>:

void _exit (int status)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffe7 	bl	8001394 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013c6:	e7fe      	b.n	80013c6 <_exit+0x12>

080013c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e00a      	b.n	80013f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013da:	f3af 8000 	nop.w
 80013de:	4601      	mov	r1, r0
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	1c5a      	adds	r2, r3, #1
 80013e4:	60ba      	str	r2, [r7, #8]
 80013e6:	b2ca      	uxtb	r2, r1
 80013e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	3301      	adds	r3, #1
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbf0      	blt.n	80013da <_read+0x12>
	}

return len;
 80013f8:	687b      	ldr	r3, [r7, #4]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b086      	sub	sp, #24
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	e009      	b.n	8001428 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1c5a      	adds	r2, r3, #1
 8001418:	60ba      	str	r2, [r7, #8]
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3301      	adds	r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697a      	ldr	r2, [r7, #20]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	429a      	cmp	r2, r3
 800142e:	dbf1      	blt.n	8001414 <_write+0x12>
	}
	return len;
 8001430:	687b      	ldr	r3, [r7, #4]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <_close>:

int _close(int file)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
	return -1;
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001462:	605a      	str	r2, [r3, #4]
	return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_isatty>:

int _isatty(int file)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
	return 1;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	60b9      	str	r1, [r7, #8]
 8001492:	607a      	str	r2, [r7, #4]
	return 0;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	; (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	; (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f006 fb4c 	bl	8007b70 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	; (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20080000 	.word	0x20080000
 8001504:	00000400 	.word	0x00000400
 8001508:	20000344 	.word	0x20000344
 800150c:	20000640 	.word	0x20000640

08001510 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <SystemInit+0x5c>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <SystemInit+0x5c>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <SystemInit+0x60>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a11      	ldr	r2, [pc, #68]	; (8001570 <SystemInit+0x60>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <SystemInit+0x60>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <SystemInit+0x60>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	490d      	ldr	r1, [pc, #52]	; (8001570 <SystemInit+0x60>)
 800153c:	4b0d      	ldr	r3, [pc, #52]	; (8001574 <SystemInit+0x64>)
 800153e:	4013      	ands	r3, r2
 8001540:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <SystemInit+0x60>)
 8001544:	4a0c      	ldr	r2, [pc, #48]	; (8001578 <SystemInit+0x68>)
 8001546:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <SystemInit+0x60>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a08      	ldr	r2, [pc, #32]	; (8001570 <SystemInit+0x60>)
 800154e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001552:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <SystemInit+0x60>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800155a:	4b04      	ldr	r3, [pc, #16]	; (800156c <SystemInit+0x5c>)
 800155c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001560:	609a      	str	r2, [r3, #8]
#endif
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00
 8001570:	40023800 	.word	0x40023800
 8001574:	fef6ffff 	.word	0xfef6ffff
 8001578:	24003010 	.word	0x24003010

0800157c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b088      	sub	sp, #32
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800159a:	4b20      	ldr	r3, [pc, #128]	; (800161c <MX_TIM1_Init+0xa0>)
 800159c:	4a20      	ldr	r2, [pc, #128]	; (8001620 <MX_TIM1_Init+0xa4>)
 800159e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	; (800161c <MX_TIM1_Init+0xa0>)
 80015a2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80015a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	4b1c      	ldr	r3, [pc, #112]	; (800161c <MX_TIM1_Init+0xa0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80015ae:	4b1b      	ldr	r3, [pc, #108]	; (800161c <MX_TIM1_Init+0xa0>)
 80015b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80015b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <MX_TIM1_Init+0xa0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <MX_TIM1_Init+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c2:	4b16      	ldr	r3, [pc, #88]	; (800161c <MX_TIM1_Init+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015c8:	4814      	ldr	r0, [pc, #80]	; (800161c <MX_TIM1_Init+0xa0>)
 80015ca:	f003 fecb 	bl	8005364 <HAL_TIM_Base_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80015d4:	f7ff fd2e 	bl	8001034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015de:	f107 0310 	add.w	r3, r7, #16
 80015e2:	4619      	mov	r1, r3
 80015e4:	480d      	ldr	r0, [pc, #52]	; (800161c <MX_TIM1_Init+0xa0>)
 80015e6:	f004 f8db 	bl	80057a0 <HAL_TIM_ConfigClockSource>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80015f0:	f7ff fd20 	bl	8001034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	; (800161c <MX_TIM1_Init+0xa0>)
 8001606:	f004 fb01 	bl	8005c0c <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001610:	f7ff fd10 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3720      	adds	r7, #32
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000348 	.word	0x20000348
 8001620:	40010000 	.word	0x40010000

08001624 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b088      	sub	sp, #32
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0310 	add.w	r3, r7, #16
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <MX_TIM2_Init+0x98>)
 8001644:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001648:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_TIM2_Init+0x98>)
 800164c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_TIM2_Init+0x98>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 8001658:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_TIM2_Init+0x98>)
 800165a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800165e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_TIM2_Init+0x98>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001666:	4b15      	ldr	r3, [pc, #84]	; (80016bc <MX_TIM2_Init+0x98>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <MX_TIM2_Init+0x98>)
 800166e:	f003 fe79 	bl	8005364 <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001678:	f7ff fcdc 	bl	8001034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001680:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	4619      	mov	r1, r3
 8001688:	480c      	ldr	r0, [pc, #48]	; (80016bc <MX_TIM2_Init+0x98>)
 800168a:	f004 f889 	bl	80057a0 <HAL_TIM_ConfigClockSource>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001694:	f7ff fcce 	bl	8001034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001698:	2300      	movs	r3, #0
 800169a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a0:	1d3b      	adds	r3, r7, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	; (80016bc <MX_TIM2_Init+0x98>)
 80016a6:	f004 fab1 	bl	8005c0c <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80016b0:	f7ff fcc0 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	3720      	adds	r7, #32
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000394 	.word	0x20000394

080016c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a33      	ldr	r2, [pc, #204]	; (80017ac <HAL_TIM_Base_MspInit+0xec>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d131      	bne.n	8001746 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016e2:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	61bb      	str	r3, [r7, #24]
 80016f8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a2c      	ldr	r2, [pc, #176]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b2a      	ldr	r3, [pc, #168]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001724:	2301      	movs	r3, #1
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	4821      	ldr	r0, [pc, #132]	; (80017b4 <HAL_TIM_Base_MspInit+0xf4>)
 8001730:	f001 fe2e 	bl	8003390 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2103      	movs	r1, #3
 8001738:	2019      	movs	r0, #25
 800173a:	f001 fd60 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800173e:	2019      	movs	r0, #25
 8001740:	f001 fd79 	bl	8003236 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001744:	e02d      	b.n	80017a2 <HAL_TIM_Base_MspInit+0xe2>
  else if(tim_baseHandle->Instance==TIM2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174e:	d128      	bne.n	80017a2 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001750:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a16      	ldr	r2, [pc, #88]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a10      	ldr	r2, [pc, #64]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 800176e:	f043 0302 	orr.w	r3, r3, #2
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_TIM_Base_MspInit+0xf0>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001780:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001784:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001786:	2302      	movs	r3, #2
 8001788:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178e:	2300      	movs	r3, #0
 8001790:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001792:	2301      	movs	r3, #1
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4806      	ldr	r0, [pc, #24]	; (80017b8 <HAL_TIM_Base_MspInit+0xf8>)
 800179e:	f001 fdf7 	bl	8003390 <HAL_GPIO_Init>
}
 80017a2:	bf00      	nop
 80017a4:	3730      	adds	r7, #48	; 0x30
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400

080017bc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017c0:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017c2:	4a15      	ldr	r2, [pc, #84]	; (8001818 <MX_USART3_UART_Init+0x5c>)
 80017c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017e2:	220c      	movs	r2, #12
 80017e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_USART3_UART_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_USART3_UART_Init+0x58>)
 8001800:	f004 fab0 	bl	8005d64 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800180a:	f7ff fc13 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200003e0 	.word	0x200003e0
 8001818:	40004800 	.word	0x40004800

0800181c <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001822:	4a15      	ldr	r2, [pc, #84]	; (8001878 <MX_USART6_UART_Init+0x5c>)
 8001824:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b11      	ldr	r3, [pc, #68]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800183a:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <MX_USART6_UART_Init+0x58>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800185e:	4805      	ldr	r0, [pc, #20]	; (8001874 <MX_USART6_UART_Init+0x58>)
 8001860:	f004 fa80 	bl	8005d64 <HAL_UART_Init>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800186a:	f7ff fbe3 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000468 	.word	0x20000468
 8001878:	40011400 	.word	0x40011400

0800187c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b0b0      	sub	sp, #192	; 0xc0
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001884:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]
 8001890:	60da      	str	r2, [r3, #12]
 8001892:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	2290      	movs	r2, #144	; 0x90
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f006 f914 	bl	8007aca <memset>
  if(uartHandle->Instance==USART3)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a47      	ldr	r2, [pc, #284]	; (80019c4 <HAL_UART_MspInit+0x148>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d13d      	bne.n	8001928 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fd5e 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018c6:	f7ff fbb5 	bl	8001034 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a3e      	ldr	r2, [pc, #248]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b3c      	ldr	r3, [pc, #240]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018de:	61bb      	str	r3, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a38      	ldr	r2, [pc, #224]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 80018e8:	f043 0308 	orr.w	r3, r3, #8
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b36      	ldr	r3, [pc, #216]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0308 	and.w	r3, r3, #8
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001914:	2307      	movs	r3, #7
 8001916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800191a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800191e:	4619      	mov	r1, r3
 8001920:	482a      	ldr	r0, [pc, #168]	; (80019cc <HAL_UART_MspInit+0x150>)
 8001922:	f001 fd35 	bl	8003390 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001926:	e048      	b.n	80019ba <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART6)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a28      	ldr	r2, [pc, #160]	; (80019d0 <HAL_UART_MspInit+0x154>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d143      	bne.n	80019ba <HAL_UART_MspInit+0x13e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001932:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001936:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001938:	2300      	movs	r3, #0
 800193a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800193c:	f107 031c 	add.w	r3, r7, #28
 8001940:	4618      	mov	r0, r3
 8001942:	f002 fd1b 	bl	800437c <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800194c:	f7ff fb72 	bl	8001034 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	6453      	str	r3, [r2, #68]	; 0x44
 800195c:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001968:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
 8001974:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <HAL_UART_MspInit+0x14c>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001980:	23c0      	movs	r3, #192	; 0xc0
 8001982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001992:	2303      	movs	r3, #3
 8001994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001998:	2308      	movs	r3, #8
 800199a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019a2:	4619      	mov	r1, r3
 80019a4:	480b      	ldr	r0, [pc, #44]	; (80019d4 <HAL_UART_MspInit+0x158>)
 80019a6:	f001 fcf3 	bl	8003390 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2101      	movs	r1, #1
 80019ae:	2047      	movs	r0, #71	; 0x47
 80019b0:	f001 fc25 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80019b4:	2047      	movs	r0, #71	; 0x47
 80019b6:	f001 fc3e 	bl	8003236 <HAL_NVIC_EnableIRQ>
}
 80019ba:	bf00      	nop
 80019bc:	37c0      	adds	r7, #192	; 0xc0
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40004800 	.word	0x40004800
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020c00 	.word	0x40020c00
 80019d0:	40011400 	.word	0x40011400
 80019d4:	40020800 	.word	0x40020800

080019d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a10 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019de:	e003      	b.n	80019e8 <LoopCopyDataInit>

080019e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019e6:	3104      	adds	r1, #4

080019e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019e8:	480b      	ldr	r0, [pc, #44]	; (8001a18 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019f0:	d3f6      	bcc.n	80019e0 <CopyDataInit>
  ldr  r2, =_sbss
 80019f2:	4a0b      	ldr	r2, [pc, #44]	; (8001a20 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019f4:	e002      	b.n	80019fc <LoopFillZerobss>

080019f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019f8:	f842 3b04 	str.w	r3, [r2], #4

080019fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a00:	d3f9      	bcc.n	80019f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a02:	f7ff fd85 	bl	8001510 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f006 f8b9 	bl	8007b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0a:	f7ff f963 	bl	8000cd4 <main>
  bx  lr    
 8001a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a10:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001a14:	080a01d4 	.word	0x080a01d4
  ldr  r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a1c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001a20:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001a24:	20000640 	.word	0x20000640

08001a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC_IRQHandler>
	...

08001a2c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af02      	add	r7, sp, #8
 8001a32:	4604      	mov	r4, r0
 8001a34:	4608      	mov	r0, r1
 8001a36:	4611      	mov	r1, r2
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71bb      	strb	r3, [r7, #6]
 8001a42:	460b      	mov	r3, r1
 8001a44:	717b      	strb	r3, [r7, #5]
 8001a46:	4613      	mov	r3, r2
 8001a48:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001a4a:	79fb      	ldrb	r3, [r7, #7]
 8001a4c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
 8001a50:	2b1f      	cmp	r3, #31
 8001a52:	d802      	bhi.n	8001a5a <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	71fb      	strb	r3, [r7, #7]
 8001a58:	e002      	b.n	8001a60 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001a5a:	7dfb      	ldrb	r3, [r7, #23]
 8001a5c:	3b20      	subs	r3, #32
 8001a5e:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001a60:	2300      	movs	r3, #0
 8001a62:	753b      	strb	r3, [r7, #20]
 8001a64:	e012      	b.n	8001a8c <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001a66:	7dfa      	ldrb	r2, [r7, #23]
 8001a68:	7d38      	ldrb	r0, [r7, #20]
 8001a6a:	7d39      	ldrb	r1, [r7, #20]
 8001a6c:	4c3b      	ldr	r4, [pc, #236]	; (8001b5c <ILI9341_Draw_Char+0x130>)
 8001a6e:	4613      	mov	r3, r2
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	4423      	add	r3, r4
 8001a78:	4403      	add	r3, r0
 8001a7a:	781a      	ldrb	r2, [r3, #0]
 8001a7c:	f101 0318 	add.w	r3, r1, #24
 8001a80:	443b      	add	r3, r7
 8001a82:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001a86:	7d3b      	ldrb	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	753b      	strb	r3, [r7, #20]
 8001a8c:	7d3b      	ldrb	r3, [r7, #20]
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	d9e9      	bls.n	8001a66 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001a92:	79bb      	ldrb	r3, [r7, #6]
 8001a94:	b298      	uxth	r0, r3
 8001a96:	797b      	ldrb	r3, [r7, #5]
 8001a98:	b299      	uxth	r1, r3
 8001a9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	0052      	lsls	r2, r2, #1
 8001aa0:	4413      	add	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	b29c      	uxth	r4, r3
 8001aac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	f000 fde9 	bl	8002688 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	757b      	strb	r3, [r7, #21]
 8001aba:	e047      	b.n	8001b4c <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001abc:	2300      	movs	r3, #0
 8001abe:	75bb      	strb	r3, [r7, #22]
 8001ac0:	e03e      	b.n	8001b40 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001ac2:	7d7b      	ldrb	r3, [r7, #21]
 8001ac4:	3318      	adds	r3, #24
 8001ac6:	443b      	add	r3, r7
 8001ac8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001acc:	461a      	mov	r2, r3
 8001ace:	7dbb      	ldrb	r3, [r7, #22]
 8001ad0:	fa42 f303 	asr.w	r3, r2, r3
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d02e      	beq.n	8001b3a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001adc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d110      	bne.n	8001b04 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	7d7b      	ldrb	r3, [r7, #21]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	4413      	add	r3, r2
 8001aec:	b298      	uxth	r0, r3
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	7dbb      	ldrb	r3, [r7, #22]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f000 fce9 	bl	80024d4 <ILI9341_Draw_Pixel>
 8001b02:	e01a      	b.n	8001b3a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	7d7b      	ldrb	r3, [r7, #21]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001b0e:	fb11 f303 	smulbb	r3, r1, r3
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	b298      	uxth	r0, r3
 8001b18:	797b      	ldrb	r3, [r7, #5]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	7dbb      	ldrb	r3, [r7, #22]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001b22:	fb11 f303 	smulbb	r3, r1, r3
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	b299      	uxth	r1, r3
 8001b2c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001b2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b30:	887b      	ldrh	r3, [r7, #2]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4623      	mov	r3, r4
 8001b36:	f000 fda7 	bl	8002688 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001b3a:	7dbb      	ldrb	r3, [r7, #22]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	75bb      	strb	r3, [r7, #22]
 8001b40:	7dbb      	ldrb	r3, [r7, #22]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d9bd      	bls.n	8001ac2 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001b46:	7d7b      	ldrb	r3, [r7, #21]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	757b      	strb	r3, [r7, #21]
 8001b4c:	7d7b      	ldrb	r3, [r7, #21]
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d9b4      	bls.n	8001abc <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001b52:	bf00      	nop
 8001b54:	bf00      	nop
 8001b56:	371c      	adds	r7, #28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd90      	pop	{r4, r7, pc}
 8001b5c:	0809fc14 	.word	0x0809fc14

08001b60 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	70fb      	strb	r3, [r7, #3]
 8001b72:	460b      	mov	r3, r1
 8001b74:	70bb      	strb	r3, [r7, #2]
 8001b76:	4613      	mov	r3, r2
 8001b78:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001b7a:	e017      	b.n	8001bac <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	7818      	ldrb	r0, [r3, #0]
 8001b84:	883c      	ldrh	r4, [r7, #0]
 8001b86:	78ba      	ldrb	r2, [r7, #2]
 8001b88:	78f9      	ldrb	r1, [r7, #3]
 8001b8a:	8bbb      	ldrh	r3, [r7, #28]
 8001b8c:	9301      	str	r3, [sp, #4]
 8001b8e:	8b3b      	ldrh	r3, [r7, #24]
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	4623      	mov	r3, r4
 8001b94:	f7ff ff4a 	bl	8001a2c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001b98:	8b3b      	ldrh	r3, [r7, #24]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	0052      	lsls	r2, r2, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	78fb      	ldrb	r3, [r7, #3]
 8001ba8:	4413      	add	r3, r2
 8001baa:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e3      	bne.n	8001b7c <ILI9341_Draw_Text+0x1c>
    }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd90      	pop	{r4, r7, pc}
	...

08001bc0 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bcc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001bd0:	6018      	str	r0, [r3, #0]
 8001bd2:	460a      	mov	r2, r1
 8001bd4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bd8:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001bdc:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8001bde:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001be2:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d15e      	bne.n	8001caa <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001bec:	2001      	movs	r0, #1
 8001bee:	f000 fa67 	bl	80020c0 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001bf2:	23f0      	movs	r3, #240	; 0xf0
 8001bf4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	f000 f9f6 	bl	8001fec <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c06:	48c4      	ldr	r0, [pc, #784]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001c08:	f001 fd6e 	bl	80036e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c12:	48c1      	ldr	r0, [pc, #772]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001c14:	f001 fd68 	bl	80036e8 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001c24:	e035      	b.n	8001c92 <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001c2c:	e019      	b.n	8001c62 <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001c2e:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001c32:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001c36:	4413      	add	r3, r2
 8001c38:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001c3c:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001c40:	6812      	ldr	r2, [r2, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	7819      	ldrb	r1, [r3, #0]
 8001c46:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c4a:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001c4e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001c52:	4413      	add	r3, r2
 8001c54:	460a      	mov	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001c58:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001c62:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001c66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c6a:	d3e0      	bcc.n	8001c2e <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001c6c:	f107 010c 	add.w	r1, r7, #12
 8001c70:	230a      	movs	r3, #10
 8001c72:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c76:	48a9      	ldr	r0, [pc, #676]	; (8001f1c <ILI9341_Draw_Image+0x35c>)
 8001c78:	f003 f87d 	bl	8004d76 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001c7c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001c80:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c84:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001c88:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001c92:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001c96:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001c9a:	d9c4      	bls.n	8001c26 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca2:	489d      	ldr	r0, [pc, #628]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001ca4:	f001 fd20 	bl	80036e8 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 8001ca8:	e130      	b.n	8001f0c <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8001caa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001cae:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d15e      	bne.n	8001d76 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001cb8:	2003      	movs	r0, #3
 8001cba:	f000 fa01 	bl	80020c0 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001cbe:	23f0      	movs	r3, #240	; 0xf0
 8001cc0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f000 f990 	bl	8001fec <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cd2:	4891      	ldr	r0, [pc, #580]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001cd4:	f001 fd08 	bl	80036e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cde:	488e      	ldr	r0, [pc, #568]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001ce0:	f001 fd02 	bl	80036e8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001cf0:	e035      	b.n	8001d5e <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001cf8:	e019      	b.n	8001d2e <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001cfa:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001cfe:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d02:	4413      	add	r3, r2
 8001d04:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001d08:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	7819      	ldrb	r1, [r3, #0]
 8001d12:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001d16:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001d1a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d1e:	4413      	add	r3, r2
 8001d20:	460a      	mov	r2, r1
 8001d22:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001d24:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001d2e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d36:	d3e0      	bcc.n	8001cfa <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001d38:	f107 010c 	add.w	r1, r7, #12
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d42:	4876      	ldr	r0, [pc, #472]	; (8001f1c <ILI9341_Draw_Image+0x35c>)
 8001d44:	f003 f817 	bl	8004d76 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001d48:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d50:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001d54:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001d5e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001d62:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001d66:	d9c4      	bls.n	8001cf2 <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6e:	486a      	ldr	r0, [pc, #424]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001d70:	f001 fcba 	bl	80036e8 <HAL_GPIO_WritePin>
}
 8001d74:	e0ca      	b.n	8001f0c <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8001d76:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001d7a:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d15e      	bne.n	8001e42 <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8001d84:	2002      	movs	r0, #2
 8001d86:	f000 f99b 	bl	80020c0 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001d8a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d8e:	22f0      	movs	r2, #240	; 0xf0
 8001d90:	2100      	movs	r1, #0
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 f92a 	bl	8001fec <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d9e:	485e      	ldr	r0, [pc, #376]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001da0:	f001 fca2 	bl	80036e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001da4:	2200      	movs	r2, #0
 8001da6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001daa:	485b      	ldr	r0, [pc, #364]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001dac:	f001 fc9c 	bl	80036e8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001dbc:	e035      	b.n	8001e2a <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001dc4:	e019      	b.n	8001dfa <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001dc6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001dca:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001dce:	4413      	add	r3, r2
 8001dd0:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001dd4:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	7819      	ldrb	r1, [r3, #0]
 8001dde:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001de2:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001de6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001dea:	4413      	add	r3, r2
 8001dec:	460a      	mov	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001df0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001df4:	3301      	adds	r3, #1
 8001df6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001dfa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001dfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e02:	d3e0      	bcc.n	8001dc6 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001e04:	f107 010c 	add.w	r1, r7, #12
 8001e08:	230a      	movs	r3, #10
 8001e0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e0e:	4843      	ldr	r0, [pc, #268]	; (8001f1c <ILI9341_Draw_Image+0x35c>)
 8001e10:	f002 ffb1 	bl	8004d76 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001e14:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001e18:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e1c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001e20:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001e24:	3301      	adds	r3, #1
 8001e26:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001e2a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001e2e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001e32:	d9c4      	bls.n	8001dbe <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3a:	4837      	ldr	r0, [pc, #220]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001e3c:	f001 fc54 	bl	80036e8 <HAL_GPIO_WritePin>
}
 8001e40:	e064      	b.n	8001f0c <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8001e42:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e46:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d15d      	bne.n	8001f0c <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 f935 	bl	80020c0 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001e56:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e5a:	22f0      	movs	r2, #240	; 0xf0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f000 f8c4 	bl	8001fec <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e6a:	482b      	ldr	r0, [pc, #172]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001e6c:	f001 fc3c 	bl	80036e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e76:	4828      	ldr	r0, [pc, #160]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001e78:	f001 fc36 	bl	80036e8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001e82:	2300      	movs	r3, #0
 8001e84:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001e88:	e035      	b.n	8001ef6 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001e90:	e019      	b.n	8001ec6 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001e92:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8001e96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001ea0:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001ea4:	6812      	ldr	r2, [r2, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	7819      	ldrb	r1, [r3, #0]
 8001eaa:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001eae:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001eb2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eb6:	4413      	add	r3, r2
 8001eb8:	460a      	mov	r2, r1
 8001eba:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001ebc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001ec6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ece:	d3e0      	bcc.n	8001e92 <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001ed0:	f107 010c 	add.w	r1, r7, #12
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001eda:	4810      	ldr	r0, [pc, #64]	; (8001f1c <ILI9341_Draw_Image+0x35c>)
 8001edc:	f002 ff4b 	bl	8004d76 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001ee0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001ee4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ee8:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001eec:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001ef6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001efa:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001efe:	d9c4      	bls.n	8001e8a <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f00:	2201      	movs	r2, #1
 8001f02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <ILI9341_Draw_Image+0x358>)
 8001f08:	f001 fbee 	bl	80036e8 <HAL_GPIO_WritePin>
}
 8001f0c:	bf00      	nop
 8001f0e:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	200002e0 	.word	0x200002e0

08001f20 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8001f24:	f7ff f8d2 	bl	80010cc <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8001f28:	f7fe fbf2 	bl	8000710 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f32:	4802      	ldr	r0, [pc, #8]	; (8001f3c <ILI9341_SPI_Init+0x1c>)
 8001f34:	f001 fbd8 	bl	80036e8 <HAL_GPIO_WritePin>
}
 8001f38:	bf00      	nop
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40020800 	.word	0x40020800

08001f40 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001f4a:	1df9      	adds	r1, r7, #7
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4803      	ldr	r0, [pc, #12]	; (8001f60 <ILI9341_SPI_Send+0x20>)
 8001f52:	f002 ff10 	bl	8004d76 <HAL_SPI_Transmit>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200002e0 	.word	0x200002e0

08001f64 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f74:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <ILI9341_Write_Command+0x40>)
 8001f76:	f001 fbb7 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f80:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <ILI9341_Write_Command+0x40>)
 8001f82:	f001 fbb1 	bl	80036e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ffd9 	bl	8001f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f94:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <ILI9341_Write_Command+0x40>)
 8001f96:	f001 fba7 	bl	80036e8 <HAL_GPIO_WritePin>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40020800 	.word	0x40020800

08001fa8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <ILI9341_Write_Data+0x40>)
 8001fba:	f001 fb95 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fc4:	4808      	ldr	r0, [pc, #32]	; (8001fe8 <ILI9341_Write_Data+0x40>)
 8001fc6:	f001 fb8f 	bl	80036e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ffb7 	bl	8001f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fd8:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <ILI9341_Write_Data+0x40>)
 8001fda:	f001 fb85 	bl	80036e8 <HAL_GPIO_WritePin>
}
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40020800 	.word	0x40020800

08001fec <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4604      	mov	r4, r0
 8001ff4:	4608      	mov	r0, r1
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	80fb      	strh	r3, [r7, #6]
 8001ffe:	4603      	mov	r3, r0
 8002000:	80bb      	strh	r3, [r7, #4]
 8002002:	460b      	mov	r3, r1
 8002004:	807b      	strh	r3, [r7, #2]
 8002006:	4613      	mov	r3, r2
 8002008:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800200a:	202a      	movs	r0, #42	; 0x2a
 800200c:	f7ff ffaa 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	b29b      	uxth	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ffc5 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ffc0 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002028:	887b      	ldrh	r3, [r7, #2]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	b29b      	uxth	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ffb9 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002036:	887b      	ldrh	r3, [r7, #2]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ffb4 	bl	8001fa8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002040:	202b      	movs	r0, #43	; 0x2b
 8002042:	f7ff ff8f 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002046:	88bb      	ldrh	r3, [r7, #4]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	b29b      	uxth	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ffaa 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002054:	88bb      	ldrh	r3, [r7, #4]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ffa5 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 800205e:	883b      	ldrh	r3, [r7, #0]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	b29b      	uxth	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff9e 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 800206c:	883b      	ldrh	r3, [r7, #0]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff99 	bl	8001fa8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8002076:	202c      	movs	r0, #44	; 0x2c
 8002078:	f7ff ff74 	bl	8001f64 <ILI9341_Write_Command>
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}

08002084 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800208e:	480b      	ldr	r0, [pc, #44]	; (80020bc <ILI9341_Reset+0x38>)
 8002090:	f001 fb2a 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002094:	20c8      	movs	r0, #200	; 0xc8
 8002096:	f000 fbb9 	bl	800280c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <ILI9341_Reset+0x38>)
 80020a2:	f001 fb21 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80020a6:	20c8      	movs	r0, #200	; 0xc8
 80020a8:	f000 fbb0 	bl	800280c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b2:	4802      	ldr	r0, [pc, #8]	; (80020bc <ILI9341_Reset+0x38>)
 80020b4:	f001 fb18 	bl	80036e8 <HAL_GPIO_WritePin>
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40020800 	.word	0x40020800

080020c0 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80020ce:	2036      	movs	r0, #54	; 0x36
 80020d0:	f7ff ff48 	bl	8001f64 <ILI9341_Write_Command>
HAL_Delay(1);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f000 fb99 	bl	800280c <HAL_Delay>
	
switch(screen_rotation) 
 80020da:	7bfb      	ldrb	r3, [r7, #15]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d837      	bhi.n	8002150 <ILI9341_Set_Rotation+0x90>
 80020e0:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <ILI9341_Set_Rotation+0x28>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	0800210f 	.word	0x0800210f
 80020f0:	08002125 	.word	0x08002125
 80020f4:	0800213b 	.word	0x0800213b
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80020f8:	2048      	movs	r0, #72	; 0x48
 80020fa:	f7ff ff55 	bl	8001fa8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80020fe:	4b17      	ldr	r3, [pc, #92]	; (800215c <ILI9341_Set_Rotation+0x9c>)
 8002100:	22f0      	movs	r2, #240	; 0xf0
 8002102:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002104:	4b16      	ldr	r3, [pc, #88]	; (8002160 <ILI9341_Set_Rotation+0xa0>)
 8002106:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800210a:	801a      	strh	r2, [r3, #0]
			break;
 800210c:	e021      	b.n	8002152 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800210e:	2028      	movs	r0, #40	; 0x28
 8002110:	f7ff ff4a 	bl	8001fa8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <ILI9341_Set_Rotation+0x9c>)
 8002116:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800211a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <ILI9341_Set_Rotation+0xa0>)
 800211e:	22f0      	movs	r2, #240	; 0xf0
 8002120:	801a      	strh	r2, [r3, #0]
			break;
 8002122:	e016      	b.n	8002152 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002124:	2088      	movs	r0, #136	; 0x88
 8002126:	f7ff ff3f 	bl	8001fa8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800212a:	4b0c      	ldr	r3, [pc, #48]	; (800215c <ILI9341_Set_Rotation+0x9c>)
 800212c:	22f0      	movs	r2, #240	; 0xf0
 800212e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <ILI9341_Set_Rotation+0xa0>)
 8002132:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002136:	801a      	strh	r2, [r3, #0]
			break;
 8002138:	e00b      	b.n	8002152 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800213a:	20e8      	movs	r0, #232	; 0xe8
 800213c:	f7ff ff34 	bl	8001fa8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <ILI9341_Set_Rotation+0x9c>)
 8002142:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002146:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002148:	4b05      	ldr	r3, [pc, #20]	; (8002160 <ILI9341_Set_Rotation+0xa0>)
 800214a:	22f0      	movs	r2, #240	; 0xf0
 800214c:	801a      	strh	r2, [r3, #0]
			break;
 800214e:	e000      	b.n	8002152 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002150:	bf00      	nop
	}
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	20000012 	.word	0x20000012
 8002160:	20000010 	.word	0x20000010

08002164 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002168:	2201      	movs	r2, #1
 800216a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800216e:	4802      	ldr	r0, [pc, #8]	; (8002178 <ILI9341_Enable+0x14>)
 8002170:	f001 faba 	bl	80036e8 <HAL_GPIO_WritePin>
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40020800 	.word	0x40020800

0800217c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002180:	f7ff fff0 	bl	8002164 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002184:	f7ff fecc 	bl	8001f20 <ILI9341_SPI_Init>
ILI9341_Reset();
 8002188:	f7ff ff7c 	bl	8002084 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 800218c:	2001      	movs	r0, #1
 800218e:	f7ff fee9 	bl	8001f64 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002192:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002196:	f000 fb39 	bl	800280c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800219a:	20cb      	movs	r0, #203	; 0xcb
 800219c:	f7ff fee2 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80021a0:	2039      	movs	r0, #57	; 0x39
 80021a2:	f7ff ff01 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80021a6:	202c      	movs	r0, #44	; 0x2c
 80021a8:	f7ff fefe 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7ff fefb 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80021b2:	2034      	movs	r0, #52	; 0x34
 80021b4:	f7ff fef8 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80021b8:	2002      	movs	r0, #2
 80021ba:	f7ff fef5 	bl	8001fa8 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80021be:	20cf      	movs	r0, #207	; 0xcf
 80021c0:	f7ff fed0 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7ff feef 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80021ca:	20c1      	movs	r0, #193	; 0xc1
 80021cc:	f7ff feec 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80021d0:	2030      	movs	r0, #48	; 0x30
 80021d2:	f7ff fee9 	bl	8001fa8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80021d6:	20e8      	movs	r0, #232	; 0xe8
 80021d8:	f7ff fec4 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80021dc:	2085      	movs	r0, #133	; 0x85
 80021de:	f7ff fee3 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7ff fee0 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80021e8:	2078      	movs	r0, #120	; 0x78
 80021ea:	f7ff fedd 	bl	8001fa8 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80021ee:	20ea      	movs	r0, #234	; 0xea
 80021f0:	f7ff feb8 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7ff fed7 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff fed4 	bl	8001fa8 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002200:	20ed      	movs	r0, #237	; 0xed
 8002202:	f7ff feaf 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002206:	2064      	movs	r0, #100	; 0x64
 8002208:	f7ff fece 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800220c:	2003      	movs	r0, #3
 800220e:	f7ff fecb 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002212:	2012      	movs	r0, #18
 8002214:	f7ff fec8 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002218:	2081      	movs	r0, #129	; 0x81
 800221a:	f7ff fec5 	bl	8001fa8 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800221e:	20f7      	movs	r0, #247	; 0xf7
 8002220:	f7ff fea0 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002224:	2020      	movs	r0, #32
 8002226:	f7ff febf 	bl	8001fa8 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800222a:	20c0      	movs	r0, #192	; 0xc0
 800222c:	f7ff fe9a 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002230:	2023      	movs	r0, #35	; 0x23
 8002232:	f7ff feb9 	bl	8001fa8 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002236:	20c1      	movs	r0, #193	; 0xc1
 8002238:	f7ff fe94 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 800223c:	2010      	movs	r0, #16
 800223e:	f7ff feb3 	bl	8001fa8 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002242:	20c5      	movs	r0, #197	; 0xc5
 8002244:	f7ff fe8e 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002248:	203e      	movs	r0, #62	; 0x3e
 800224a:	f7ff fead 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800224e:	2028      	movs	r0, #40	; 0x28
 8002250:	f7ff feaa 	bl	8001fa8 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002254:	20c7      	movs	r0, #199	; 0xc7
 8002256:	f7ff fe85 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800225a:	2086      	movs	r0, #134	; 0x86
 800225c:	f7ff fea4 	bl	8001fa8 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002260:	2036      	movs	r0, #54	; 0x36
 8002262:	f7ff fe7f 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002266:	2048      	movs	r0, #72	; 0x48
 8002268:	f7ff fe9e 	bl	8001fa8 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 800226c:	203a      	movs	r0, #58	; 0x3a
 800226e:	f7ff fe79 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002272:	2055      	movs	r0, #85	; 0x55
 8002274:	f7ff fe98 	bl	8001fa8 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002278:	20b1      	movs	r0, #177	; 0xb1
 800227a:	f7ff fe73 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff fe92 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002284:	2018      	movs	r0, #24
 8002286:	f7ff fe8f 	bl	8001fa8 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800228a:	20b6      	movs	r0, #182	; 0xb6
 800228c:	f7ff fe6a 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002290:	2008      	movs	r0, #8
 8002292:	f7ff fe89 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002296:	2082      	movs	r0, #130	; 0x82
 8002298:	f7ff fe86 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 800229c:	2027      	movs	r0, #39	; 0x27
 800229e:	f7ff fe83 	bl	8001fa8 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80022a2:	20f2      	movs	r0, #242	; 0xf2
 80022a4:	f7ff fe5e 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7ff fe7d 	bl	8001fa8 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80022ae:	2026      	movs	r0, #38	; 0x26
 80022b0:	f7ff fe58 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80022b4:	2001      	movs	r0, #1
 80022b6:	f7ff fe77 	bl	8001fa8 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80022ba:	20e0      	movs	r0, #224	; 0xe0
 80022bc:	f7ff fe52 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80022c0:	200f      	movs	r0, #15
 80022c2:	f7ff fe71 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80022c6:	2031      	movs	r0, #49	; 0x31
 80022c8:	f7ff fe6e 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80022cc:	202b      	movs	r0, #43	; 0x2b
 80022ce:	f7ff fe6b 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80022d2:	200c      	movs	r0, #12
 80022d4:	f7ff fe68 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80022d8:	200e      	movs	r0, #14
 80022da:	f7ff fe65 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80022de:	2008      	movs	r0, #8
 80022e0:	f7ff fe62 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80022e4:	204e      	movs	r0, #78	; 0x4e
 80022e6:	f7ff fe5f 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80022ea:	20f1      	movs	r0, #241	; 0xf1
 80022ec:	f7ff fe5c 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80022f0:	2037      	movs	r0, #55	; 0x37
 80022f2:	f7ff fe59 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80022f6:	2007      	movs	r0, #7
 80022f8:	f7ff fe56 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80022fc:	2010      	movs	r0, #16
 80022fe:	f7ff fe53 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002302:	2003      	movs	r0, #3
 8002304:	f7ff fe50 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002308:	200e      	movs	r0, #14
 800230a:	f7ff fe4d 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800230e:	2009      	movs	r0, #9
 8002310:	f7ff fe4a 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002314:	2000      	movs	r0, #0
 8002316:	f7ff fe47 	bl	8001fa8 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 800231a:	20e1      	movs	r0, #225	; 0xe1
 800231c:	f7ff fe22 	bl	8001f64 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff fe41 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002326:	200e      	movs	r0, #14
 8002328:	f7ff fe3e 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 800232c:	2014      	movs	r0, #20
 800232e:	f7ff fe3b 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002332:	2003      	movs	r0, #3
 8002334:	f7ff fe38 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002338:	2011      	movs	r0, #17
 800233a:	f7ff fe35 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800233e:	2007      	movs	r0, #7
 8002340:	f7ff fe32 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002344:	2031      	movs	r0, #49	; 0x31
 8002346:	f7ff fe2f 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800234a:	20c1      	movs	r0, #193	; 0xc1
 800234c:	f7ff fe2c 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002350:	2048      	movs	r0, #72	; 0x48
 8002352:	f7ff fe29 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002356:	2008      	movs	r0, #8
 8002358:	f7ff fe26 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800235c:	200f      	movs	r0, #15
 800235e:	f7ff fe23 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002362:	200c      	movs	r0, #12
 8002364:	f7ff fe20 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002368:	2031      	movs	r0, #49	; 0x31
 800236a:	f7ff fe1d 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800236e:	2036      	movs	r0, #54	; 0x36
 8002370:	f7ff fe1a 	bl	8001fa8 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002374:	200f      	movs	r0, #15
 8002376:	f7ff fe17 	bl	8001fa8 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800237a:	2011      	movs	r0, #17
 800237c:	f7ff fdf2 	bl	8001f64 <ILI9341_Write_Command>
HAL_Delay(120);
 8002380:	2078      	movs	r0, #120	; 0x78
 8002382:	f000 fa43 	bl	800280c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002386:	2029      	movs	r0, #41	; 0x29
 8002388:	f7ff fdec 	bl	8001f64 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800238c:	2000      	movs	r0, #0
 800238e:	f7ff fe97 	bl	80020c0 <ILI9341_Set_Rotation>
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800239c:	b08d      	sub	sp, #52	; 0x34
 800239e:	af00      	add	r7, sp, #0
 80023a0:	4603      	mov	r3, r0
 80023a2:	6039      	str	r1, [r7, #0]
 80023a4:	80fb      	strh	r3, [r7, #6]
 80023a6:	466b      	mov	r3, sp
 80023a8:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80023b6:	d202      	bcs.n	80023be <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023bc:	e002      	b.n	80023c4 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80023be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ca:	4840      	ldr	r0, [pc, #256]	; (80024cc <ILI9341_Draw_Colour_Burst+0x134>)
 80023cc:	f001 f98c 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80023d0:	2200      	movs	r2, #0
 80023d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d6:	483d      	ldr	r0, [pc, #244]	; (80024cc <ILI9341_Draw_Colour_Burst+0x134>)
 80023d8:	f001 f986 	bl	80036e8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	b29b      	uxth	r3, r3
 80023e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80023e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023e8:	460b      	mov	r3, r1
 80023ea:	3b01      	subs	r3, #1
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	2300      	movs	r3, #0
 80023f0:	4688      	mov	r8, r1
 80023f2:	4699      	mov	r9, r3
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002400:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002404:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002408:	2300      	movs	r3, #0
 800240a:	460c      	mov	r4, r1
 800240c:	461d      	mov	r5, r3
 800240e:	f04f 0200 	mov.w	r2, #0
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	00eb      	lsls	r3, r5, #3
 8002418:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800241c:	00e2      	lsls	r2, r4, #3
 800241e:	1dcb      	adds	r3, r1, #7
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	ebad 0d03 	sub.w	sp, sp, r3
 8002428:	466b      	mov	r3, sp
 800242a:	3300      	adds	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800242e:	2300      	movs	r3, #0
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
 8002432:	e00e      	b.n	8002452 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002438:	4413      	add	r3, r2
 800243a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800243e:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002442:	3301      	adds	r3, #1
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	b2d1      	uxtb	r1, r2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800244c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800244e:	3302      	adds	r3, #2
 8002450:	62bb      	str	r3, [r7, #40]	; 0x28
 8002452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	429a      	cmp	r2, r3
 8002458:	d3ec      	bcc.n	8002434 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	fbb2 f3f3 	udiv	r3, r2, r3
 8002468:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800246e:	fbb3 f2f2 	udiv	r2, r3, r2
 8002472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002474:	fb01 f202 	mul.w	r2, r1, r2
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d010      	beq.n	80024a4 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002482:	2300      	movs	r3, #0
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
 8002486:	e009      	b.n	800249c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	b29a      	uxth	r2, r3
 800248c:	230a      	movs	r3, #10
 800248e:	69b9      	ldr	r1, [r7, #24]
 8002490:	480f      	ldr	r0, [pc, #60]	; (80024d0 <ILI9341_Draw_Colour_Burst+0x138>)
 8002492:	f002 fc70 	bl	8004d76 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	3301      	adds	r3, #1
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3f1      	bcc.n	8002488 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	230a      	movs	r3, #10
 80024aa:	69b9      	ldr	r1, [r7, #24]
 80024ac:	4808      	ldr	r0, [pc, #32]	; (80024d0 <ILI9341_Draw_Colour_Burst+0x138>)
 80024ae:	f002 fc62 	bl	8004d76 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80024b2:	2201      	movs	r2, #1
 80024b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b8:	4804      	ldr	r0, [pc, #16]	; (80024cc <ILI9341_Draw_Colour_Burst+0x134>)
 80024ba:	f001 f915 	bl	80036e8 <HAL_GPIO_WritePin>
 80024be:	46b5      	mov	sp, r6
}
 80024c0:	bf00      	nop
 80024c2:	3734      	adds	r7, #52	; 0x34
 80024c4:	46bd      	mov	sp, r7
 80024c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024ca:	bf00      	nop
 80024cc:	40020800 	.word	0x40020800
 80024d0:	200002e0 	.word	0x200002e0

080024d4 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	4603      	mov	r3, r0
 80024dc:	80fb      	strh	r3, [r7, #6]
 80024de:	460b      	mov	r3, r1
 80024e0:	80bb      	strh	r3, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80024e6:	4b64      	ldr	r3, [pc, #400]	; (8002678 <ILI9341_Draw_Pixel+0x1a4>)
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	88fa      	ldrh	r2, [r7, #6]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	f080 80be 	bcs.w	8002670 <ILI9341_Draw_Pixel+0x19c>
 80024f4:	4b61      	ldr	r3, [pc, #388]	; (800267c <ILI9341_Draw_Pixel+0x1a8>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	88ba      	ldrh	r2, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f080 80b7 	bcs.w	8002670 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002502:	2200      	movs	r2, #0
 8002504:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002508:	485d      	ldr	r0, [pc, #372]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 800250a:	f001 f8ed 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002514:	485a      	ldr	r0, [pc, #360]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 8002516:	f001 f8e7 	bl	80036e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 800251a:	202a      	movs	r0, #42	; 0x2a
 800251c:	f7ff fd10 	bl	8001f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002520:	2201      	movs	r2, #1
 8002522:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002526:	4856      	ldr	r0, [pc, #344]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 8002528:	f001 f8de 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800252c:	2201      	movs	r2, #1
 800252e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002532:	4853      	ldr	r0, [pc, #332]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 8002534:	f001 f8d8 	bl	80036e8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002538:	2200      	movs	r2, #0
 800253a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800253e:	4850      	ldr	r0, [pc, #320]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 8002540:	f001 f8d2 	bl	80036e8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	b29b      	uxth	r3, r3
 800254a:	b2db      	uxtb	r3, r3
 800254c:	753b      	strb	r3, [r7, #20]
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	757b      	strb	r3, [r7, #21]
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	3301      	adds	r3, #1
 8002558:	121b      	asrs	r3, r3, #8
 800255a:	b2db      	uxtb	r3, r3
 800255c:	75bb      	strb	r3, [r7, #22]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3301      	adds	r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002568:	f107 0114 	add.w	r1, r7, #20
 800256c:	2301      	movs	r3, #1
 800256e:	2204      	movs	r2, #4
 8002570:	4844      	ldr	r0, [pc, #272]	; (8002684 <ILI9341_Draw_Pixel+0x1b0>)
 8002572:	f002 fc00 	bl	8004d76 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002576:	2201      	movs	r2, #1
 8002578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800257c:	4840      	ldr	r0, [pc, #256]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 800257e:	f001 f8b3 	bl	80036e8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002582:	2200      	movs	r2, #0
 8002584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002588:	483d      	ldr	r0, [pc, #244]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 800258a:	f001 f8ad 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002594:	483a      	ldr	r0, [pc, #232]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 8002596:	f001 f8a7 	bl	80036e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800259a:	202b      	movs	r0, #43	; 0x2b
 800259c:	f7ff fcd0 	bl	8001f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80025a0:	2201      	movs	r2, #1
 80025a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a6:	4836      	ldr	r0, [pc, #216]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 80025a8:	f001 f89e 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80025ac:	2201      	movs	r2, #1
 80025ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025b2:	4833      	ldr	r0, [pc, #204]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 80025b4:	f001 f898 	bl	80036e8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80025b8:	2200      	movs	r2, #0
 80025ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025be:	4830      	ldr	r0, [pc, #192]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 80025c0:	f001 f892 	bl	80036e8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	743b      	strb	r3, [r7, #16]
 80025ce:	88bb      	ldrh	r3, [r7, #4]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	747b      	strb	r3, [r7, #17]
 80025d4:	88bb      	ldrh	r3, [r7, #4]
 80025d6:	3301      	adds	r3, #1
 80025d8:	121b      	asrs	r3, r3, #8
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	74bb      	strb	r3, [r7, #18]
 80025de:	88bb      	ldrh	r3, [r7, #4]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3301      	adds	r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80025e8:	f107 0110 	add.w	r1, r7, #16
 80025ec:	2301      	movs	r3, #1
 80025ee:	2204      	movs	r2, #4
 80025f0:	4824      	ldr	r0, [pc, #144]	; (8002684 <ILI9341_Draw_Pixel+0x1b0>)
 80025f2:	f002 fbc0 	bl	8004d76 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025f6:	2201      	movs	r2, #1
 80025f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025fc:	4820      	ldr	r0, [pc, #128]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 80025fe:	f001 f873 	bl	80036e8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002602:	2200      	movs	r2, #0
 8002604:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002608:	481d      	ldr	r0, [pc, #116]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 800260a:	f001 f86d 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800260e:	2200      	movs	r2, #0
 8002610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002614:	481a      	ldr	r0, [pc, #104]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 8002616:	f001 f867 	bl	80036e8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800261a:	202c      	movs	r0, #44	; 0x2c
 800261c:	f7ff fc90 	bl	8001f40 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002620:	2201      	movs	r2, #1
 8002622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002626:	4816      	ldr	r0, [pc, #88]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 8002628:	f001 f85e 	bl	80036e8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800262c:	2201      	movs	r2, #1
 800262e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002632:	4813      	ldr	r0, [pc, #76]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 8002634:	f001 f858 	bl	80036e8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002638:	2200      	movs	r2, #0
 800263a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800263e:	4810      	ldr	r0, [pc, #64]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 8002640:	f001 f852 	bl	80036e8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002644:	887b      	ldrh	r3, [r7, #2]
 8002646:	0a1b      	lsrs	r3, r3, #8
 8002648:	b29b      	uxth	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	733b      	strb	r3, [r7, #12]
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002654:	f107 010c 	add.w	r1, r7, #12
 8002658:	2301      	movs	r3, #1
 800265a:	2202      	movs	r2, #2
 800265c:	4809      	ldr	r0, [pc, #36]	; (8002684 <ILI9341_Draw_Pixel+0x1b0>)
 800265e:	f002 fb8a 	bl	8004d76 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002662:	2201      	movs	r2, #1
 8002664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002668:	4805      	ldr	r0, [pc, #20]	; (8002680 <ILI9341_Draw_Pixel+0x1ac>)
 800266a:	f001 f83d 	bl	80036e8 <HAL_GPIO_WritePin>
 800266e:	e000      	b.n	8002672 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002670:	bf00      	nop
	
}
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000012 	.word	0x20000012
 800267c:	20000010 	.word	0x20000010
 8002680:	40020800 	.word	0x40020800
 8002684:	200002e0 	.word	0x200002e0

08002688 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002688:	b590      	push	{r4, r7, lr}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	4604      	mov	r4, r0
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4623      	mov	r3, r4
 8002698:	80fb      	strh	r3, [r7, #6]
 800269a:	4603      	mov	r3, r0
 800269c:	80bb      	strh	r3, [r7, #4]
 800269e:	460b      	mov	r3, r1
 80026a0:	807b      	strh	r3, [r7, #2]
 80026a2:	4613      	mov	r3, r2
 80026a4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <ILI9341_Draw_Rectangle+0xb0>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	88fa      	ldrh	r2, [r7, #6]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d23d      	bcs.n	800272e <ILI9341_Draw_Rectangle+0xa6>
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <ILI9341_Draw_Rectangle+0xb4>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	88ba      	ldrh	r2, [r7, #4]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d237      	bcs.n	800272e <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	887b      	ldrh	r3, [r7, #2]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <ILI9341_Draw_Rectangle+0xb0>)
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	b292      	uxth	r2, r2
 80026ca:	4293      	cmp	r3, r2
 80026cc:	dd05      	ble.n	80026da <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <ILI9341_Draw_Rectangle+0xb0>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80026da:	88ba      	ldrh	r2, [r7, #4]
 80026dc:	883b      	ldrh	r3, [r7, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	4a16      	ldr	r2, [pc, #88]	; (800273c <ILI9341_Draw_Rectangle+0xb4>)
 80026e2:	8812      	ldrh	r2, [r2, #0]
 80026e4:	b292      	uxth	r2, r2
 80026e6:	4293      	cmp	r3, r2
 80026e8:	dd05      	ble.n	80026f6 <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80026ea:	4b14      	ldr	r3, [pc, #80]	; (800273c <ILI9341_Draw_Rectangle+0xb4>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	88bb      	ldrh	r3, [r7, #4]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	4413      	add	r3, r2
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29c      	uxth	r4, r3
 8002702:	88ba      	ldrh	r2, [r7, #4]
 8002704:	883b      	ldrh	r3, [r7, #0]
 8002706:	4413      	add	r3, r2
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29b      	uxth	r3, r3
 800270e:	88b9      	ldrh	r1, [r7, #4]
 8002710:	88f8      	ldrh	r0, [r7, #6]
 8002712:	4622      	mov	r2, r4
 8002714:	f7ff fc6a 	bl	8001fec <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002718:	883b      	ldrh	r3, [r7, #0]
 800271a:	887a      	ldrh	r2, [r7, #2]
 800271c:	fb02 f303 	mul.w	r3, r2, r3
 8002720:	461a      	mov	r2, r3
 8002722:	8b3b      	ldrh	r3, [r7, #24]
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff fe36 	bl	8002398 <ILI9341_Draw_Colour_Burst>
 800272c:	e000      	b.n	8002730 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800272e:	bf00      	nop
}
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bd90      	pop	{r4, r7, pc}
 8002736:	bf00      	nop
 8002738:	20000012 	.word	0x20000012
 800273c:	20000010 	.word	0x20000010

08002740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <HAL_Init+0x28>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a07      	ldr	r2, [pc, #28]	; (8002768 <HAL_Init+0x28>)
 800274a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002750:	2003      	movs	r0, #3
 8002752:	f000 fd49 	bl	80031e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002756:	2000      	movs	r0, #0
 8002758:	f000 f808 	bl	800276c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800275c:	f7fe fd38 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023c00 	.word	0x40023c00

0800276c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002774:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_InitTick+0x54>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_InitTick+0x58>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002782:	fbb3 f3f1 	udiv	r3, r3, r1
 8002786:	fbb2 f3f3 	udiv	r3, r2, r3
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fd61 	bl	8003252 <HAL_SYSTICK_Config>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e00e      	b.n	80027b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0f      	cmp	r3, #15
 800279e:	d80a      	bhi.n	80027b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a0:	2200      	movs	r2, #0
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	f04f 30ff 	mov.w	r0, #4294967295
 80027a8:	f000 fd29 	bl	80031fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027ac:	4a06      	ldr	r2, [pc, #24]	; (80027c8 <HAL_InitTick+0x5c>)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e000      	b.n	80027b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	2000000c 	.word	0x2000000c
 80027c4:	20000018 	.word	0x20000018
 80027c8:	20000014 	.word	0x20000014

080027cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d0:	4b06      	ldr	r3, [pc, #24]	; (80027ec <HAL_IncTick+0x20>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x24>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_IncTick+0x24>)
 80027de:	6013      	str	r3, [r2, #0]
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000018 	.word	0x20000018
 80027f0:	200004f0 	.word	0x200004f0

080027f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return uwTick;
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <HAL_GetTick+0x14>)
 80027fa:	681b      	ldr	r3, [r3, #0]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	200004f0 	.word	0x200004f0

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff ffee 	bl	80027f4 <HAL_GetTick>
 8002818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002824:	d005      	beq.n	8002832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002826:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <HAL_Delay+0x44>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002832:	bf00      	nop
 8002834:	f7ff ffde 	bl	80027f4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	429a      	cmp	r2, r3
 8002842:	d8f7      	bhi.n	8002834 <HAL_Delay+0x28>
  {
  }
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000018 	.word	0x20000018

08002854 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e031      	b.n	80028ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	2b00      	cmp	r3, #0
 8002870:	d109      	bne.n	8002886 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7fd ff0c 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	d116      	bne.n	80028c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_ADC_Init+0x84>)
 8002898:	4013      	ands	r3, r2
 800289a:	f043 0202 	orr.w	r2, r3, #2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fad6 	bl	8002e54 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	f023 0303 	bic.w	r3, r3, #3
 80028b6:	f043 0201 	orr.w	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
 80028be:	e001      	b.n	80028c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	ffffeefd 	.word	0xffffeefd

080028dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Start+0x1a>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e0ad      	b.n	8002a52 <HAL_ADC_Start+0x176>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d018      	beq.n	800293e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0201 	orr.w	r2, r2, #1
 800291a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800291c:	4b50      	ldr	r3, [pc, #320]	; (8002a60 <HAL_ADC_Start+0x184>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a50      	ldr	r2, [pc, #320]	; (8002a64 <HAL_ADC_Start+0x188>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	0c9a      	lsrs	r2, r3, #18
 8002928:	4613      	mov	r3, r2
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	4413      	add	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002930:	e002      	b.n	8002938 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	3b01      	subs	r3, #1
 8002936:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f9      	bne.n	8002932 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d175      	bne.n	8002a38 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002950:	4b45      	ldr	r3, [pc, #276]	; (8002a68 <HAL_ADC_Start+0x18c>)
 8002952:	4013      	ands	r3, r2
 8002954:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002972:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002982:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002986:	d106      	bne.n	8002996 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800298c:	f023 0206 	bic.w	r2, r3, #6
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	645a      	str	r2, [r3, #68]	; 0x44
 8002994:	e002      	b.n	800299c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80029ae:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <HAL_ADC_Start+0x190>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 031f 	and.w	r3, r3, #31
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10f      	bne.n	80029da <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d143      	bne.n	8002a50 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	e03a      	b.n	8002a50 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a24      	ldr	r2, [pc, #144]	; (8002a70 <HAL_ADC_Start+0x194>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d10e      	bne.n	8002a02 <HAL_ADC_Start+0x126>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d107      	bne.n	8002a02 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a00:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002a02:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <HAL_ADC_Start+0x190>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d120      	bne.n	8002a50 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_ADC_Start+0x198>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d11b      	bne.n	8002a50 <HAL_ADC_Start+0x174>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d114      	bne.n	8002a50 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	e00b      	b.n	8002a50 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3c:	f043 0210 	orr.w	r2, r3, #16
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a48:	f043 0201 	orr.w	r2, r3, #1
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3714      	adds	r7, #20
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	2000000c 	.word	0x2000000c
 8002a64:	431bde83 	.word	0x431bde83
 8002a68:	fffff8fe 	.word	0xfffff8fe
 8002a6c:	40012300 	.word	0x40012300
 8002a70:	40012000 	.word	0x40012000
 8002a74:	40012200 	.word	0x40012200

08002a78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a94:	d113      	bne.n	8002abe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002aa4:	d10b      	bne.n	8002abe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f043 0220 	orr.w	r2, r3, #32
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e063      	b.n	8002b86 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002abe:	f7ff fe99 	bl	80027f4 <HAL_GetTick>
 8002ac2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ac4:	e021      	b.n	8002b0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d01d      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_ADC_PollForConversion+0x6c>
 8002ad4:	f7ff fe8e 	bl	80027f4 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d212      	bcs.n	8002b0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d00b      	beq.n	8002b0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	f043 0204 	orr.w	r2, r3, #4
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e03d      	b.n	8002b86 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d1d6      	bne.n	8002ac6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0212 	mvn.w	r2, #18
 8002b20:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d123      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11f      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d111      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3710      	adds	r7, #16
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x1c>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e136      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x28a>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2b09      	cmp	r3, #9
 8002bd2:	d93a      	bls.n	8002c4a <HAL_ADC_ConfigChannel+0xa2>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bdc:	d035      	beq.n	8002c4a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68d9      	ldr	r1, [r3, #12]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	461a      	mov	r2, r3
 8002bec:	4613      	mov	r3, r2
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b1e      	subs	r3, #30
 8002bf4:	2207      	movs	r2, #7
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	400a      	ands	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a8d      	ldr	r2, [pc, #564]	; (8002e40 <HAL_ADC_ConfigChannel+0x298>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10a      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68d9      	ldr	r1, [r3, #12]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	061a      	lsls	r2, r3, #24
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c22:	e035      	b.n	8002c90 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68d9      	ldr	r1, [r3, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4403      	add	r3, r0
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	430a      	orrs	r2, r1
 8002c46:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c48:	e022      	b.n	8002c90 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6919      	ldr	r1, [r3, #16]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	2207      	movs	r2, #7
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43da      	mvns	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	6919      	ldr	r1, [r3, #16]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4618      	mov	r0, r3
 8002c80:	4603      	mov	r3, r0
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4403      	add	r3, r0
 8002c86:	409a      	lsls	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d824      	bhi.n	8002ce2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b05      	subs	r3, #5
 8002caa:	221f      	movs	r2, #31
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3b05      	subs	r3, #5
 8002cd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce0:	e04c      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b0c      	cmp	r3, #12
 8002ce8:	d824      	bhi.n	8002d34 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	3b23      	subs	r3, #35	; 0x23
 8002cfc:	221f      	movs	r2, #31
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	43da      	mvns	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	400a      	ands	r2, r1
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	4618      	mov	r0, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4413      	add	r3, r2
 8002d24:	3b23      	subs	r3, #35	; 0x23
 8002d26:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
 8002d32:	e023      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685a      	ldr	r2, [r3, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	3b41      	subs	r3, #65	; 0x41
 8002d46:	221f      	movs	r2, #31
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43da      	mvns	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	400a      	ands	r2, r1
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b41      	subs	r3, #65	; 0x41
 8002d70:	fa00 f203 	lsl.w	r2, r0, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a30      	ldr	r2, [pc, #192]	; (8002e44 <HAL_ADC_ConfigChannel+0x29c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d10a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1f4>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d90:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002d96:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d9a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <HAL_ADC_ConfigChannel+0x29c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d10f      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x21e>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2b12      	cmp	r3, #18
 8002dac:	d10b      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002db4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002db8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002dba:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002dc4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a1e      	ldr	r2, [pc, #120]	; (8002e44 <HAL_ADC_ConfigChannel+0x29c>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d12b      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x280>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1a      	ldr	r2, [pc, #104]	; (8002e40 <HAL_ADC_ConfigChannel+0x298>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d003      	beq.n	8002de2 <HAL_ADC_ConfigChannel+0x23a>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b11      	cmp	r3, #17
 8002de0:	d122      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002de2:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002de8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <HAL_ADC_ConfigChannel+0x2a0>)
 8002df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002df8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <HAL_ADC_ConfigChannel+0x298>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d111      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e04:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_ADC_ConfigChannel+0x2a4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <HAL_ADC_ConfigChannel+0x2a8>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	0c9a      	lsrs	r2, r3, #18
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e1a:	e002      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f9      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	10000012 	.word	0x10000012
 8002e44:	40012000 	.word	0x40012000
 8002e48:	40012300 	.word	0x40012300
 8002e4c:	2000000c 	.word	0x2000000c
 8002e50:	431bde83 	.word	0x431bde83

08002e54 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e5c:	4b78      	ldr	r3, [pc, #480]	; (8003040 <ADC_Init+0x1ec>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	4a77      	ldr	r2, [pc, #476]	; (8003040 <ADC_Init+0x1ec>)
 8002e62:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e66:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e68:	4b75      	ldr	r3, [pc, #468]	; (8003040 <ADC_Init+0x1ec>)
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4973      	ldr	r1, [pc, #460]	; (8003040 <ADC_Init+0x1ec>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6859      	ldr	r1, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	021a      	lsls	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6899      	ldr	r1, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee2:	4a58      	ldr	r2, [pc, #352]	; (8003044 <ADC_Init+0x1f0>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d022      	beq.n	8002f2e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ef6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6899      	ldr	r1, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6899      	ldr	r1, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	e00f      	b.n	8002f4e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0202 	bic.w	r2, r2, #2
 8002f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6899      	ldr	r1, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	005a      	lsls	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685a      	ldr	r2, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	035a      	lsls	r2, r3, #13
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	e007      	b.n	8002fc4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	69db      	ldr	r3, [r3, #28]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	051a      	lsls	r2, r3, #20
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6899      	ldr	r1, [r3, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003006:	025a      	lsls	r2, r3, #9
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6899      	ldr	r1, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	029a      	lsls	r2, r3, #10
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr
 8003040:	40012300 	.word	0x40012300
 8003044:	0f000001 	.word	0x0f000001

08003048 <__NVIC_SetPriorityGrouping>:
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003058:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <__NVIC_SetPriorityGrouping+0x40>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003070:	4b06      	ldr	r3, [pc, #24]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 8003072:	4313      	orrs	r3, r2
 8003074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003076:	4a04      	ldr	r2, [pc, #16]	; (8003088 <__NVIC_SetPriorityGrouping+0x40>)
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	60d3      	str	r3, [r2, #12]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00
 800308c:	05fa0000 	.word	0x05fa0000

08003090 <__NVIC_GetPriorityGrouping>:
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0307 	and.w	r3, r3, #7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_EnableIRQ>:
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4907      	ldr	r1, [pc, #28]	; (80030e4 <__NVIC_EnableIRQ+0x38>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	; (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <NVIC_EncodePriority>:
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f1c3 0307 	rsb	r3, r3, #7
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf28      	it	cs
 800315a:	2304      	movcs	r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3304      	adds	r3, #4
 8003162:	2b06      	cmp	r3, #6
 8003164:	d902      	bls.n	800316c <NVIC_EncodePriority+0x30>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3b03      	subs	r3, #3
 800316a:	e000      	b.n	800316e <NVIC_EncodePriority+0x32>
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43d9      	mvns	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	4313      	orrs	r3, r2
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b4:	d301      	bcc.n	80031ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00f      	b.n	80031da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <SysTick_Config+0x40>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c2:	210f      	movs	r1, #15
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	f7ff ff8e 	bl	80030e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <SysTick_Config+0x40>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <SysTick_Config+0x40>)
 80031d4:	2207      	movs	r2, #7
 80031d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	e000e010 	.word	0xe000e010

080031e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff29 	bl	8003048 <__NVIC_SetPriorityGrouping>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800320c:	2300      	movs	r3, #0
 800320e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003210:	f7ff ff3e 	bl	8003090 <__NVIC_GetPriorityGrouping>
 8003214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	6978      	ldr	r0, [r7, #20]
 800321c:	f7ff ff8e 	bl	800313c <NVIC_EncodePriority>
 8003220:	4602      	mov	r2, r0
 8003222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003226:	4611      	mov	r1, r2
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff5d 	bl	80030e8 <__NVIC_SetPriority>
}
 800322e:	bf00      	nop
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	4603      	mov	r3, r0
 800323e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff ff31 	bl	80030ac <__NVIC_EnableIRQ>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b082      	sub	sp, #8
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff ffa2 	bl	80031a4 <SysTick_Config>
 8003260:	4603      	mov	r3, r0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff fabc 	bl	80027f4 <HAL_GetTick>
 800327c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d008      	beq.n	800329c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2280      	movs	r2, #128	; 0x80
 800328e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e052      	b.n	8003342 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0216 	bic.w	r2, r2, #22
 80032aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <HAL_DMA_Abort+0x62>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d007      	beq.n	80032dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0208 	bic.w	r2, r2, #8
 80032da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ec:	e013      	b.n	8003316 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ee:	f7ff fa81 	bl	80027f4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b05      	cmp	r3, #5
 80032fa:	d90c      	bls.n	8003316 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2220      	movs	r2, #32
 8003300:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2203      	movs	r2, #3
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e015      	b.n	8003342 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e4      	bne.n	80032ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003328:	223f      	movs	r2, #63	; 0x3f
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d004      	beq.n	8003368 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2280      	movs	r2, #128	; 0x80
 8003362:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e00c      	b.n	8003382 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2205      	movs	r2, #5
 800336c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0201 	bic.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003390:	b480      	push	{r7}
 8003392:	b089      	sub	sp, #36	; 0x24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80033a2:	2300      	movs	r3, #0
 80033a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e175      	b.n	800369c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80033b0:	2201      	movs	r2, #1
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	f040 8164 	bne.w	8003696 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d005      	beq.n	80033e6 <HAL_GPIO_Init+0x56>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d130      	bne.n	8003448 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	005b      	lsls	r3, r3, #1
 80033f0:	2203      	movs	r2, #3
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	43db      	mvns	r3, r3
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4013      	ands	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	091b      	lsrs	r3, r3, #4
 8003432:	f003 0201 	and.w	r2, r3, #1
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	2b03      	cmp	r3, #3
 8003452:	d017      	beq.n	8003484 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	f003 0303 	and.w	r3, r3, #3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d123      	bne.n	80034d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	3208      	adds	r2, #8
 8003498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800349c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	220f      	movs	r2, #15
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	08da      	lsrs	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	3208      	adds	r2, #8
 80034d2:	69b9      	ldr	r1, [r7, #24]
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	2203      	movs	r2, #3
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43db      	mvns	r3, r3
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4013      	ands	r3, r2
 80034ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0203 	and.w	r2, r3, #3
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 80be 	beq.w	8003696 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351a:	4b66      	ldr	r3, [pc, #408]	; (80036b4 <HAL_GPIO_Init+0x324>)
 800351c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351e:	4a65      	ldr	r2, [pc, #404]	; (80036b4 <HAL_GPIO_Init+0x324>)
 8003520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003524:	6453      	str	r3, [r2, #68]	; 0x44
 8003526:	4b63      	ldr	r3, [pc, #396]	; (80036b4 <HAL_GPIO_Init+0x324>)
 8003528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003532:	4a61      	ldr	r2, [pc, #388]	; (80036b8 <HAL_GPIO_Init+0x328>)
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	220f      	movs	r2, #15
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4013      	ands	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a58      	ldr	r2, [pc, #352]	; (80036bc <HAL_GPIO_Init+0x32c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d037      	beq.n	80035ce <HAL_GPIO_Init+0x23e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a57      	ldr	r2, [pc, #348]	; (80036c0 <HAL_GPIO_Init+0x330>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d031      	beq.n	80035ca <HAL_GPIO_Init+0x23a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a56      	ldr	r2, [pc, #344]	; (80036c4 <HAL_GPIO_Init+0x334>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d02b      	beq.n	80035c6 <HAL_GPIO_Init+0x236>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a55      	ldr	r2, [pc, #340]	; (80036c8 <HAL_GPIO_Init+0x338>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d025      	beq.n	80035c2 <HAL_GPIO_Init+0x232>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a54      	ldr	r2, [pc, #336]	; (80036cc <HAL_GPIO_Init+0x33c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01f      	beq.n	80035be <HAL_GPIO_Init+0x22e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a53      	ldr	r2, [pc, #332]	; (80036d0 <HAL_GPIO_Init+0x340>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d019      	beq.n	80035ba <HAL_GPIO_Init+0x22a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_GPIO_Init+0x344>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <HAL_GPIO_Init+0x226>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a51      	ldr	r2, [pc, #324]	; (80036d8 <HAL_GPIO_Init+0x348>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00d      	beq.n	80035b2 <HAL_GPIO_Init+0x222>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a50      	ldr	r2, [pc, #320]	; (80036dc <HAL_GPIO_Init+0x34c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d007      	beq.n	80035ae <HAL_GPIO_Init+0x21e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4f      	ldr	r2, [pc, #316]	; (80036e0 <HAL_GPIO_Init+0x350>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_GPIO_Init+0x21a>
 80035a6:	2309      	movs	r3, #9
 80035a8:	e012      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035aa:	230a      	movs	r3, #10
 80035ac:	e010      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035ae:	2308      	movs	r3, #8
 80035b0:	e00e      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035b2:	2307      	movs	r3, #7
 80035b4:	e00c      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035b6:	2306      	movs	r3, #6
 80035b8:	e00a      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035ba:	2305      	movs	r3, #5
 80035bc:	e008      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035be:	2304      	movs	r3, #4
 80035c0:	e006      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035c2:	2303      	movs	r3, #3
 80035c4:	e004      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e002      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_GPIO_Init+0x240>
 80035ce:	2300      	movs	r3, #0
 80035d0:	69fa      	ldr	r2, [r7, #28]
 80035d2:	f002 0203 	and.w	r2, r2, #3
 80035d6:	0092      	lsls	r2, r2, #2
 80035d8:	4093      	lsls	r3, r2
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035e0:	4935      	ldr	r1, [pc, #212]	; (80036b8 <HAL_GPIO_Init+0x328>)
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	3302      	adds	r3, #2
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035ee:	4b3d      	ldr	r3, [pc, #244]	; (80036e4 <HAL_GPIO_Init+0x354>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003612:	4a34      	ldr	r2, [pc, #208]	; (80036e4 <HAL_GPIO_Init+0x354>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003618:	4b32      	ldr	r3, [pc, #200]	; (80036e4 <HAL_GPIO_Init+0x354>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800363c:	4a29      	ldr	r2, [pc, #164]	; (80036e4 <HAL_GPIO_Init+0x354>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003642:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <HAL_GPIO_Init+0x354>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003666:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_GPIO_Init+0x354>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800366c:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_GPIO_Init+0x354>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <HAL_GPIO_Init+0x354>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	3301      	adds	r3, #1
 800369a:	61fb      	str	r3, [r7, #28]
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b0f      	cmp	r3, #15
 80036a0:	f67f ae86 	bls.w	80033b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40013800 	.word	0x40013800
 80036bc:	40020000 	.word	0x40020000
 80036c0:	40020400 	.word	0x40020400
 80036c4:	40020800 	.word	0x40020800
 80036c8:	40020c00 	.word	0x40020c00
 80036cc:	40021000 	.word	0x40021000
 80036d0:	40021400 	.word	0x40021400
 80036d4:	40021800 	.word	0x40021800
 80036d8:	40021c00 	.word	0x40021c00
 80036dc:	40022000 	.word	0x40022000
 80036e0:	40022400 	.word	0x40022400
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
 80036f4:	4613      	mov	r3, r2
 80036f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003704:	e003      	b.n	800370e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	041a      	lsls	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	619a      	str	r2, [r3, #24]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f806 	bl	800374c <HAL_GPIO_EXTI_Callback>
  }
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	4603      	mov	r3, r0
 8003754:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003756:	bf00      	nop
 8003758:	370c      	adds	r7, #12
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e07f      	b.n	8003876 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fd f962 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d107      	bne.n	80037de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	e006      	b.n	80037ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d104      	bne.n	80037fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6859      	ldr	r1, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b1d      	ldr	r3, [pc, #116]	; (8003880 <HAL_I2C_Init+0x11c>)
 800380a:	430b      	orrs	r3, r1
 800380c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800381c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	69d9      	ldr	r1, [r3, #28]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	02008000 	.word	0x02008000

08003884 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003894:	b2db      	uxtb	r3, r3
 8003896:	2b20      	cmp	r3, #32
 8003898:	d138      	bne.n	800390c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d101      	bne.n	80038a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038a4:	2302      	movs	r3, #2
 80038a6:	e032      	b.n	800390e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2224      	movs	r2, #36	; 0x24
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0201 	bic.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6819      	ldr	r1, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	683a      	ldr	r2, [r7, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	e000      	b.n	800390e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
  }
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b20      	cmp	r3, #32
 800392e:	d139      	bne.n	80039a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800393a:	2302      	movs	r3, #2
 800393c:	e033      	b.n	80039a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2224      	movs	r2, #36	; 0x24
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800396c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 0201 	orr.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a04      	ldr	r2, [pc, #16]	; (80039d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]
}
 80039c4:	bf00      	nop
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40007000 	.word	0x40007000

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039dc:	2300      	movs	r3, #0
 80039de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e29b      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8087 	beq.w	8003b06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f8:	4b96      	ldr	r3, [pc, #600]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 030c 	and.w	r3, r3, #12
 8003a00:	2b04      	cmp	r3, #4
 8003a02:	d00c      	beq.n	8003a1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a04:	4b93      	ldr	r3, [pc, #588]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 030c 	and.w	r3, r3, #12
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d112      	bne.n	8003a36 <HAL_RCC_OscConfig+0x62>
 8003a10:	4b90      	ldr	r3, [pc, #576]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a1c:	d10b      	bne.n	8003a36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a1e:	4b8d      	ldr	r3, [pc, #564]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d06c      	beq.n	8003b04 <HAL_RCC_OscConfig+0x130>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d168      	bne.n	8003b04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e275      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3e:	d106      	bne.n	8003a4e <HAL_RCC_OscConfig+0x7a>
 8003a40:	4b84      	ldr	r3, [pc, #528]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a83      	ldr	r2, [pc, #524]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	e02e      	b.n	8003aac <HAL_RCC_OscConfig+0xd8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10c      	bne.n	8003a70 <HAL_RCC_OscConfig+0x9c>
 8003a56:	4b7f      	ldr	r3, [pc, #508]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a7e      	ldr	r2, [pc, #504]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b7c      	ldr	r3, [pc, #496]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a7b      	ldr	r2, [pc, #492]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e01d      	b.n	8003aac <HAL_RCC_OscConfig+0xd8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0xc0>
 8003a7a:	4b76      	ldr	r3, [pc, #472]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a75      	ldr	r2, [pc, #468]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	4b73      	ldr	r3, [pc, #460]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a72      	ldr	r2, [pc, #456]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e00b      	b.n	8003aac <HAL_RCC_OscConfig+0xd8>
 8003a94:	4b6f      	ldr	r3, [pc, #444]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a6e      	ldr	r2, [pc, #440]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b6c      	ldr	r3, [pc, #432]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a6b      	ldr	r2, [pc, #428]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d013      	beq.n	8003adc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab4:	f7fe fe9e 	bl	80027f4 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fe fe9a 	bl	80027f4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e229      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b61      	ldr	r3, [pc, #388]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d0f0      	beq.n	8003abc <HAL_RCC_OscConfig+0xe8>
 8003ada:	e014      	b.n	8003b06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fe fe8a 	bl	80027f4 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ae4:	f7fe fe86 	bl	80027f4 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b64      	cmp	r3, #100	; 0x64
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e215      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	4b57      	ldr	r3, [pc, #348]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x110>
 8003b02:	e000      	b.n	8003b06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d069      	beq.n	8003be6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b12:	4b50      	ldr	r3, [pc, #320]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1e:	4b4d      	ldr	r3, [pc, #308]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d11c      	bne.n	8003b64 <HAL_RCC_OscConfig+0x190>
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d116      	bne.n	8003b64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b36:	4b47      	ldr	r3, [pc, #284]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_RCC_OscConfig+0x17a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d001      	beq.n	8003b4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e1e9      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4e:	4b41      	ldr	r3, [pc, #260]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	493d      	ldr	r1, [pc, #244]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b62:	e040      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d023      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b6c:	4b39      	ldr	r3, [pc, #228]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a38      	ldr	r2, [pc, #224]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b78:	f7fe fe3c 	bl	80027f4 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b80:	f7fe fe38 	bl	80027f4 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e1c7      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9e:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	4929      	ldr	r1, [pc, #164]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	600b      	str	r3, [r1, #0]
 8003bb2:	e018      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bb4:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a26      	ldr	r2, [pc, #152]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003bba:	f023 0301 	bic.w	r3, r3, #1
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fe fe18 	bl	80027f4 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fe fe14 	bl	80027f4 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1a3      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d038      	beq.n	8003c64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d019      	beq.n	8003c2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bfe:	4a15      	ldr	r2, [pc, #84]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fe fdf5 	bl	80027f4 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c0e:	f7fe fdf1 	bl	80027f4 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e180      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c20:	4b0c      	ldr	r3, [pc, #48]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0f0      	beq.n	8003c0e <HAL_RCC_OscConfig+0x23a>
 8003c2c:	e01a      	b.n	8003c64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c32:	4a08      	ldr	r2, [pc, #32]	; (8003c54 <HAL_RCC_OscConfig+0x280>)
 8003c34:	f023 0301 	bic.w	r3, r3, #1
 8003c38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c3a:	f7fe fddb 	bl	80027f4 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c40:	e00a      	b.n	8003c58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c42:	f7fe fdd7 	bl	80027f4 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d903      	bls.n	8003c58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e166      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
 8003c54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	4b92      	ldr	r3, [pc, #584]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1ee      	bne.n	8003c42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 80a4 	beq.w	8003dba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c72:	4b8c      	ldr	r3, [pc, #560]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10d      	bne.n	8003c9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7e:	4b89      	ldr	r3, [pc, #548]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	4a88      	ldr	r2, [pc, #544]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c88:	6413      	str	r3, [r2, #64]	; 0x40
 8003c8a:	4b86      	ldr	r3, [pc, #536]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9a:	4b83      	ldr	r3, [pc, #524]	; (8003ea8 <HAL_RCC_OscConfig+0x4d4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d118      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ca6:	4b80      	ldr	r3, [pc, #512]	; (8003ea8 <HAL_RCC_OscConfig+0x4d4>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7f      	ldr	r2, [pc, #508]	; (8003ea8 <HAL_RCC_OscConfig+0x4d4>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cb2:	f7fe fd9f 	bl	80027f4 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cba:	f7fe fd9b 	bl	80027f4 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b64      	cmp	r3, #100	; 0x64
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e12a      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ccc:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCC_OscConfig+0x4d4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d106      	bne.n	8003cee <HAL_RCC_OscConfig+0x31a>
 8003ce0:	4b70      	ldr	r3, [pc, #448]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a6f      	ldr	r2, [pc, #444]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003ce6:	f043 0301 	orr.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	e02d      	b.n	8003d4a <HAL_RCC_OscConfig+0x376>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10c      	bne.n	8003d10 <HAL_RCC_OscConfig+0x33c>
 8003cf6:	4b6b      	ldr	r3, [pc, #428]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	4a6a      	ldr	r2, [pc, #424]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	6713      	str	r3, [r2, #112]	; 0x70
 8003d02:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a67      	ldr	r2, [pc, #412]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d08:	f023 0304 	bic.w	r3, r3, #4
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	e01c      	b.n	8003d4a <HAL_RCC_OscConfig+0x376>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b05      	cmp	r3, #5
 8003d16:	d10c      	bne.n	8003d32 <HAL_RCC_OscConfig+0x35e>
 8003d18:	4b62      	ldr	r3, [pc, #392]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1c:	4a61      	ldr	r2, [pc, #388]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d1e:	f043 0304 	orr.w	r3, r3, #4
 8003d22:	6713      	str	r3, [r2, #112]	; 0x70
 8003d24:	4b5f      	ldr	r3, [pc, #380]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d28:	4a5e      	ldr	r2, [pc, #376]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d2a:	f043 0301 	orr.w	r3, r3, #1
 8003d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d30:	e00b      	b.n	8003d4a <HAL_RCC_OscConfig+0x376>
 8003d32:	4b5c      	ldr	r3, [pc, #368]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d36:	4a5b      	ldr	r2, [pc, #364]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3e:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d42:	4a58      	ldr	r2, [pc, #352]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	f023 0304 	bic.w	r3, r3, #4
 8003d48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d015      	beq.n	8003d7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d52:	f7fe fd4f 	bl	80027f4 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fe fd4b 	bl	80027f4 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e0d8      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d70:	4b4c      	ldr	r3, [pc, #304]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0ee      	beq.n	8003d5a <HAL_RCC_OscConfig+0x386>
 8003d7c:	e014      	b.n	8003da8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7fe fd39 	bl	80027f4 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d84:	e00a      	b.n	8003d9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d86:	f7fe fd35 	bl	80027f4 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e0c2      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d9c:	4b41      	ldr	r3, [pc, #260]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1ee      	bne.n	8003d86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003da8:	7dfb      	ldrb	r3, [r7, #23]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d105      	bne.n	8003dba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dae:	4b3d      	ldr	r3, [pc, #244]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a3c      	ldr	r2, [pc, #240]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003db8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80ae 	beq.w	8003f20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dc4:	4b37      	ldr	r3, [pc, #220]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 030c 	and.w	r3, r3, #12
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d06d      	beq.n	8003eac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d14b      	bne.n	8003e70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd8:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a31      	ldr	r2, [pc, #196]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fd06 	bl	80027f4 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fd02 	bl	80027f4 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e091      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b29      	ldr	r3, [pc, #164]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	69da      	ldr	r2, [r3, #28]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	019b      	lsls	r3, r3, #6
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	085b      	lsrs	r3, r3, #1
 8003e22:	3b01      	subs	r3, #1
 8003e24:	041b      	lsls	r3, r3, #16
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2c:	061b      	lsls	r3, r3, #24
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	071b      	lsls	r3, r3, #28
 8003e36:	491b      	ldr	r1, [pc, #108]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe fcd4 	bl	80027f4 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fe fcd0 	bl	80027f4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e05f      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x47c>
 8003e6e:	e057      	b.n	8003f20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e70:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a0b      	ldr	r2, [pc, #44]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe fcba 	bl	80027f4 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fe fcb6 	bl	80027f4 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e045      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <HAL_RCC_OscConfig+0x4d0>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x4b0>
 8003ea2:	e03d      	b.n	8003f20 <HAL_RCC_OscConfig+0x54c>
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003eac:	4b1f      	ldr	r3, [pc, #124]	; (8003f2c <HAL_RCC_OscConfig+0x558>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d030      	beq.n	8003f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d129      	bne.n	8003f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d122      	bne.n	8003f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003edc:	4013      	ands	r3, r2
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ee2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d119      	bne.n	8003f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef2:	085b      	lsrs	r3, r3, #1
 8003ef4:	3b01      	subs	r3, #1
 8003ef6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d10f      	bne.n	8003f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d107      	bne.n	8003f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3718      	adds	r7, #24
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800

08003f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0d0      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d910      	bls.n	8003f78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f023 020f 	bic.w	r2, r3, #15
 8003f5e:	4965      	ldr	r1, [pc, #404]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f66:	4b63      	ldr	r3, [pc, #396]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 030f 	and.w	r3, r3, #15
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e0b8      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0302 	and.w	r3, r3, #2
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d020      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f90:	4b59      	ldr	r3, [pc, #356]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fa8:	4b53      	ldr	r3, [pc, #332]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a52      	ldr	r2, [pc, #328]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	494d      	ldr	r1, [pc, #308]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d040      	beq.n	8004054 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fda:	4b47      	ldr	r3, [pc, #284]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d115      	bne.n	8004012 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e07f      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff2:	4b41      	ldr	r3, [pc, #260]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e073      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e06b      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004012:	4b39      	ldr	r3, [pc, #228]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4936      	ldr	r1, [pc, #216]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004020:	4313      	orrs	r3, r2
 8004022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004024:	f7fe fbe6 	bl	80027f4 <HAL_GetTick>
 8004028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800402a:	e00a      	b.n	8004042 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800402c:	f7fe fbe2 	bl	80027f4 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	f241 3288 	movw	r2, #5000	; 0x1388
 800403a:	4293      	cmp	r3, r2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e053      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	4b2d      	ldr	r3, [pc, #180]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 020c 	and.w	r2, r3, #12
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	429a      	cmp	r2, r3
 8004052:	d1eb      	bne.n	800402c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004054:	4b27      	ldr	r3, [pc, #156]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d210      	bcs.n	8004084 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f023 020f 	bic.w	r2, r3, #15
 800406a:	4922      	ldr	r1, [pc, #136]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	4313      	orrs	r3, r2
 8004070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004072:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 030f 	and.w	r3, r3, #15
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	429a      	cmp	r2, r3
 800407e:	d001      	beq.n	8004084 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e032      	b.n	80040ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d008      	beq.n	80040a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004090:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	4916      	ldr	r1, [pc, #88]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d009      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040ae:	4b12      	ldr	r3, [pc, #72]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	490e      	ldr	r1, [pc, #56]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040c2:	f000 f821 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 80040c6:	4602      	mov	r2, r0
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	490a      	ldr	r1, [pc, #40]	; (80040fc <HAL_RCC_ClockConfig+0x1cc>)
 80040d4:	5ccb      	ldrb	r3, [r1, r3]
 80040d6:	fa22 f303 	lsr.w	r3, r2, r3
 80040da:	4a09      	ldr	r2, [pc, #36]	; (8004100 <HAL_RCC_ClockConfig+0x1d0>)
 80040dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040de:	4b09      	ldr	r3, [pc, #36]	; (8004104 <HAL_RCC_ClockConfig+0x1d4>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fe fb42 	bl	800276c <HAL_InitTick>

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023c00 	.word	0x40023c00
 80040f8:	40023800 	.word	0x40023800
 80040fc:	0809fbfc 	.word	0x0809fbfc
 8004100:	2000000c 	.word	0x2000000c
 8004104:	20000014 	.word	0x20000014

08004108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800410c:	b094      	sub	sp, #80	; 0x50
 800410e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	647b      	str	r3, [r7, #68]	; 0x44
 8004114:	2300      	movs	r3, #0
 8004116:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004118:	2300      	movs	r3, #0
 800411a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004120:	4b79      	ldr	r3, [pc, #484]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	d00d      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x40>
 800412c:	2b08      	cmp	r3, #8
 800412e:	f200 80e1 	bhi.w	80042f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_RCC_GetSysClockFreq+0x34>
 8004136:	2b04      	cmp	r3, #4
 8004138:	d003      	beq.n	8004142 <HAL_RCC_GetSysClockFreq+0x3a>
 800413a:	e0db      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b73      	ldr	r3, [pc, #460]	; (800430c <HAL_RCC_GetSysClockFreq+0x204>)
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004140:	e0db      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004142:	4b73      	ldr	r3, [pc, #460]	; (8004310 <HAL_RCC_GetSysClockFreq+0x208>)
 8004144:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004146:	e0d8      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004148:	4b6f      	ldr	r3, [pc, #444]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004152:	4b6d      	ldr	r3, [pc, #436]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d063      	beq.n	8004226 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800415e:	4b6a      	ldr	r3, [pc, #424]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	099b      	lsrs	r3, r3, #6
 8004164:	2200      	movs	r2, #0
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
 8004168:	63fa      	str	r2, [r7, #60]	; 0x3c
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
 8004172:	2300      	movs	r3, #0
 8004174:	637b      	str	r3, [r7, #52]	; 0x34
 8004176:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800417a:	4622      	mov	r2, r4
 800417c:	462b      	mov	r3, r5
 800417e:	f04f 0000 	mov.w	r0, #0
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	0159      	lsls	r1, r3, #5
 8004188:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800418c:	0150      	lsls	r0, r2, #5
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4621      	mov	r1, r4
 8004194:	1a51      	subs	r1, r2, r1
 8004196:	6139      	str	r1, [r7, #16]
 8004198:	4629      	mov	r1, r5
 800419a:	eb63 0301 	sbc.w	r3, r3, r1
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041ac:	4659      	mov	r1, fp
 80041ae:	018b      	lsls	r3, r1, #6
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041b6:	4651      	mov	r1, sl
 80041b8:	018a      	lsls	r2, r1, #6
 80041ba:	4651      	mov	r1, sl
 80041bc:	ebb2 0801 	subs.w	r8, r2, r1
 80041c0:	4659      	mov	r1, fp
 80041c2:	eb63 0901 	sbc.w	r9, r3, r1
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041da:	4690      	mov	r8, r2
 80041dc:	4699      	mov	r9, r3
 80041de:	4623      	mov	r3, r4
 80041e0:	eb18 0303 	adds.w	r3, r8, r3
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	462b      	mov	r3, r5
 80041e8:	eb49 0303 	adc.w	r3, r9, r3
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041fa:	4629      	mov	r1, r5
 80041fc:	024b      	lsls	r3, r1, #9
 80041fe:	4621      	mov	r1, r4
 8004200:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004204:	4621      	mov	r1, r4
 8004206:	024a      	lsls	r2, r1, #9
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800420e:	2200      	movs	r2, #0
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
 8004212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004214:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004218:	f7fc f86a 	bl	80002f0 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4613      	mov	r3, r2
 8004222:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004224:	e058      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004226:	4b38      	ldr	r3, [pc, #224]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	099b      	lsrs	r3, r3, #6
 800422c:	2200      	movs	r2, #0
 800422e:	4618      	mov	r0, r3
 8004230:	4611      	mov	r1, r2
 8004232:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
 800423c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	f04f 0000 	mov.w	r0, #0
 8004248:	f04f 0100 	mov.w	r1, #0
 800424c:	0159      	lsls	r1, r3, #5
 800424e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004252:	0150      	lsls	r0, r2, #5
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4641      	mov	r1, r8
 800425a:	ebb2 0a01 	subs.w	sl, r2, r1
 800425e:	4649      	mov	r1, r9
 8004260:	eb63 0b01 	sbc.w	fp, r3, r1
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004270:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004274:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004278:	ebb2 040a 	subs.w	r4, r2, sl
 800427c:	eb63 050b 	sbc.w	r5, r3, fp
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	00eb      	lsls	r3, r5, #3
 800428a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800428e:	00e2      	lsls	r2, r4, #3
 8004290:	4614      	mov	r4, r2
 8004292:	461d      	mov	r5, r3
 8004294:	4643      	mov	r3, r8
 8004296:	18e3      	adds	r3, r4, r3
 8004298:	603b      	str	r3, [r7, #0]
 800429a:	464b      	mov	r3, r9
 800429c:	eb45 0303 	adc.w	r3, r5, r3
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ae:	4629      	mov	r1, r5
 80042b0:	028b      	lsls	r3, r1, #10
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042b8:	4621      	mov	r1, r4
 80042ba:	028a      	lsls	r2, r1, #10
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042c2:	2200      	movs	r2, #0
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	61fa      	str	r2, [r7, #28]
 80042c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042cc:	f7fc f810 	bl	80002f0 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4613      	mov	r3, r2
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_GetSysClockFreq+0x200>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	3301      	adds	r3, #1
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80042e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f2:	e002      	b.n	80042fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <HAL_RCC_GetSysClockFreq+0x204>)
 80042f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3750      	adds	r7, #80	; 0x50
 8004300:	46bd      	mov	sp, r7
 8004302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	00f42400 	.word	0x00f42400
 8004310:	007a1200 	.word	0x007a1200

08004314 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004318:	4b03      	ldr	r3, [pc, #12]	; (8004328 <HAL_RCC_GetHCLKFreq+0x14>)
 800431a:	681b      	ldr	r3, [r3, #0]
}
 800431c:	4618      	mov	r0, r3
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	2000000c 	.word	0x2000000c

0800432c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004330:	f7ff fff0 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 8004334:	4602      	mov	r2, r0
 8004336:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	0a9b      	lsrs	r3, r3, #10
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	4903      	ldr	r1, [pc, #12]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004342:	5ccb      	ldrb	r3, [r1, r3]
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40023800 	.word	0x40023800
 8004350:	0809fc0c 	.word	0x0809fc0c

08004354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004358:	f7ff ffdc 	bl	8004314 <HAL_RCC_GetHCLKFreq>
 800435c:	4602      	mov	r2, r0
 800435e:	4b05      	ldr	r3, [pc, #20]	; (8004374 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	0b5b      	lsrs	r3, r3, #13
 8004364:	f003 0307 	and.w	r3, r3, #7
 8004368:	4903      	ldr	r1, [pc, #12]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800436a:	5ccb      	ldrb	r3, [r1, r3]
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004370:	4618      	mov	r0, r3
 8004372:	bd80      	pop	{r7, pc}
 8004374:	40023800 	.word	0x40023800
 8004378:	0809fc0c 	.word	0x0809fc0c

0800437c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d012      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043a4:	4b69      	ldr	r3, [pc, #420]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	4a68      	ldr	r2, [pc, #416]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043ae:	6093      	str	r3, [r2, #8]
 80043b0:	4b66      	ldr	r3, [pc, #408]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	4964      	ldr	r1, [pc, #400]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043c6:	2301      	movs	r3, #1
 80043c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d017      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043d6:	4b5d      	ldr	r3, [pc, #372]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e4:	4959      	ldr	r1, [pc, #356]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f4:	d101      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043f6:	2301      	movs	r3, #1
 80043f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d101      	bne.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004402:	2301      	movs	r3, #1
 8004404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d017      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004412:	4b4e      	ldr	r3, [pc, #312]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004418:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	494a      	ldr	r1, [pc, #296]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004430:	d101      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800443e:	2301      	movs	r3, #1
 8004440:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800444e:	2301      	movs	r3, #1
 8004450:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0320 	and.w	r3, r3, #32
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 808b 	beq.w	8004576 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	4a39      	ldr	r2, [pc, #228]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446a:	6413      	str	r3, [r2, #64]	; 0x40
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004478:	4b35      	ldr	r3, [pc, #212]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800447e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004482:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004484:	f7fe f9b6 	bl	80027f4 <HAL_GetTick>
 8004488:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800448a:	e008      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448c:	f7fe f9b2 	bl	80027f4 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b64      	cmp	r3, #100	; 0x64
 8004498:	d901      	bls.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e38f      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800449e:	4b2c      	ldr	r3, [pc, #176]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044aa:	4b28      	ldr	r3, [pc, #160]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d035      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c2:	693a      	ldr	r2, [r7, #16]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d02e      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d2:	4b1e      	ldr	r3, [pc, #120]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4a1d      	ldr	r2, [pc, #116]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044de:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044f0:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d114      	bne.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe f97a 	bl	80027f4 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004502:	e00a      	b.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004504:	f7fe f976 	bl	80027f4 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e351      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451a:	4b0c      	ldr	r3, [pc, #48]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0ee      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004532:	d111      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004540:	4b04      	ldr	r3, [pc, #16]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004542:	400b      	ands	r3, r1
 8004544:	4901      	ldr	r1, [pc, #4]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
 800454a:	e00b      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800454c:	40023800 	.word	0x40023800
 8004550:	40007000 	.word	0x40007000
 8004554:	0ffffcff 	.word	0x0ffffcff
 8004558:	4bac      	ldr	r3, [pc, #688]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4aab      	ldr	r2, [pc, #684]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800455e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004562:	6093      	str	r3, [r2, #8]
 8004564:	4ba9      	ldr	r3, [pc, #676]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004566:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004570:	49a6      	ldr	r1, [pc, #664]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004572:	4313      	orrs	r3, r2
 8004574:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0310 	and.w	r3, r3, #16
 800457e:	2b00      	cmp	r3, #0
 8004580:	d010      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004582:	4ba2      	ldr	r3, [pc, #648]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004588:	4aa0      	ldr	r2, [pc, #640]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800458a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800458e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004592:	4b9e      	ldr	r3, [pc, #632]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004594:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	499b      	ldr	r1, [pc, #620]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00a      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b0:	4b96      	ldr	r3, [pc, #600]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045be:	4993      	ldr	r1, [pc, #588]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d2:	4b8e      	ldr	r3, [pc, #568]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e0:	498a      	ldr	r1, [pc, #552]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00a      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f4:	4b85      	ldr	r3, [pc, #532]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004602:	4982      	ldr	r1, [pc, #520]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004616:	4b7d      	ldr	r3, [pc, #500]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4979      	ldr	r1, [pc, #484]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004626:	4313      	orrs	r3, r2
 8004628:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004638:	4b74      	ldr	r3, [pc, #464]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800463a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463e:	f023 0203 	bic.w	r2, r3, #3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004646:	4971      	ldr	r1, [pc, #452]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004648:	4313      	orrs	r3, r2
 800464a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465a:	4b6c      	ldr	r3, [pc, #432]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800465c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004660:	f023 020c 	bic.w	r2, r3, #12
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004668:	4968      	ldr	r1, [pc, #416]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800466a:	4313      	orrs	r3, r2
 800466c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800467c:	4b63      	ldr	r3, [pc, #396]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004682:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468a:	4960      	ldr	r1, [pc, #384]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00a      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800469e:	4b5b      	ldr	r3, [pc, #364]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046ac:	4957      	ldr	r1, [pc, #348]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046c0:	4b52      	ldr	r3, [pc, #328]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	494f      	ldr	r1, [pc, #316]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00a      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046e2:	4b4a      	ldr	r3, [pc, #296]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f0:	4946      	ldr	r1, [pc, #280]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00a      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004704:	4b41      	ldr	r3, [pc, #260]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004712:	493e      	ldr	r1, [pc, #248]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004714:	4313      	orrs	r3, r2
 8004716:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00a      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004726:	4b39      	ldr	r3, [pc, #228]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004734:	4935      	ldr	r1, [pc, #212]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004748:	4b30      	ldr	r3, [pc, #192]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004756:	492d      	ldr	r1, [pc, #180]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d011      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800476a:	4b28      	ldr	r3, [pc, #160]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004770:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004778:	4924      	ldr	r1, [pc, #144]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004784:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004788:	d101      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800478a:	2301      	movs	r3, #1
 800478c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800479a:	2301      	movs	r3, #1
 800479c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047aa:	4b18      	ldr	r3, [pc, #96]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b8:	4914      	ldr	r1, [pc, #80]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00b      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047cc:	4b0f      	ldr	r3, [pc, #60]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047dc:	490b      	ldr	r1, [pc, #44]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00f      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047f0:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004800:	4902      	ldr	r1, [pc, #8]	; (800480c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004802:	4313      	orrs	r3, r2
 8004804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004808:	e002      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800480a:	bf00      	nop
 800480c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00b      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800481c:	4b8a      	ldr	r3, [pc, #552]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800481e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004822:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	4986      	ldr	r1, [pc, #536]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00b      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004840:	4b81      	ldr	r3, [pc, #516]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004842:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004846:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004850:	497d      	ldr	r1, [pc, #500]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	2b01      	cmp	r3, #1
 800485c:	d006      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80d6 	beq.w	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800486c:	4b76      	ldr	r3, [pc, #472]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a75      	ldr	r2, [pc, #468]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004872:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004878:	f7fd ffbc 	bl	80027f4 <HAL_GetTick>
 800487c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800487e:	e008      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004880:	f7fd ffb8 	bl	80027f4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b64      	cmp	r3, #100	; 0x64
 800488c:	d901      	bls.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e195      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004892:	4b6d      	ldr	r3, [pc, #436]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d021      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d11d      	bne.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048b2:	4b65      	ldr	r3, [pc, #404]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048b8:	0c1b      	lsrs	r3, r3, #16
 80048ba:	f003 0303 	and.w	r3, r3, #3
 80048be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048c0:	4b61      	ldr	r3, [pc, #388]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048c6:	0e1b      	lsrs	r3, r3, #24
 80048c8:	f003 030f 	and.w	r3, r3, #15
 80048cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	019a      	lsls	r2, r3, #6
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	431a      	orrs	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	061b      	lsls	r3, r3, #24
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	071b      	lsls	r3, r3, #28
 80048e6:	4958      	ldr	r1, [pc, #352]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d004      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800490c:	2b00      	cmp	r3, #0
 800490e:	d02e      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004918:	d129      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800491a:	4b4b      	ldr	r3, [pc, #300]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800491c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004928:	4b47      	ldr	r3, [pc, #284]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492e:	0f1b      	lsrs	r3, r3, #28
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	019a      	lsls	r2, r3, #6
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	041b      	lsls	r3, r3, #16
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	061b      	lsls	r3, r3, #24
 8004948:	431a      	orrs	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	071b      	lsls	r3, r3, #28
 800494e:	493e      	ldr	r1, [pc, #248]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004956:	4b3c      	ldr	r3, [pc, #240]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800495c:	f023 021f 	bic.w	r2, r3, #31
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	3b01      	subs	r3, #1
 8004966:	4938      	ldr	r1, [pc, #224]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01d      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800497a:	4b33      	ldr	r3, [pc, #204]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800497c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004980:	0e1b      	lsrs	r3, r3, #24
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004988:	4b2f      	ldr	r3, [pc, #188]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498e:	0f1b      	lsrs	r3, r3, #28
 8004990:	f003 0307 	and.w	r3, r3, #7
 8004994:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	019a      	lsls	r2, r3, #6
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	041b      	lsls	r3, r3, #16
 80049a2:	431a      	orrs	r2, r3
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	061b      	lsls	r3, r3, #24
 80049a8:	431a      	orrs	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	071b      	lsls	r3, r3, #28
 80049ae:	4926      	ldr	r1, [pc, #152]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d011      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	019a      	lsls	r2, r3, #6
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	061b      	lsls	r3, r3, #24
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	071b      	lsls	r3, r3, #28
 80049de:	491a      	ldr	r1, [pc, #104]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049e6:	4b18      	ldr	r3, [pc, #96]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f2:	f7fd feff 	bl	80027f4 <HAL_GetTick>
 80049f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f8:	e008      	b.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049fa:	f7fd fefb 	bl	80027f4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b64      	cmp	r3, #100	; 0x64
 8004a06:	d901      	bls.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e0d8      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a0c:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	f040 80ce 	bne.w	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a20:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a08      	ldr	r2, [pc, #32]	; (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2c:	f7fd fee2 	bl	80027f4 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a32:	e00b      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a34:	f7fd fede 	bl	80027f4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b64      	cmp	r3, #100	; 0x64
 8004a40:	d904      	bls.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e0bb      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a4c:	4b5e      	ldr	r3, [pc, #376]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a58:	d0ec      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d02e      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d12a      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a82:	4b51      	ldr	r3, [pc, #324]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a90:	4b4d      	ldr	r3, [pc, #308]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	0f1b      	lsrs	r3, r3, #28
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	019a      	lsls	r2, r3, #6
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	699b      	ldr	r3, [r3, #24]
 8004aae:	061b      	lsls	r3, r3, #24
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	071b      	lsls	r3, r3, #28
 8004ab6:	4944      	ldr	r1, [pc, #272]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004abe:	4b42      	ldr	r3, [pc, #264]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004acc:	3b01      	subs	r3, #1
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	493d      	ldr	r1, [pc, #244]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d022      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aec:	d11d      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004aee:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af4:	0e1b      	lsrs	r3, r3, #24
 8004af6:	f003 030f 	and.w	r3, r3, #15
 8004afa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004afc:	4b32      	ldr	r3, [pc, #200]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	0f1b      	lsrs	r3, r3, #28
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	019a      	lsls	r2, r3, #6
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	061b      	lsls	r3, r3, #24
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	071b      	lsls	r3, r3, #28
 8004b22:	4929      	ldr	r1, [pc, #164]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0308 	and.w	r3, r3, #8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d028      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b36:	4b24      	ldr	r3, [pc, #144]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	0e1b      	lsrs	r3, r3, #24
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b44:	4b20      	ldr	r3, [pc, #128]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	0c1b      	lsrs	r3, r3, #16
 8004b4c:	f003 0303 	and.w	r3, r3, #3
 8004b50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	019a      	lsls	r2, r3, #6
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	061b      	lsls	r3, r3, #24
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
 8004b68:	071b      	lsls	r3, r3, #28
 8004b6a:	4917      	ldr	r1, [pc, #92]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b80:	4911      	ldr	r1, [pc, #68]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0e      	ldr	r2, [pc, #56]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b94:	f7fd fe2e 	bl	80027f4 <HAL_GetTick>
 8004b98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b9c:	f7fd fe2a 	bl	80027f4 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b64      	cmp	r3, #100	; 0x64
 8004ba8:	d901      	bls.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e007      	b.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bae:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bba:	d1ef      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800

08004bcc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e01c      	b.n	8004c18 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	795b      	ldrb	r3, [r3, #5]
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fc fa38 	bl	8001064 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0204 	orr.w	r2, r2, #4
 8004c08:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e09d      	b.n	8004d6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d108      	bne.n	8004c4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c42:	d009      	beq.n	8004c58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	61da      	str	r2, [r3, #28]
 8004c4a:	e005      	b.n	8004c58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f7fc fa68 	bl	8001148 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c98:	d902      	bls.n	8004ca0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e002      	b.n	8004ca6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ca4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004cae:	d007      	beq.n	8004cc0 <HAL_SPI_Init+0xa0>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cb8:	d002      	beq.n	8004cc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	695b      	ldr	r3, [r3, #20]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cee:	431a      	orrs	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	ea42 0103 	orr.w	r1, r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	f003 0204 	and.w	r2, r3, #4
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	f003 0310 	and.w	r3, r3, #16
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d3c:	ea42 0103 	orr.w	r1, r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b088      	sub	sp, #32
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	603b      	str	r3, [r7, #0]
 8004d82:	4613      	mov	r3, r2
 8004d84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <HAL_SPI_Transmit+0x22>
 8004d94:	2302      	movs	r3, #2
 8004d96:	e158      	b.n	800504a <HAL_SPI_Transmit+0x2d4>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004da0:	f7fd fd28 	bl	80027f4 <HAL_GetTick>
 8004da4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d002      	beq.n	8004dbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
 8004db8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dba:	e13d      	b.n	8005038 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_SPI_Transmit+0x52>
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dcc:	e134      	b.n	8005038 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2203      	movs	r2, #3
 8004dd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e18:	d10f      	bne.n	8004e3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d007      	beq.n	8004e58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e60:	d94b      	bls.n	8004efa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d002      	beq.n	8004e70 <HAL_SPI_Transmit+0xfa>
 8004e6a:	8afb      	ldrh	r3, [r7, #22]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d13e      	bne.n	8004eee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	881a      	ldrh	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e80:	1c9a      	adds	r2, r3, #2
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e94:	e02b      	b.n	8004eee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d112      	bne.n	8004eca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea8:	881a      	ldrh	r2, [r3, #0]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	1c9a      	adds	r2, r3, #2
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ec8:	e011      	b.n	8004eee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eca:	f7fd fc93 	bl	80027f4 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d803      	bhi.n	8004ee2 <HAL_SPI_Transmit+0x16c>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d102      	bne.n	8004ee8 <HAL_SPI_Transmit+0x172>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d102      	bne.n	8004eee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eec:	e0a4      	b.n	8005038 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1ce      	bne.n	8004e96 <HAL_SPI_Transmit+0x120>
 8004ef8:	e07c      	b.n	8004ff4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_SPI_Transmit+0x192>
 8004f02:	8afb      	ldrh	r3, [r7, #22]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d170      	bne.n	8004fea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d912      	bls.n	8004f38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f16:	881a      	ldrh	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	1c9a      	adds	r2, r3, #2
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b02      	subs	r3, #2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f36:	e058      	b.n	8004fea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	330c      	adds	r3, #12
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f5e:	e044      	b.n	8004fea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f003 0302 	and.w	r3, r3, #2
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d12b      	bne.n	8004fc6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d912      	bls.n	8004f9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	881a      	ldrh	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	1c9a      	adds	r2, r3, #2
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	3b02      	subs	r3, #2
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f9c:	e025      	b.n	8004fea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	7812      	ldrb	r2, [r2, #0]
 8004faa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	1c5a      	adds	r2, r3, #1
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fc4:	e011      	b.n	8004fea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fc6:	f7fd fc15 	bl	80027f4 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d803      	bhi.n	8004fde <HAL_SPI_Transmit+0x268>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d102      	bne.n	8004fe4 <HAL_SPI_Transmit+0x26e>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fe8:	e026      	b.n	8005038 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1b5      	bne.n	8004f60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	6839      	ldr	r1, [r7, #0]
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f949 	bl	8005290 <SPI_EndRxTxTransaction>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005012:	2300      	movs	r3, #0
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	613b      	str	r3, [r7, #16]
 8005026:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e000      	b.n	8005038 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005036:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005048:	7ffb      	ldrb	r3, [r7, #31]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
	...

08005054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005064:	f7fd fbc6 	bl	80027f4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	4413      	add	r3, r2
 8005072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005074:	f7fd fbbe 	bl	80027f4 <HAL_GetTick>
 8005078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800507a:	4b39      	ldr	r3, [pc, #228]	; (8005160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	015b      	lsls	r3, r3, #5
 8005080:	0d1b      	lsrs	r3, r3, #20
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	fb02 f303 	mul.w	r3, r2, r3
 8005088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800508a:	e054      	b.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005092:	d050      	beq.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005094:	f7fd fbae 	bl	80027f4 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d902      	bls.n	80050aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d13d      	bne.n	8005126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050c2:	d111      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050cc:	d004      	beq.n	80050d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d6:	d107      	bne.n	80050e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f0:	d10f      	bne.n	8005112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e017      	b.n	8005156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	3b01      	subs	r3, #1
 8005134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	429a      	cmp	r2, r3
 8005144:	bf0c      	ite	eq
 8005146:	2301      	moveq	r3, #1
 8005148:	2300      	movne	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	461a      	mov	r2, r3
 800514e:	79fb      	ldrb	r3, [r7, #7]
 8005150:	429a      	cmp	r2, r3
 8005152:	d19b      	bne.n	800508c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3720      	adds	r7, #32
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	2000000c 	.word	0x2000000c

08005164 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	; 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005172:	2300      	movs	r3, #0
 8005174:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005176:	f7fd fb3d 	bl	80027f4 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	1a9b      	subs	r3, r3, r2
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	4413      	add	r3, r2
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005186:	f7fd fb35 	bl	80027f4 <HAL_GetTick>
 800518a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	330c      	adds	r3, #12
 8005192:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005194:	4b3d      	ldr	r3, [pc, #244]	; (800528c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	4613      	mov	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	00da      	lsls	r2, r3, #3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	0d1b      	lsrs	r3, r3, #20
 80051a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a6:	fb02 f303 	mul.w	r3, r2, r3
 80051aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80051ac:	e060      	b.n	8005270 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80051b4:	d107      	bne.n	80051c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d050      	beq.n	8005270 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051ce:	f7fd fb11 	bl	80027f4 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	6a3b      	ldr	r3, [r7, #32]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	429a      	cmp	r2, r3
 80051dc:	d902      	bls.n	80051e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d13d      	bne.n	8005260 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fc:	d111      	bne.n	8005222 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005206:	d004      	beq.n	8005212 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005210:	d107      	bne.n	8005222 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005220:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800522a:	d10f      	bne.n	800524c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800524a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e010      	b.n	8005282 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	3b01      	subs	r3, #1
 800526e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689a      	ldr	r2, [r3, #8]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4013      	ands	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d196      	bne.n	80051ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3728      	adds	r7, #40	; 0x28
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	2000000c 	.word	0x2000000c

08005290 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af02      	add	r7, sp, #8
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	9300      	str	r3, [sp, #0]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f7ff ff5b 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b8:	f043 0220 	orr.w	r2, r3, #32
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e046      	b.n	8005352 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052c4:	4b25      	ldr	r3, [pc, #148]	; (800535c <SPI_EndRxTxTransaction+0xcc>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <SPI_EndRxTxTransaction+0xd0>)
 80052ca:	fba2 2303 	umull	r2, r3, r2, r3
 80052ce:	0d5b      	lsrs	r3, r3, #21
 80052d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052d4:	fb02 f303 	mul.w	r3, r2, r3
 80052d8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e2:	d112      	bne.n	800530a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2200      	movs	r2, #0
 80052ec:	2180      	movs	r1, #128	; 0x80
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f7ff feb0 	bl	8005054 <SPI_WaitFlagStateUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fe:	f043 0220 	orr.w	r2, r3, #32
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e023      	b.n	8005352 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d00a      	beq.n	8005326 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	3b01      	subs	r3, #1
 8005314:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005320:	2b80      	cmp	r3, #128	; 0x80
 8005322:	d0f2      	beq.n	800530a <SPI_EndRxTxTransaction+0x7a>
 8005324:	e000      	b.n	8005328 <SPI_EndRxTxTransaction+0x98>
        break;
 8005326:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f7ff ff15 	bl	8005164 <SPI_WaitFifoStateUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e000      	b.n	8005352 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3718      	adds	r7, #24
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	2000000c 	.word	0x2000000c
 8005360:	165e9f81 	.word	0x165e9f81

08005364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e049      	b.n	800540a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7fc f998 	bl	80016c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	3304      	adds	r3, #4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4610      	mov	r0, r2
 80053a4:	f000 faf8 	bl	8005998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3708      	adds	r7, #8
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b01      	cmp	r3, #1
 8005426:	d001      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e054      	b.n	80054d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a26      	ldr	r2, [pc, #152]	; (80054e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d022      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d01d      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a22      	ldr	r2, [pc, #136]	; (80054e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d018      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a21      	ldr	r2, [pc, #132]	; (80054ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1f      	ldr	r2, [pc, #124]	; (80054f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00e      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_TIM_Base_Start_IT+0x80>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <HAL_TIM_Base_Start_IT+0xe8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d115      	bne.n	80054c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689a      	ldr	r2, [r3, #8]
 800549a:	4b19      	ldr	r3, [pc, #100]	; (8005500 <HAL_TIM_Base_Start_IT+0xec>)
 800549c:	4013      	ands	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b06      	cmp	r3, #6
 80054a4:	d015      	beq.n	80054d2 <HAL_TIM_Base_Start_IT+0xbe>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ac:	d011      	beq.n	80054d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f042 0201 	orr.w	r2, r2, #1
 80054bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054be:	e008      	b.n	80054d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f042 0201 	orr.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e000      	b.n	80054d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40010000 	.word	0x40010000
 80054e8:	40000400 	.word	0x40000400
 80054ec:	40000800 	.word	0x40000800
 80054f0:	40000c00 	.word	0x40000c00
 80054f4:	40010400 	.word	0x40010400
 80054f8:	40014000 	.word	0x40014000
 80054fc:	40001800 	.word	0x40001800
 8005500:	00010007 	.word	0x00010007

08005504 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0201 	bic.w	r2, r2, #1
 800551a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	f241 1311 	movw	r3, #4369	; 0x1111
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10f      	bne.n	800554c <HAL_TIM_Base_Stop_IT+0x48>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	f240 4344 	movw	r3, #1092	; 0x444
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d107      	bne.n	800554c <HAL_TIM_Base_Stop_IT+0x48>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005562:	b580      	push	{r7, lr}
 8005564:	b082      	sub	sp, #8
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b02      	cmp	r3, #2
 8005576:	d122      	bne.n	80055be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b02      	cmp	r3, #2
 8005584:	d11b      	bne.n	80055be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f06f 0202 	mvn.w	r2, #2
 800558e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d003      	beq.n	80055ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9d9 	bl	800595c <HAL_TIM_IC_CaptureCallback>
 80055aa:	e005      	b.n	80055b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f9cb 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9dc 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d122      	bne.n	8005612 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b04      	cmp	r3, #4
 80055d8:	d11b      	bne.n	8005612 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f06f 0204 	mvn.w	r2, #4
 80055e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f9af 	bl	800595c <HAL_TIM_IC_CaptureCallback>
 80055fe:	e005      	b.n	800560c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f9a1 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f9b2 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b08      	cmp	r3, #8
 800561e:	d122      	bne.n	8005666 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f003 0308 	and.w	r3, r3, #8
 800562a:	2b08      	cmp	r3, #8
 800562c:	d11b      	bne.n	8005666 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f06f 0208 	mvn.w	r2, #8
 8005636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2204      	movs	r2, #4
 800563c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f003 0303 	and.w	r3, r3, #3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f985 	bl	800595c <HAL_TIM_IC_CaptureCallback>
 8005652:	e005      	b.n	8005660 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f977 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f988 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b10      	cmp	r3, #16
 8005672:	d122      	bne.n	80056ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f003 0310 	and.w	r3, r3, #16
 800567e:	2b10      	cmp	r3, #16
 8005680:	d11b      	bne.n	80056ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f06f 0210 	mvn.w	r2, #16
 800568a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2208      	movs	r2, #8
 8005690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f95b 	bl	800595c <HAL_TIM_IC_CaptureCallback>
 80056a6:	e005      	b.n	80056b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f94d 	bl	8005948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f95e 	bl	8005970 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10e      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d107      	bne.n	80056e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f06f 0201 	mvn.w	r2, #1
 80056de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 f927 	bl	8005934 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f0:	2b80      	cmp	r3, #128	; 0x80
 80056f2:	d10e      	bne.n	8005712 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056fe:	2b80      	cmp	r3, #128	; 0x80
 8005700:	d107      	bne.n	8005712 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800570a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fb15 	bl	8005d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005720:	d10e      	bne.n	8005740 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d107      	bne.n	8005740 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fb08 	bl	8005d50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d10e      	bne.n	800576c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d107      	bne.n	800576c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 f90c 	bl	8005984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b20      	cmp	r3, #32
 8005778:	d10e      	bne.n	8005798 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b20      	cmp	r3, #32
 8005786:	d107      	bne.n	8005798 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0220 	mvn.w	r2, #32
 8005790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fac8 	bl	8005d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057aa:	2300      	movs	r3, #0
 80057ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_TIM_ConfigClockSource+0x1c>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e0b4      	b.n	8005926 <HAL_TIM_ConfigClockSource+0x186>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	4b56      	ldr	r3, [pc, #344]	; (8005930 <HAL_TIM_ConfigClockSource+0x190>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d03e      	beq.n	8005874 <HAL_TIM_ConfigClockSource+0xd4>
 80057f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fa:	f200 8087 	bhi.w	800590c <HAL_TIM_ConfigClockSource+0x16c>
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	f000 8086 	beq.w	8005912 <HAL_TIM_ConfigClockSource+0x172>
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580a:	d87f      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 800580c:	2b70      	cmp	r3, #112	; 0x70
 800580e:	d01a      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0xa6>
 8005810:	2b70      	cmp	r3, #112	; 0x70
 8005812:	d87b      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b60      	cmp	r3, #96	; 0x60
 8005816:	d050      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x11a>
 8005818:	2b60      	cmp	r3, #96	; 0x60
 800581a:	d877      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	2b50      	cmp	r3, #80	; 0x50
 800581e:	d03c      	beq.n	800589a <HAL_TIM_ConfigClockSource+0xfa>
 8005820:	2b50      	cmp	r3, #80	; 0x50
 8005822:	d873      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d058      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x13a>
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d86f      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b30      	cmp	r3, #48	; 0x30
 800582e:	d064      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x15a>
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d86b      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b20      	cmp	r3, #32
 8005836:	d060      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x15a>
 8005838:	2b20      	cmp	r3, #32
 800583a:	d867      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b00      	cmp	r3, #0
 800583e:	d05c      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x15a>
 8005840:	2b10      	cmp	r3, #16
 8005842:	d05a      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x15a>
 8005844:	e062      	b.n	800590c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005856:	f000 f9b9 	bl	8005bcc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005868:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	609a      	str	r2, [r3, #8]
      break;
 8005872:	e04f      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005884:	f000 f9a2 	bl	8005bcc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005896:	609a      	str	r2, [r3, #8]
      break;
 8005898:	e03c      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	461a      	mov	r2, r3
 80058a8:	f000 f916 	bl	8005ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2150      	movs	r1, #80	; 0x50
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f96f 	bl	8005b96 <TIM_ITRx_SetConfig>
      break;
 80058b8:	e02c      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c6:	461a      	mov	r2, r3
 80058c8:	f000 f935 	bl	8005b36 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2160      	movs	r1, #96	; 0x60
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f95f 	bl	8005b96 <TIM_ITRx_SetConfig>
      break;
 80058d8:	e01c      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 f8f6 	bl	8005ad8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2140      	movs	r1, #64	; 0x40
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f94f 	bl	8005b96 <TIM_ITRx_SetConfig>
      break;
 80058f8:	e00c      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f000 f946 	bl	8005b96 <TIM_ITRx_SetConfig>
      break;
 800590a:	e003      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
      break;
 8005910:	e000      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005912:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	fffeff88 	.word	0xfffeff88

08005934 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a40      	ldr	r2, [pc, #256]	; (8005aac <TIM_Base_SetConfig+0x114>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d013      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d00f      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a3d      	ldr	r2, [pc, #244]	; (8005ab0 <TIM_Base_SetConfig+0x118>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d00b      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a3c      	ldr	r2, [pc, #240]	; (8005ab4 <TIM_Base_SetConfig+0x11c>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d007      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a3b      	ldr	r2, [pc, #236]	; (8005ab8 <TIM_Base_SetConfig+0x120>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d003      	beq.n	80059d8 <TIM_Base_SetConfig+0x40>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a3a      	ldr	r2, [pc, #232]	; (8005abc <TIM_Base_SetConfig+0x124>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d108      	bne.n	80059ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a2f      	ldr	r2, [pc, #188]	; (8005aac <TIM_Base_SetConfig+0x114>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d02b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d027      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a2c      	ldr	r2, [pc, #176]	; (8005ab0 <TIM_Base_SetConfig+0x118>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d023      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a2b      	ldr	r2, [pc, #172]	; (8005ab4 <TIM_Base_SetConfig+0x11c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d01f      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2a      	ldr	r2, [pc, #168]	; (8005ab8 <TIM_Base_SetConfig+0x120>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d01b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a29      	ldr	r2, [pc, #164]	; (8005abc <TIM_Base_SetConfig+0x124>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d017      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a28      	ldr	r2, [pc, #160]	; (8005ac0 <TIM_Base_SetConfig+0x128>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d013      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a27      	ldr	r2, [pc, #156]	; (8005ac4 <TIM_Base_SetConfig+0x12c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00f      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <TIM_Base_SetConfig+0x130>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d00b      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a25      	ldr	r2, [pc, #148]	; (8005acc <TIM_Base_SetConfig+0x134>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d007      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a24      	ldr	r2, [pc, #144]	; (8005ad0 <TIM_Base_SetConfig+0x138>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a23      	ldr	r2, [pc, #140]	; (8005ad4 <TIM_Base_SetConfig+0x13c>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d108      	bne.n	8005a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <TIM_Base_SetConfig+0x114>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d003      	beq.n	8005a90 <TIM_Base_SetConfig+0xf8>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a0c      	ldr	r2, [pc, #48]	; (8005abc <TIM_Base_SetConfig+0x124>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d103      	bne.n	8005a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691a      	ldr	r2, [r3, #16]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	615a      	str	r2, [r3, #20]
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00
 8005abc:	40010400 	.word	0x40010400
 8005ac0:	40014000 	.word	0x40014000
 8005ac4:	40014400 	.word	0x40014400
 8005ac8:	40014800 	.word	0x40014800
 8005acc:	40001800 	.word	0x40001800
 8005ad0:	40001c00 	.word	0x40001c00
 8005ad4:	40002000 	.word	0x40002000

08005ad8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b087      	sub	sp, #28
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	f023 0201 	bic.w	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	699b      	ldr	r3, [r3, #24]
 8005afa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f023 030a 	bic.w	r3, r3, #10
 8005b14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	621a      	str	r2, [r3, #32]
}
 8005b2a:	bf00      	nop
 8005b2c:	371c      	adds	r7, #28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b087      	sub	sp, #28
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	60f8      	str	r0, [r7, #12]
 8005b3e:	60b9      	str	r1, [r7, #8]
 8005b40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	f023 0210 	bic.w	r2, r3, #16
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6a1b      	ldr	r3, [r3, #32]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	031b      	lsls	r3, r3, #12
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f043 0307 	orr.w	r3, r3, #7
 8005bb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	609a      	str	r2, [r3, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b087      	sub	sp, #28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005be6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	021a      	lsls	r2, r3, #8
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	609a      	str	r2, [r3, #8]
}
 8005c00:	bf00      	nop
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c20:	2302      	movs	r3, #2
 8005c22:	e06d      	b.n	8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a30      	ldr	r2, [pc, #192]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a2f      	ldr	r2, [pc, #188]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d108      	bne.n	8005c6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d022      	beq.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c96:	d01d      	beq.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d018      	beq.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a1c      	ldr	r2, [pc, #112]	; (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d013      	beq.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d00e      	beq.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a15      	ldr	r2, [pc, #84]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d009      	beq.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a16      	ldr	r2, [pc, #88]	; (8005d20 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d004      	beq.n	8005cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a15      	ldr	r2, [pc, #84]	; (8005d24 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d10c      	bne.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40010400 	.word	0x40010400
 8005d14:	40000400 	.word	0x40000400
 8005d18:	40000800 	.word	0x40000800
 8005d1c:	40000c00 	.word	0x40000c00
 8005d20:	40014000 	.word	0x40014000
 8005d24:	40001800 	.word	0x40001800

08005d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e040      	b.n	8005df8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d106      	bne.n	8005d8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fb fd78 	bl	800187c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2224      	movs	r2, #36	; 0x24
 8005d90:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 0201 	bic.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 fc86 	bl	80066b4 <UART_SetConfig>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d101      	bne.n	8005db2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e022      	b.n	8005df8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fede 	bl	8006b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0201 	orr.w	r2, r2, #1
 8005dee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 ff65 	bl	8006cc0 <UART_CheckIdleState>
 8005df6:	4603      	mov	r3, r0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	; 0x28
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d171      	bne.n	8005efc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_UART_Transmit+0x24>
 8005e1e:	88fb      	ldrh	r3, [r7, #6]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e06a      	b.n	8005efe <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2221      	movs	r2, #33	; 0x21
 8005e34:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e36:	f7fc fcdd 	bl	80027f4 <HAL_GetTick>
 8005e3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	88fa      	ldrh	r2, [r7, #6]
 8005e40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	88fa      	ldrh	r2, [r7, #6]
 8005e48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e54:	d108      	bne.n	8005e68 <HAL_UART_Transmit+0x68>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d104      	bne.n	8005e68 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	e003      	b.n	8005e70 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e70:	e02c      	b.n	8005ecc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 ff6c 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e038      	b.n	8005efe <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ea0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	61bb      	str	r3, [r7, #24]
 8005ea8:	e007      	b.n	8005eba <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	781a      	ldrb	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1cc      	bne.n	8005e72 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	9300      	str	r3, [sp, #0]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	2140      	movs	r1, #64	; 0x40
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f000 ff39 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e005      	b.n	8005efe <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e000      	b.n	8005efe <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005efc:	2302      	movs	r3, #2
  }
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b08a      	sub	sp, #40	; 0x28
 8005f0a:	af02      	add	r7, sp, #8
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	f040 80b1 	bne.w	8006084 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_UART_Receive+0x28>
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e0a9      	b.n	8006086 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2222      	movs	r2, #34	; 0x22
 8005f3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f48:	f7fc fc54 	bl	80027f4 <HAL_GetTick>
 8005f4c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	88fa      	ldrh	r2, [r7, #6]
 8005f52:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	88fa      	ldrh	r2, [r7, #6]
 8005f5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	d10e      	bne.n	8005f86 <HAL_UART_Receive+0x80>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d105      	bne.n	8005f7c <HAL_UART_Receive+0x76>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f7a:	e02d      	b.n	8005fd8 <HAL_UART_Receive+0xd2>
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	22ff      	movs	r2, #255	; 0xff
 8005f80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f84:	e028      	b.n	8005fd8 <HAL_UART_Receive+0xd2>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10d      	bne.n	8005faa <HAL_UART_Receive+0xa4>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d104      	bne.n	8005fa0 <HAL_UART_Receive+0x9a>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	22ff      	movs	r2, #255	; 0xff
 8005f9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f9e:	e01b      	b.n	8005fd8 <HAL_UART_Receive+0xd2>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	227f      	movs	r2, #127	; 0x7f
 8005fa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fa8:	e016      	b.n	8005fd8 <HAL_UART_Receive+0xd2>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fb2:	d10d      	bne.n	8005fd0 <HAL_UART_Receive+0xca>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d104      	bne.n	8005fc6 <HAL_UART_Receive+0xc0>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	227f      	movs	r2, #127	; 0x7f
 8005fc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fc4:	e008      	b.n	8005fd8 <HAL_UART_Receive+0xd2>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	223f      	movs	r2, #63	; 0x3f
 8005fca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fce:	e003      	b.n	8005fd8 <HAL_UART_Receive+0xd2>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fde:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	d108      	bne.n	8005ffc <HAL_UART_Receive+0xf6>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d104      	bne.n	8005ffc <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	e003      	b.n	8006004 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006004:	e032      	b.n	800606c <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2200      	movs	r2, #0
 800600e:	2120      	movs	r1, #32
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f000 fea2 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e032      	b.n	8006086 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006020:	69fb      	ldr	r3, [r7, #28]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10c      	bne.n	8006040 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602c:	b29a      	uxth	r2, r3
 800602e:	8a7b      	ldrh	r3, [r7, #18]
 8006030:	4013      	ands	r3, r2
 8006032:	b29a      	uxth	r2, r3
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	3302      	adds	r3, #2
 800603c:	61bb      	str	r3, [r7, #24]
 800603e:	e00c      	b.n	800605a <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	b2da      	uxtb	r2, r3
 8006048:	8a7b      	ldrh	r3, [r7, #18]
 800604a:	b2db      	uxtb	r3, r3
 800604c:	4013      	ands	r3, r2
 800604e:	b2da      	uxtb	r2, r3
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	3301      	adds	r3, #1
 8006058:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006060:	b29b      	uxth	r3, r3
 8006062:	3b01      	subs	r3, #1
 8006064:	b29a      	uxth	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1c6      	bne.n	8006006 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006080:	2300      	movs	r3, #0
 8006082:	e000      	b.n	8006086 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006084:	2302      	movs	r3, #2
  }
}
 8006086:	4618      	mov	r0, r3
 8006088:	3720      	adds	r7, #32
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}
	...

08006090 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b0ba      	sub	sp, #232	; 0xe8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80060b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80060ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80060be:	4013      	ands	r3, r2
 80060c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80060c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d115      	bne.n	80060f8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060d0:	f003 0320 	and.w	r3, r3, #32
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d00f      	beq.n	80060f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d009      	beq.n	80060f8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 82ac 	beq.w	8006646 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	4798      	blx	r3
      }
      return;
 80060f6:	e2a6      	b.n	8006646 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 8117 	beq.w	8006330 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d106      	bne.n	800611c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800610e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006112:	4b85      	ldr	r3, [pc, #532]	; (8006328 <HAL_UART_IRQHandler+0x298>)
 8006114:	4013      	ands	r3, r2
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 810a 	beq.w	8006330 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800611c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006120:	f003 0301 	and.w	r3, r3, #1
 8006124:	2b00      	cmp	r3, #0
 8006126:	d011      	beq.n	800614c <HAL_UART_IRQHandler+0xbc>
 8006128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d00b      	beq.n	800614c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2201      	movs	r2, #1
 800613a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006142:	f043 0201 	orr.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800614c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d011      	beq.n	800617c <HAL_UART_IRQHandler+0xec>
 8006158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00b      	beq.n	800617c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2202      	movs	r2, #2
 800616a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006172:	f043 0204 	orr.w	r2, r3, #4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800617c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d011      	beq.n	80061ac <HAL_UART_IRQHandler+0x11c>
 8006188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00b      	beq.n	80061ac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2204      	movs	r2, #4
 800619a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a2:	f043 0202 	orr.w	r2, r3, #2
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80061ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b0:	f003 0308 	and.w	r3, r3, #8
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d017      	beq.n	80061e8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00b      	beq.n	80061e8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2208      	movs	r2, #8
 80061d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061de:	f043 0208 	orr.w	r2, r3, #8
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d012      	beq.n	800621a <HAL_UART_IRQHandler+0x18a>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00c      	beq.n	800621a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006210:	f043 0220 	orr.w	r2, r3, #32
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8212 	beq.w	800664a <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00d      	beq.n	800624e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006232:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006254:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006262:	2b40      	cmp	r3, #64	; 0x40
 8006264:	d005      	beq.n	8006272 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800626a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800626e:	2b00      	cmp	r3, #0
 8006270:	d04f      	beq.n	8006312 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 fe37 	bl	8006ee6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006282:	2b40      	cmp	r3, #64	; 0x40
 8006284:	d141      	bne.n	800630a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3308      	adds	r3, #8
 800628c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006290:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006294:	e853 3f00 	ldrex	r3, [r3]
 8006298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800629c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80062a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	3308      	adds	r3, #8
 80062ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80062b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80062b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062c2:	e841 2300 	strex	r3, r2, [r1]
 80062c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1d9      	bne.n	8006286 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d013      	beq.n	8006302 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062de:	4a13      	ldr	r2, [pc, #76]	; (800632c <HAL_UART_IRQHandler+0x29c>)
 80062e0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fd f82f 	bl	800334a <HAL_DMA_Abort_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d017      	beq.n	8006322 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062fc:	4610      	mov	r0, r2
 80062fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006300:	e00f      	b.n	8006322 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f9b6 	bl	8006674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006308:	e00b      	b.n	8006322 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f9b2 	bl	8006674 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006310:	e007      	b.n	8006322 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f9ae 	bl	8006674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006320:	e193      	b.n	800664a <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006322:	bf00      	nop
    return;
 8006324:	e191      	b.n	800664a <HAL_UART_IRQHandler+0x5ba>
 8006326:	bf00      	nop
 8006328:	04000120 	.word	0x04000120
 800632c:	08006faf 	.word	0x08006faf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006334:	2b01      	cmp	r3, #1
 8006336:	f040 814c 	bne.w	80065d2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800633a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800633e:	f003 0310 	and.w	r3, r3, #16
 8006342:	2b00      	cmp	r3, #0
 8006344:	f000 8145 	beq.w	80065d2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634c:	f003 0310 	and.w	r3, r3, #16
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 813e 	beq.w	80065d2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2210      	movs	r2, #16
 800635c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b40      	cmp	r3, #64	; 0x40
 800636a:	f040 80b6 	bne.w	80064da <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800637a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 8165 	beq.w	800664e <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800638a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800638e:	429a      	cmp	r2, r3
 8006390:	f080 815d 	bcs.w	800664e <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800639a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a2:	69db      	ldr	r3, [r3, #28]
 80063a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a8:	f000 8086 	beq.w	80064b8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1da      	bne.n	80063ac <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3308      	adds	r3, #8
 80063fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006406:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800641a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800641e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006422:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800642c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e1      	bne.n	80063f6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3308      	adds	r3, #8
 8006438:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006444:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006456:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006458:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800645c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006464:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e3      	bne.n	8006432 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006488:	f023 0310 	bic.w	r3, r3, #16
 800648c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800649a:	65bb      	str	r3, [r7, #88]	; 0x58
 800649c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80064a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80064a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e4      	bne.n	8006478 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fc fed9 	bl	800326a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f8d8 	bl	8006688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064d8:	e0b9      	b.n	800664e <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80ab 	beq.w	8006652 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80064fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80a6 	beq.w	8006652 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800651a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006528:	647b      	str	r3, [r7, #68]	; 0x44
 800652a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800652e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e4      	bne.n	8006506 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3308      	adds	r3, #8
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	623b      	str	r3, [r7, #32]
   return(result);
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	f023 0301 	bic.w	r3, r3, #1
 8006552:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3308      	adds	r3, #8
 800655c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006560:	633a      	str	r2, [r7, #48]	; 0x30
 8006562:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006568:	e841 2300 	strex	r3, r2, [r1]
 800656c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e3      	bne.n	800653c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2220      	movs	r2, #32
 8006578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	60fb      	str	r3, [r7, #12]
   return(result);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f023 0310 	bic.w	r3, r3, #16
 800659c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065aa:	61fb      	str	r3, [r7, #28]
 80065ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	69b9      	ldr	r1, [r7, #24]
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	617b      	str	r3, [r7, #20]
   return(result);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e4      	bne.n	8006588 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065c8:	4619      	mov	r1, r3
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f85c 	bl	8006688 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065d0:	e03f      	b.n	8006652 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00e      	beq.n	80065fc <HAL_UART_IRQHandler+0x56c>
 80065de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d008      	beq.n	80065fc <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f853 	bl	80066a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065fa:	e02d      	b.n	8006658 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00e      	beq.n	8006626 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800660c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006610:	2b00      	cmp	r3, #0
 8006612:	d008      	beq.n	8006626 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d01c      	beq.n	8006656 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
    }
    return;
 8006624:	e017      	b.n	8006656 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662e:	2b00      	cmp	r3, #0
 8006630:	d012      	beq.n	8006658 <HAL_UART_IRQHandler+0x5c8>
 8006632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fccb 	bl	8006fda <UART_EndTransmit_IT>
    return;
 8006644:	e008      	b.n	8006658 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006646:	bf00      	nop
 8006648:	e006      	b.n	8006658 <HAL_UART_IRQHandler+0x5c8>
    return;
 800664a:	bf00      	nop
 800664c:	e004      	b.n	8006658 <HAL_UART_IRQHandler+0x5c8>
      return;
 800664e:	bf00      	nop
 8006650:	e002      	b.n	8006658 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006652:	bf00      	nop
 8006654:	e000      	b.n	8006658 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006656:	bf00      	nop
  }

}
 8006658:	37e8      	adds	r7, #232	; 0xe8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop

08006660 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006660:	b480      	push	{r7}
 8006662:	b083      	sub	sp, #12
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b083      	sub	sp, #12
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066a8:	bf00      	nop
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr

080066b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	4ba6      	ldr	r3, [pc, #664]	; (8006978 <UART_SetConfig+0x2c4>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	430b      	orrs	r3, r1
 80066ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	430a      	orrs	r2, r1
 8006724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a94      	ldr	r2, [pc, #592]	; (800697c <UART_SetConfig+0x2c8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d120      	bne.n	8006772 <UART_SetConfig+0xbe>
 8006730:	4b93      	ldr	r3, [pc, #588]	; (8006980 <UART_SetConfig+0x2cc>)
 8006732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006736:	f003 0303 	and.w	r3, r3, #3
 800673a:	2b03      	cmp	r3, #3
 800673c:	d816      	bhi.n	800676c <UART_SetConfig+0xb8>
 800673e:	a201      	add	r2, pc, #4	; (adr r2, 8006744 <UART_SetConfig+0x90>)
 8006740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006744:	08006755 	.word	0x08006755
 8006748:	08006761 	.word	0x08006761
 800674c:	0800675b 	.word	0x0800675b
 8006750:	08006767 	.word	0x08006767
 8006754:	2301      	movs	r3, #1
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e150      	b.n	80069fc <UART_SetConfig+0x348>
 800675a:	2302      	movs	r3, #2
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e14d      	b.n	80069fc <UART_SetConfig+0x348>
 8006760:	2304      	movs	r3, #4
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e14a      	b.n	80069fc <UART_SetConfig+0x348>
 8006766:	2308      	movs	r3, #8
 8006768:	77fb      	strb	r3, [r7, #31]
 800676a:	e147      	b.n	80069fc <UART_SetConfig+0x348>
 800676c:	2310      	movs	r3, #16
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e144      	b.n	80069fc <UART_SetConfig+0x348>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a83      	ldr	r2, [pc, #524]	; (8006984 <UART_SetConfig+0x2d0>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d132      	bne.n	80067e2 <UART_SetConfig+0x12e>
 800677c:	4b80      	ldr	r3, [pc, #512]	; (8006980 <UART_SetConfig+0x2cc>)
 800677e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006782:	f003 030c 	and.w	r3, r3, #12
 8006786:	2b0c      	cmp	r3, #12
 8006788:	d828      	bhi.n	80067dc <UART_SetConfig+0x128>
 800678a:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <UART_SetConfig+0xdc>)
 800678c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006790:	080067c5 	.word	0x080067c5
 8006794:	080067dd 	.word	0x080067dd
 8006798:	080067dd 	.word	0x080067dd
 800679c:	080067dd 	.word	0x080067dd
 80067a0:	080067d1 	.word	0x080067d1
 80067a4:	080067dd 	.word	0x080067dd
 80067a8:	080067dd 	.word	0x080067dd
 80067ac:	080067dd 	.word	0x080067dd
 80067b0:	080067cb 	.word	0x080067cb
 80067b4:	080067dd 	.word	0x080067dd
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	080067dd 	.word	0x080067dd
 80067c0:	080067d7 	.word	0x080067d7
 80067c4:	2300      	movs	r3, #0
 80067c6:	77fb      	strb	r3, [r7, #31]
 80067c8:	e118      	b.n	80069fc <UART_SetConfig+0x348>
 80067ca:	2302      	movs	r3, #2
 80067cc:	77fb      	strb	r3, [r7, #31]
 80067ce:	e115      	b.n	80069fc <UART_SetConfig+0x348>
 80067d0:	2304      	movs	r3, #4
 80067d2:	77fb      	strb	r3, [r7, #31]
 80067d4:	e112      	b.n	80069fc <UART_SetConfig+0x348>
 80067d6:	2308      	movs	r3, #8
 80067d8:	77fb      	strb	r3, [r7, #31]
 80067da:	e10f      	b.n	80069fc <UART_SetConfig+0x348>
 80067dc:	2310      	movs	r3, #16
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e10c      	b.n	80069fc <UART_SetConfig+0x348>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a68      	ldr	r2, [pc, #416]	; (8006988 <UART_SetConfig+0x2d4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d120      	bne.n	800682e <UART_SetConfig+0x17a>
 80067ec:	4b64      	ldr	r3, [pc, #400]	; (8006980 <UART_SetConfig+0x2cc>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067f6:	2b30      	cmp	r3, #48	; 0x30
 80067f8:	d013      	beq.n	8006822 <UART_SetConfig+0x16e>
 80067fa:	2b30      	cmp	r3, #48	; 0x30
 80067fc:	d814      	bhi.n	8006828 <UART_SetConfig+0x174>
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d009      	beq.n	8006816 <UART_SetConfig+0x162>
 8006802:	2b20      	cmp	r3, #32
 8006804:	d810      	bhi.n	8006828 <UART_SetConfig+0x174>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <UART_SetConfig+0x15c>
 800680a:	2b10      	cmp	r3, #16
 800680c:	d006      	beq.n	800681c <UART_SetConfig+0x168>
 800680e:	e00b      	b.n	8006828 <UART_SetConfig+0x174>
 8006810:	2300      	movs	r3, #0
 8006812:	77fb      	strb	r3, [r7, #31]
 8006814:	e0f2      	b.n	80069fc <UART_SetConfig+0x348>
 8006816:	2302      	movs	r3, #2
 8006818:	77fb      	strb	r3, [r7, #31]
 800681a:	e0ef      	b.n	80069fc <UART_SetConfig+0x348>
 800681c:	2304      	movs	r3, #4
 800681e:	77fb      	strb	r3, [r7, #31]
 8006820:	e0ec      	b.n	80069fc <UART_SetConfig+0x348>
 8006822:	2308      	movs	r3, #8
 8006824:	77fb      	strb	r3, [r7, #31]
 8006826:	e0e9      	b.n	80069fc <UART_SetConfig+0x348>
 8006828:	2310      	movs	r3, #16
 800682a:	77fb      	strb	r3, [r7, #31]
 800682c:	e0e6      	b.n	80069fc <UART_SetConfig+0x348>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a56      	ldr	r2, [pc, #344]	; (800698c <UART_SetConfig+0x2d8>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d120      	bne.n	800687a <UART_SetConfig+0x1c6>
 8006838:	4b51      	ldr	r3, [pc, #324]	; (8006980 <UART_SetConfig+0x2cc>)
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006842:	2bc0      	cmp	r3, #192	; 0xc0
 8006844:	d013      	beq.n	800686e <UART_SetConfig+0x1ba>
 8006846:	2bc0      	cmp	r3, #192	; 0xc0
 8006848:	d814      	bhi.n	8006874 <UART_SetConfig+0x1c0>
 800684a:	2b80      	cmp	r3, #128	; 0x80
 800684c:	d009      	beq.n	8006862 <UART_SetConfig+0x1ae>
 800684e:	2b80      	cmp	r3, #128	; 0x80
 8006850:	d810      	bhi.n	8006874 <UART_SetConfig+0x1c0>
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <UART_SetConfig+0x1a8>
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d006      	beq.n	8006868 <UART_SetConfig+0x1b4>
 800685a:	e00b      	b.n	8006874 <UART_SetConfig+0x1c0>
 800685c:	2300      	movs	r3, #0
 800685e:	77fb      	strb	r3, [r7, #31]
 8006860:	e0cc      	b.n	80069fc <UART_SetConfig+0x348>
 8006862:	2302      	movs	r3, #2
 8006864:	77fb      	strb	r3, [r7, #31]
 8006866:	e0c9      	b.n	80069fc <UART_SetConfig+0x348>
 8006868:	2304      	movs	r3, #4
 800686a:	77fb      	strb	r3, [r7, #31]
 800686c:	e0c6      	b.n	80069fc <UART_SetConfig+0x348>
 800686e:	2308      	movs	r3, #8
 8006870:	77fb      	strb	r3, [r7, #31]
 8006872:	e0c3      	b.n	80069fc <UART_SetConfig+0x348>
 8006874:	2310      	movs	r3, #16
 8006876:	77fb      	strb	r3, [r7, #31]
 8006878:	e0c0      	b.n	80069fc <UART_SetConfig+0x348>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a44      	ldr	r2, [pc, #272]	; (8006990 <UART_SetConfig+0x2dc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d125      	bne.n	80068d0 <UART_SetConfig+0x21c>
 8006884:	4b3e      	ldr	r3, [pc, #248]	; (8006980 <UART_SetConfig+0x2cc>)
 8006886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006892:	d017      	beq.n	80068c4 <UART_SetConfig+0x210>
 8006894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006898:	d817      	bhi.n	80068ca <UART_SetConfig+0x216>
 800689a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689e:	d00b      	beq.n	80068b8 <UART_SetConfig+0x204>
 80068a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068a4:	d811      	bhi.n	80068ca <UART_SetConfig+0x216>
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <UART_SetConfig+0x1fe>
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	d006      	beq.n	80068be <UART_SetConfig+0x20a>
 80068b0:	e00b      	b.n	80068ca <UART_SetConfig+0x216>
 80068b2:	2300      	movs	r3, #0
 80068b4:	77fb      	strb	r3, [r7, #31]
 80068b6:	e0a1      	b.n	80069fc <UART_SetConfig+0x348>
 80068b8:	2302      	movs	r3, #2
 80068ba:	77fb      	strb	r3, [r7, #31]
 80068bc:	e09e      	b.n	80069fc <UART_SetConfig+0x348>
 80068be:	2304      	movs	r3, #4
 80068c0:	77fb      	strb	r3, [r7, #31]
 80068c2:	e09b      	b.n	80069fc <UART_SetConfig+0x348>
 80068c4:	2308      	movs	r3, #8
 80068c6:	77fb      	strb	r3, [r7, #31]
 80068c8:	e098      	b.n	80069fc <UART_SetConfig+0x348>
 80068ca:	2310      	movs	r3, #16
 80068cc:	77fb      	strb	r3, [r7, #31]
 80068ce:	e095      	b.n	80069fc <UART_SetConfig+0x348>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2f      	ldr	r2, [pc, #188]	; (8006994 <UART_SetConfig+0x2e0>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d125      	bne.n	8006926 <UART_SetConfig+0x272>
 80068da:	4b29      	ldr	r3, [pc, #164]	; (8006980 <UART_SetConfig+0x2cc>)
 80068dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068e8:	d017      	beq.n	800691a <UART_SetConfig+0x266>
 80068ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068ee:	d817      	bhi.n	8006920 <UART_SetConfig+0x26c>
 80068f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068f4:	d00b      	beq.n	800690e <UART_SetConfig+0x25a>
 80068f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068fa:	d811      	bhi.n	8006920 <UART_SetConfig+0x26c>
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <UART_SetConfig+0x254>
 8006900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006904:	d006      	beq.n	8006914 <UART_SetConfig+0x260>
 8006906:	e00b      	b.n	8006920 <UART_SetConfig+0x26c>
 8006908:	2301      	movs	r3, #1
 800690a:	77fb      	strb	r3, [r7, #31]
 800690c:	e076      	b.n	80069fc <UART_SetConfig+0x348>
 800690e:	2302      	movs	r3, #2
 8006910:	77fb      	strb	r3, [r7, #31]
 8006912:	e073      	b.n	80069fc <UART_SetConfig+0x348>
 8006914:	2304      	movs	r3, #4
 8006916:	77fb      	strb	r3, [r7, #31]
 8006918:	e070      	b.n	80069fc <UART_SetConfig+0x348>
 800691a:	2308      	movs	r3, #8
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e06d      	b.n	80069fc <UART_SetConfig+0x348>
 8006920:	2310      	movs	r3, #16
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e06a      	b.n	80069fc <UART_SetConfig+0x348>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1b      	ldr	r2, [pc, #108]	; (8006998 <UART_SetConfig+0x2e4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d138      	bne.n	80069a2 <UART_SetConfig+0x2ee>
 8006930:	4b13      	ldr	r3, [pc, #76]	; (8006980 <UART_SetConfig+0x2cc>)
 8006932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006936:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800693a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800693e:	d017      	beq.n	8006970 <UART_SetConfig+0x2bc>
 8006940:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006944:	d82a      	bhi.n	800699c <UART_SetConfig+0x2e8>
 8006946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800694a:	d00b      	beq.n	8006964 <UART_SetConfig+0x2b0>
 800694c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006950:	d824      	bhi.n	800699c <UART_SetConfig+0x2e8>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <UART_SetConfig+0x2aa>
 8006956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800695a:	d006      	beq.n	800696a <UART_SetConfig+0x2b6>
 800695c:	e01e      	b.n	800699c <UART_SetConfig+0x2e8>
 800695e:	2300      	movs	r3, #0
 8006960:	77fb      	strb	r3, [r7, #31]
 8006962:	e04b      	b.n	80069fc <UART_SetConfig+0x348>
 8006964:	2302      	movs	r3, #2
 8006966:	77fb      	strb	r3, [r7, #31]
 8006968:	e048      	b.n	80069fc <UART_SetConfig+0x348>
 800696a:	2304      	movs	r3, #4
 800696c:	77fb      	strb	r3, [r7, #31]
 800696e:	e045      	b.n	80069fc <UART_SetConfig+0x348>
 8006970:	2308      	movs	r3, #8
 8006972:	77fb      	strb	r3, [r7, #31]
 8006974:	e042      	b.n	80069fc <UART_SetConfig+0x348>
 8006976:	bf00      	nop
 8006978:	efff69f3 	.word	0xefff69f3
 800697c:	40011000 	.word	0x40011000
 8006980:	40023800 	.word	0x40023800
 8006984:	40004400 	.word	0x40004400
 8006988:	40004800 	.word	0x40004800
 800698c:	40004c00 	.word	0x40004c00
 8006990:	40005000 	.word	0x40005000
 8006994:	40011400 	.word	0x40011400
 8006998:	40007800 	.word	0x40007800
 800699c:	2310      	movs	r3, #16
 800699e:	77fb      	strb	r3, [r7, #31]
 80069a0:	e02c      	b.n	80069fc <UART_SetConfig+0x348>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a72      	ldr	r2, [pc, #456]	; (8006b70 <UART_SetConfig+0x4bc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d125      	bne.n	80069f8 <UART_SetConfig+0x344>
 80069ac:	4b71      	ldr	r3, [pc, #452]	; (8006b74 <UART_SetConfig+0x4c0>)
 80069ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069ba:	d017      	beq.n	80069ec <UART_SetConfig+0x338>
 80069bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069c0:	d817      	bhi.n	80069f2 <UART_SetConfig+0x33e>
 80069c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069c6:	d00b      	beq.n	80069e0 <UART_SetConfig+0x32c>
 80069c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069cc:	d811      	bhi.n	80069f2 <UART_SetConfig+0x33e>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d003      	beq.n	80069da <UART_SetConfig+0x326>
 80069d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069d6:	d006      	beq.n	80069e6 <UART_SetConfig+0x332>
 80069d8:	e00b      	b.n	80069f2 <UART_SetConfig+0x33e>
 80069da:	2300      	movs	r3, #0
 80069dc:	77fb      	strb	r3, [r7, #31]
 80069de:	e00d      	b.n	80069fc <UART_SetConfig+0x348>
 80069e0:	2302      	movs	r3, #2
 80069e2:	77fb      	strb	r3, [r7, #31]
 80069e4:	e00a      	b.n	80069fc <UART_SetConfig+0x348>
 80069e6:	2304      	movs	r3, #4
 80069e8:	77fb      	strb	r3, [r7, #31]
 80069ea:	e007      	b.n	80069fc <UART_SetConfig+0x348>
 80069ec:	2308      	movs	r3, #8
 80069ee:	77fb      	strb	r3, [r7, #31]
 80069f0:	e004      	b.n	80069fc <UART_SetConfig+0x348>
 80069f2:	2310      	movs	r3, #16
 80069f4:	77fb      	strb	r3, [r7, #31]
 80069f6:	e001      	b.n	80069fc <UART_SetConfig+0x348>
 80069f8:	2310      	movs	r3, #16
 80069fa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a04:	d15b      	bne.n	8006abe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a06:	7ffb      	ldrb	r3, [r7, #31]
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d828      	bhi.n	8006a5e <UART_SetConfig+0x3aa>
 8006a0c:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <UART_SetConfig+0x360>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a39 	.word	0x08006a39
 8006a18:	08006a41 	.word	0x08006a41
 8006a1c:	08006a49 	.word	0x08006a49
 8006a20:	08006a5f 	.word	0x08006a5f
 8006a24:	08006a4f 	.word	0x08006a4f
 8006a28:	08006a5f 	.word	0x08006a5f
 8006a2c:	08006a5f 	.word	0x08006a5f
 8006a30:	08006a5f 	.word	0x08006a5f
 8006a34:	08006a57 	.word	0x08006a57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a38:	f7fd fc78 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8006a3c:	61b8      	str	r0, [r7, #24]
        break;
 8006a3e:	e013      	b.n	8006a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a40:	f7fd fc88 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 8006a44:	61b8      	str	r0, [r7, #24]
        break;
 8006a46:	e00f      	b.n	8006a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a48:	4b4b      	ldr	r3, [pc, #300]	; (8006b78 <UART_SetConfig+0x4c4>)
 8006a4a:	61bb      	str	r3, [r7, #24]
        break;
 8006a4c:	e00c      	b.n	8006a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a4e:	f7fd fb5b 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8006a52:	61b8      	str	r0, [r7, #24]
        break;
 8006a54:	e008      	b.n	8006a68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a5a:	61bb      	str	r3, [r7, #24]
        break;
 8006a5c:	e004      	b.n	8006a68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	77bb      	strb	r3, [r7, #30]
        break;
 8006a66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d074      	beq.n	8006b58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	005a      	lsls	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	085b      	lsrs	r3, r3, #1
 8006a78:	441a      	add	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b0f      	cmp	r3, #15
 8006a88:	d916      	bls.n	8006ab8 <UART_SetConfig+0x404>
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a90:	d212      	bcs.n	8006ab8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f023 030f 	bic.w	r3, r3, #15
 8006a9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	085b      	lsrs	r3, r3, #1
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	89fb      	ldrh	r3, [r7, #14]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	89fa      	ldrh	r2, [r7, #14]
 8006ab4:	60da      	str	r2, [r3, #12]
 8006ab6:	e04f      	b.n	8006b58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	77bb      	strb	r3, [r7, #30]
 8006abc:	e04c      	b.n	8006b58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006abe:	7ffb      	ldrb	r3, [r7, #31]
 8006ac0:	2b08      	cmp	r3, #8
 8006ac2:	d828      	bhi.n	8006b16 <UART_SetConfig+0x462>
 8006ac4:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <UART_SetConfig+0x418>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006af1 	.word	0x08006af1
 8006ad0:	08006af9 	.word	0x08006af9
 8006ad4:	08006b01 	.word	0x08006b01
 8006ad8:	08006b17 	.word	0x08006b17
 8006adc:	08006b07 	.word	0x08006b07
 8006ae0:	08006b17 	.word	0x08006b17
 8006ae4:	08006b17 	.word	0x08006b17
 8006ae8:	08006b17 	.word	0x08006b17
 8006aec:	08006b0f 	.word	0x08006b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af0:	f7fd fc1c 	bl	800432c <HAL_RCC_GetPCLK1Freq>
 8006af4:	61b8      	str	r0, [r7, #24]
        break;
 8006af6:	e013      	b.n	8006b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af8:	f7fd fc2c 	bl	8004354 <HAL_RCC_GetPCLK2Freq>
 8006afc:	61b8      	str	r0, [r7, #24]
        break;
 8006afe:	e00f      	b.n	8006b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b00:	4b1d      	ldr	r3, [pc, #116]	; (8006b78 <UART_SetConfig+0x4c4>)
 8006b02:	61bb      	str	r3, [r7, #24]
        break;
 8006b04:	e00c      	b.n	8006b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b06:	f7fd faff 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 8006b0a:	61b8      	str	r0, [r7, #24]
        break;
 8006b0c:	e008      	b.n	8006b20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b12:	61bb      	str	r3, [r7, #24]
        break;
 8006b14:	e004      	b.n	8006b20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	77bb      	strb	r3, [r7, #30]
        break;
 8006b1e:	bf00      	nop
    }

    if (pclk != 0U)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d018      	beq.n	8006b58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	085a      	lsrs	r2, r3, #1
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	441a      	add	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b0f      	cmp	r3, #15
 8006b3e:	d909      	bls.n	8006b54 <UART_SetConfig+0x4a0>
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b46:	d205      	bcs.n	8006b54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	60da      	str	r2, [r3, #12]
 8006b52:	e001      	b.n	8006b58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b64:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3720      	adds	r7, #32
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	40007c00 	.word	0x40007c00
 8006b74:	40023800 	.word	0x40023800
 8006b78:	00f42400 	.word	0x00f42400

08006b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00a      	beq.n	8006ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006baa:	f003 0302 	and.w	r3, r3, #2
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bcc:	f003 0304 	and.w	r3, r3, #4
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00a      	beq.n	8006bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	430a      	orrs	r2, r1
 8006be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	f003 0308 	and.w	r3, r3, #8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	f003 0320 	and.w	r3, r3, #32
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01a      	beq.n	8006c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c7a:	d10a      	bne.n	8006c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00a      	beq.n	8006cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	605a      	str	r2, [r3, #4]
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cd0:	f7fb fd90 	bl	80027f4 <HAL_GetTick>
 8006cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0308 	and.w	r3, r3, #8
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	d10e      	bne.n	8006d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f831 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e027      	b.n	8006d52 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b04      	cmp	r3, #4
 8006d0e:	d10e      	bne.n	8006d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f81b 	bl	8006d5a <UART_WaitOnFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e011      	b.n	8006d52 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b09c      	sub	sp, #112	; 0x70
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	60f8      	str	r0, [r7, #12]
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	603b      	str	r3, [r7, #0]
 8006d66:	4613      	mov	r3, r2
 8006d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d6a:	e0a7      	b.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d72:	f000 80a3 	beq.w	8006ebc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d76:	f7fb fd3d 	bl	80027f4 <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d302      	bcc.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x32>
 8006d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d13f      	bne.n	8006e0c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006da0:	667b      	str	r3, [r7, #100]	; 0x64
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006db0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006db2:	e841 2300 	strex	r3, r2, [r1]
 8006db6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1e6      	bne.n	8006d8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	3308      	adds	r3, #8
 8006dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd0:	f023 0301 	bic.w	r3, r3, #1
 8006dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3308      	adds	r3, #8
 8006ddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dde:	64ba      	str	r2, [r7, #72]	; 0x48
 8006de0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006de6:	e841 2300 	strex	r3, r2, [r1]
 8006dea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1e5      	bne.n	8006dbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2220      	movs	r2, #32
 8006df6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006e08:	2303      	movs	r3, #3
 8006e0a:	e068      	b.n	8006ede <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d050      	beq.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e28:	d148      	bne.n	8006ebc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e32:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e52:	637b      	str	r3, [r7, #52]	; 0x34
 8006e54:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e6      	bne.n	8006e34 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	e853 3f00 	ldrex	r3, [r3]
 8006e74:	613b      	str	r3, [r7, #16]
   return(result);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3308      	adds	r3, #8
 8006e84:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e86:	623a      	str	r2, [r7, #32]
 8006e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8a:	69f9      	ldr	r1, [r7, #28]
 8006e8c:	6a3a      	ldr	r2, [r7, #32]
 8006e8e:	e841 2300 	strex	r3, r2, [r1]
 8006e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e5      	bne.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e010      	b.n	8006ede <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	69da      	ldr	r2, [r3, #28]
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	bf0c      	ite	eq
 8006ecc:	2301      	moveq	r3, #1
 8006ece:	2300      	movne	r3, #0
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	f43f af48 	beq.w	8006d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3770      	adds	r7, #112	; 0x70
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee6:	b480      	push	{r7}
 8006ee8:	b095      	sub	sp, #84	; 0x54
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f0e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e6      	bne.n	8006eee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6a3b      	ldr	r3, [r7, #32]
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	f023 0301 	bic.w	r3, r3, #1
 8006f36:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f40:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e5      	bne.n	8006f20 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d118      	bne.n	8006f8e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	e853 3f00 	ldrex	r3, [r3]
 8006f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f023 0310 	bic.w	r3, r3, #16
 8006f70:	647b      	str	r3, [r7, #68]	; 0x44
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7a:	61bb      	str	r3, [r7, #24]
 8006f7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f7e:	6979      	ldr	r1, [r7, #20]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	e841 2300 	strex	r3, r2, [r1]
 8006f86:	613b      	str	r3, [r7, #16]
   return(result);
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1e6      	bne.n	8006f5c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006fa2:	bf00      	nop
 8006fa4:	3754      	adds	r7, #84	; 0x54
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b084      	sub	sp, #16
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff fb51 	bl	8006674 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd2:	bf00      	nop
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b088      	sub	sp, #32
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	e853 3f00 	ldrex	r3, [r3]
 8006fee:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff6:	61fb      	str	r3, [r7, #28]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007004:	6979      	ldr	r1, [r7, #20]
 8007006:	69ba      	ldr	r2, [r7, #24]
 8007008:	e841 2300 	strex	r3, r2, [r1]
 800700c:	613b      	str	r3, [r7, #16]
   return(result);
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1e6      	bne.n	8006fe2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f7ff fb1d 	bl	8006660 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007026:	bf00      	nop
 8007028:	3720      	adds	r7, #32
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <__cvt>:
 800702e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007030:	ed2d 8b02 	vpush	{d8}
 8007034:	eeb0 8b40 	vmov.f64	d8, d0
 8007038:	b085      	sub	sp, #20
 800703a:	4617      	mov	r7, r2
 800703c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800703e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007040:	ee18 2a90 	vmov	r2, s17
 8007044:	f025 0520 	bic.w	r5, r5, #32
 8007048:	2a00      	cmp	r2, #0
 800704a:	bfb6      	itet	lt
 800704c:	222d      	movlt	r2, #45	; 0x2d
 800704e:	2200      	movge	r2, #0
 8007050:	eeb1 8b40 	vneglt.f64	d8, d0
 8007054:	2d46      	cmp	r5, #70	; 0x46
 8007056:	460c      	mov	r4, r1
 8007058:	701a      	strb	r2, [r3, #0]
 800705a:	d004      	beq.n	8007066 <__cvt+0x38>
 800705c:	2d45      	cmp	r5, #69	; 0x45
 800705e:	d100      	bne.n	8007062 <__cvt+0x34>
 8007060:	3401      	adds	r4, #1
 8007062:	2102      	movs	r1, #2
 8007064:	e000      	b.n	8007068 <__cvt+0x3a>
 8007066:	2103      	movs	r1, #3
 8007068:	ab03      	add	r3, sp, #12
 800706a:	9301      	str	r3, [sp, #4]
 800706c:	ab02      	add	r3, sp, #8
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4622      	mov	r2, r4
 8007072:	4633      	mov	r3, r6
 8007074:	eeb0 0b48 	vmov.f64	d0, d8
 8007078:	f000 fe2e 	bl	8007cd8 <_dtoa_r>
 800707c:	2d47      	cmp	r5, #71	; 0x47
 800707e:	d101      	bne.n	8007084 <__cvt+0x56>
 8007080:	07fb      	lsls	r3, r7, #31
 8007082:	d51a      	bpl.n	80070ba <__cvt+0x8c>
 8007084:	2d46      	cmp	r5, #70	; 0x46
 8007086:	eb00 0204 	add.w	r2, r0, r4
 800708a:	d10c      	bne.n	80070a6 <__cvt+0x78>
 800708c:	7803      	ldrb	r3, [r0, #0]
 800708e:	2b30      	cmp	r3, #48	; 0x30
 8007090:	d107      	bne.n	80070a2 <__cvt+0x74>
 8007092:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709a:	bf1c      	itt	ne
 800709c:	f1c4 0401 	rsbne	r4, r4, #1
 80070a0:	6034      	strne	r4, [r6, #0]
 80070a2:	6833      	ldr	r3, [r6, #0]
 80070a4:	441a      	add	r2, r3
 80070a6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80070aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ae:	bf08      	it	eq
 80070b0:	9203      	streq	r2, [sp, #12]
 80070b2:	2130      	movs	r1, #48	; 0x30
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d307      	bcc.n	80070ca <__cvt+0x9c>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070be:	1a1b      	subs	r3, r3, r0
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	b005      	add	sp, #20
 80070c4:	ecbd 8b02 	vpop	{d8}
 80070c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ca:	1c5c      	adds	r4, r3, #1
 80070cc:	9403      	str	r4, [sp, #12]
 80070ce:	7019      	strb	r1, [r3, #0]
 80070d0:	e7f0      	b.n	80070b4 <__cvt+0x86>

080070d2 <__exponent>:
 80070d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070d4:	4603      	mov	r3, r0
 80070d6:	2900      	cmp	r1, #0
 80070d8:	bfb8      	it	lt
 80070da:	4249      	neglt	r1, r1
 80070dc:	f803 2b02 	strb.w	r2, [r3], #2
 80070e0:	bfb4      	ite	lt
 80070e2:	222d      	movlt	r2, #45	; 0x2d
 80070e4:	222b      	movge	r2, #43	; 0x2b
 80070e6:	2909      	cmp	r1, #9
 80070e8:	7042      	strb	r2, [r0, #1]
 80070ea:	dd2a      	ble.n	8007142 <__exponent+0x70>
 80070ec:	f10d 0207 	add.w	r2, sp, #7
 80070f0:	4617      	mov	r7, r2
 80070f2:	260a      	movs	r6, #10
 80070f4:	4694      	mov	ip, r2
 80070f6:	fb91 f5f6 	sdiv	r5, r1, r6
 80070fa:	fb06 1415 	mls	r4, r6, r5, r1
 80070fe:	3430      	adds	r4, #48	; 0x30
 8007100:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007104:	460c      	mov	r4, r1
 8007106:	2c63      	cmp	r4, #99	; 0x63
 8007108:	f102 32ff 	add.w	r2, r2, #4294967295
 800710c:	4629      	mov	r1, r5
 800710e:	dcf1      	bgt.n	80070f4 <__exponent+0x22>
 8007110:	3130      	adds	r1, #48	; 0x30
 8007112:	f1ac 0402 	sub.w	r4, ip, #2
 8007116:	f802 1c01 	strb.w	r1, [r2, #-1]
 800711a:	1c41      	adds	r1, r0, #1
 800711c:	4622      	mov	r2, r4
 800711e:	42ba      	cmp	r2, r7
 8007120:	d30a      	bcc.n	8007138 <__exponent+0x66>
 8007122:	f10d 0209 	add.w	r2, sp, #9
 8007126:	eba2 020c 	sub.w	r2, r2, ip
 800712a:	42bc      	cmp	r4, r7
 800712c:	bf88      	it	hi
 800712e:	2200      	movhi	r2, #0
 8007130:	4413      	add	r3, r2
 8007132:	1a18      	subs	r0, r3, r0
 8007134:	b003      	add	sp, #12
 8007136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007138:	f812 5b01 	ldrb.w	r5, [r2], #1
 800713c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007140:	e7ed      	b.n	800711e <__exponent+0x4c>
 8007142:	2330      	movs	r3, #48	; 0x30
 8007144:	3130      	adds	r1, #48	; 0x30
 8007146:	7083      	strb	r3, [r0, #2]
 8007148:	70c1      	strb	r1, [r0, #3]
 800714a:	1d03      	adds	r3, r0, #4
 800714c:	e7f1      	b.n	8007132 <__exponent+0x60>
	...

08007150 <_printf_float>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	b08b      	sub	sp, #44	; 0x2c
 8007156:	460c      	mov	r4, r1
 8007158:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800715c:	4616      	mov	r6, r2
 800715e:	461f      	mov	r7, r3
 8007160:	4605      	mov	r5, r0
 8007162:	f000 fcbb 	bl	8007adc <_localeconv_r>
 8007166:	f8d0 b000 	ldr.w	fp, [r0]
 800716a:	4658      	mov	r0, fp
 800716c:	f7f9 f8b8 	bl	80002e0 <strlen>
 8007170:	2300      	movs	r3, #0
 8007172:	9308      	str	r3, [sp, #32]
 8007174:	f8d8 3000 	ldr.w	r3, [r8]
 8007178:	f894 9018 	ldrb.w	r9, [r4, #24]
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	3307      	adds	r3, #7
 8007180:	f023 0307 	bic.w	r3, r3, #7
 8007184:	f103 0108 	add.w	r1, r3, #8
 8007188:	f8c8 1000 	str.w	r1, [r8]
 800718c:	ed93 0b00 	vldr	d0, [r3]
 8007190:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80073f0 <_printf_float+0x2a0>
 8007194:	eeb0 7bc0 	vabs.f64	d7, d0
 8007198:	eeb4 7b46 	vcmp.f64	d7, d6
 800719c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80071a4:	4682      	mov	sl, r0
 80071a6:	dd24      	ble.n	80071f2 <_printf_float+0xa2>
 80071a8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80071ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b0:	d502      	bpl.n	80071b8 <_printf_float+0x68>
 80071b2:	232d      	movs	r3, #45	; 0x2d
 80071b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071b8:	498f      	ldr	r1, [pc, #572]	; (80073f8 <_printf_float+0x2a8>)
 80071ba:	4b90      	ldr	r3, [pc, #576]	; (80073fc <_printf_float+0x2ac>)
 80071bc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80071c0:	bf94      	ite	ls
 80071c2:	4688      	movls	r8, r1
 80071c4:	4698      	movhi	r8, r3
 80071c6:	2303      	movs	r3, #3
 80071c8:	6123      	str	r3, [r4, #16]
 80071ca:	f022 0204 	bic.w	r2, r2, #4
 80071ce:	2300      	movs	r3, #0
 80071d0:	6022      	str	r2, [r4, #0]
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	9700      	str	r7, [sp, #0]
 80071d6:	4633      	mov	r3, r6
 80071d8:	aa09      	add	r2, sp, #36	; 0x24
 80071da:	4621      	mov	r1, r4
 80071dc:	4628      	mov	r0, r5
 80071de:	f000 f9d1 	bl	8007584 <_printf_common>
 80071e2:	3001      	adds	r0, #1
 80071e4:	f040 808a 	bne.w	80072fc <_printf_float+0x1ac>
 80071e8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ec:	b00b      	add	sp, #44	; 0x2c
 80071ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f2:	eeb4 0b40 	vcmp.f64	d0, d0
 80071f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fa:	d709      	bvc.n	8007210 <_printf_float+0xc0>
 80071fc:	ee10 3a90 	vmov	r3, s1
 8007200:	2b00      	cmp	r3, #0
 8007202:	bfbc      	itt	lt
 8007204:	232d      	movlt	r3, #45	; 0x2d
 8007206:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800720a:	497d      	ldr	r1, [pc, #500]	; (8007400 <_printf_float+0x2b0>)
 800720c:	4b7d      	ldr	r3, [pc, #500]	; (8007404 <_printf_float+0x2b4>)
 800720e:	e7d5      	b.n	80071bc <_printf_float+0x6c>
 8007210:	6863      	ldr	r3, [r4, #4]
 8007212:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007216:	9104      	str	r1, [sp, #16]
 8007218:	1c59      	adds	r1, r3, #1
 800721a:	d13c      	bne.n	8007296 <_printf_float+0x146>
 800721c:	2306      	movs	r3, #6
 800721e:	6063      	str	r3, [r4, #4]
 8007220:	2300      	movs	r3, #0
 8007222:	9303      	str	r3, [sp, #12]
 8007224:	ab08      	add	r3, sp, #32
 8007226:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800722a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800722e:	ab07      	add	r3, sp, #28
 8007230:	6861      	ldr	r1, [r4, #4]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	6022      	str	r2, [r4, #0]
 8007236:	f10d 031b 	add.w	r3, sp, #27
 800723a:	4628      	mov	r0, r5
 800723c:	f7ff fef7 	bl	800702e <__cvt>
 8007240:	9b04      	ldr	r3, [sp, #16]
 8007242:	9907      	ldr	r1, [sp, #28]
 8007244:	2b47      	cmp	r3, #71	; 0x47
 8007246:	4680      	mov	r8, r0
 8007248:	d108      	bne.n	800725c <_printf_float+0x10c>
 800724a:	1cc8      	adds	r0, r1, #3
 800724c:	db02      	blt.n	8007254 <_printf_float+0x104>
 800724e:	6863      	ldr	r3, [r4, #4]
 8007250:	4299      	cmp	r1, r3
 8007252:	dd41      	ble.n	80072d8 <_printf_float+0x188>
 8007254:	f1a9 0902 	sub.w	r9, r9, #2
 8007258:	fa5f f989 	uxtb.w	r9, r9
 800725c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007260:	d820      	bhi.n	80072a4 <_printf_float+0x154>
 8007262:	3901      	subs	r1, #1
 8007264:	464a      	mov	r2, r9
 8007266:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800726a:	9107      	str	r1, [sp, #28]
 800726c:	f7ff ff31 	bl	80070d2 <__exponent>
 8007270:	9a08      	ldr	r2, [sp, #32]
 8007272:	9004      	str	r0, [sp, #16]
 8007274:	1813      	adds	r3, r2, r0
 8007276:	2a01      	cmp	r2, #1
 8007278:	6123      	str	r3, [r4, #16]
 800727a:	dc02      	bgt.n	8007282 <_printf_float+0x132>
 800727c:	6822      	ldr	r2, [r4, #0]
 800727e:	07d2      	lsls	r2, r2, #31
 8007280:	d501      	bpl.n	8007286 <_printf_float+0x136>
 8007282:	3301      	adds	r3, #1
 8007284:	6123      	str	r3, [r4, #16]
 8007286:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0a2      	beq.n	80071d4 <_printf_float+0x84>
 800728e:	232d      	movs	r3, #45	; 0x2d
 8007290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007294:	e79e      	b.n	80071d4 <_printf_float+0x84>
 8007296:	9904      	ldr	r1, [sp, #16]
 8007298:	2947      	cmp	r1, #71	; 0x47
 800729a:	d1c1      	bne.n	8007220 <_printf_float+0xd0>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d1bf      	bne.n	8007220 <_printf_float+0xd0>
 80072a0:	2301      	movs	r3, #1
 80072a2:	e7bc      	b.n	800721e <_printf_float+0xce>
 80072a4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80072a8:	d118      	bne.n	80072dc <_printf_float+0x18c>
 80072aa:	2900      	cmp	r1, #0
 80072ac:	6863      	ldr	r3, [r4, #4]
 80072ae:	dd0b      	ble.n	80072c8 <_printf_float+0x178>
 80072b0:	6121      	str	r1, [r4, #16]
 80072b2:	b913      	cbnz	r3, 80072ba <_printf_float+0x16a>
 80072b4:	6822      	ldr	r2, [r4, #0]
 80072b6:	07d0      	lsls	r0, r2, #31
 80072b8:	d502      	bpl.n	80072c0 <_printf_float+0x170>
 80072ba:	3301      	adds	r3, #1
 80072bc:	440b      	add	r3, r1
 80072be:	6123      	str	r3, [r4, #16]
 80072c0:	2300      	movs	r3, #0
 80072c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80072c4:	9304      	str	r3, [sp, #16]
 80072c6:	e7de      	b.n	8007286 <_printf_float+0x136>
 80072c8:	b913      	cbnz	r3, 80072d0 <_printf_float+0x180>
 80072ca:	6822      	ldr	r2, [r4, #0]
 80072cc:	07d2      	lsls	r2, r2, #31
 80072ce:	d501      	bpl.n	80072d4 <_printf_float+0x184>
 80072d0:	3302      	adds	r3, #2
 80072d2:	e7f4      	b.n	80072be <_printf_float+0x16e>
 80072d4:	2301      	movs	r3, #1
 80072d6:	e7f2      	b.n	80072be <_printf_float+0x16e>
 80072d8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80072dc:	9b08      	ldr	r3, [sp, #32]
 80072de:	4299      	cmp	r1, r3
 80072e0:	db05      	blt.n	80072ee <_printf_float+0x19e>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	6121      	str	r1, [r4, #16]
 80072e6:	07d8      	lsls	r0, r3, #31
 80072e8:	d5ea      	bpl.n	80072c0 <_printf_float+0x170>
 80072ea:	1c4b      	adds	r3, r1, #1
 80072ec:	e7e7      	b.n	80072be <_printf_float+0x16e>
 80072ee:	2900      	cmp	r1, #0
 80072f0:	bfd4      	ite	le
 80072f2:	f1c1 0202 	rsble	r2, r1, #2
 80072f6:	2201      	movgt	r2, #1
 80072f8:	4413      	add	r3, r2
 80072fa:	e7e0      	b.n	80072be <_printf_float+0x16e>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	055a      	lsls	r2, r3, #21
 8007300:	d407      	bmi.n	8007312 <_printf_float+0x1c2>
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	4642      	mov	r2, r8
 8007306:	4631      	mov	r1, r6
 8007308:	4628      	mov	r0, r5
 800730a:	47b8      	blx	r7
 800730c:	3001      	adds	r0, #1
 800730e:	d12a      	bne.n	8007366 <_printf_float+0x216>
 8007310:	e76a      	b.n	80071e8 <_printf_float+0x98>
 8007312:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007316:	f240 80e0 	bls.w	80074da <_printf_float+0x38a>
 800731a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800731e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007326:	d133      	bne.n	8007390 <_printf_float+0x240>
 8007328:	4a37      	ldr	r2, [pc, #220]	; (8007408 <_printf_float+0x2b8>)
 800732a:	2301      	movs	r3, #1
 800732c:	4631      	mov	r1, r6
 800732e:	4628      	mov	r0, r5
 8007330:	47b8      	blx	r7
 8007332:	3001      	adds	r0, #1
 8007334:	f43f af58 	beq.w	80071e8 <_printf_float+0x98>
 8007338:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800733c:	429a      	cmp	r2, r3
 800733e:	db02      	blt.n	8007346 <_printf_float+0x1f6>
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	07d8      	lsls	r0, r3, #31
 8007344:	d50f      	bpl.n	8007366 <_printf_float+0x216>
 8007346:	4653      	mov	r3, sl
 8007348:	465a      	mov	r2, fp
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	f43f af49 	beq.w	80071e8 <_printf_float+0x98>
 8007356:	f04f 0800 	mov.w	r8, #0
 800735a:	f104 091a 	add.w	r9, r4, #26
 800735e:	9b08      	ldr	r3, [sp, #32]
 8007360:	3b01      	subs	r3, #1
 8007362:	4543      	cmp	r3, r8
 8007364:	dc09      	bgt.n	800737a <_printf_float+0x22a>
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	079b      	lsls	r3, r3, #30
 800736a:	f100 8106 	bmi.w	800757a <_printf_float+0x42a>
 800736e:	68e0      	ldr	r0, [r4, #12]
 8007370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007372:	4298      	cmp	r0, r3
 8007374:	bfb8      	it	lt
 8007376:	4618      	movlt	r0, r3
 8007378:	e738      	b.n	80071ec <_printf_float+0x9c>
 800737a:	2301      	movs	r3, #1
 800737c:	464a      	mov	r2, r9
 800737e:	4631      	mov	r1, r6
 8007380:	4628      	mov	r0, r5
 8007382:	47b8      	blx	r7
 8007384:	3001      	adds	r0, #1
 8007386:	f43f af2f 	beq.w	80071e8 <_printf_float+0x98>
 800738a:	f108 0801 	add.w	r8, r8, #1
 800738e:	e7e6      	b.n	800735e <_printf_float+0x20e>
 8007390:	9b07      	ldr	r3, [sp, #28]
 8007392:	2b00      	cmp	r3, #0
 8007394:	dc3a      	bgt.n	800740c <_printf_float+0x2bc>
 8007396:	4a1c      	ldr	r2, [pc, #112]	; (8007408 <_printf_float+0x2b8>)
 8007398:	2301      	movs	r3, #1
 800739a:	4631      	mov	r1, r6
 800739c:	4628      	mov	r0, r5
 800739e:	47b8      	blx	r7
 80073a0:	3001      	adds	r0, #1
 80073a2:	f43f af21 	beq.w	80071e8 <_printf_float+0x98>
 80073a6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	d102      	bne.n	80073b4 <_printf_float+0x264>
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	07d9      	lsls	r1, r3, #31
 80073b2:	d5d8      	bpl.n	8007366 <_printf_float+0x216>
 80073b4:	4653      	mov	r3, sl
 80073b6:	465a      	mov	r2, fp
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f43f af12 	beq.w	80071e8 <_printf_float+0x98>
 80073c4:	f04f 0900 	mov.w	r9, #0
 80073c8:	f104 0a1a 	add.w	sl, r4, #26
 80073cc:	9b07      	ldr	r3, [sp, #28]
 80073ce:	425b      	negs	r3, r3
 80073d0:	454b      	cmp	r3, r9
 80073d2:	dc01      	bgt.n	80073d8 <_printf_float+0x288>
 80073d4:	9b08      	ldr	r3, [sp, #32]
 80073d6:	e795      	b.n	8007304 <_printf_float+0x1b4>
 80073d8:	2301      	movs	r3, #1
 80073da:	4652      	mov	r2, sl
 80073dc:	4631      	mov	r1, r6
 80073de:	4628      	mov	r0, r5
 80073e0:	47b8      	blx	r7
 80073e2:	3001      	adds	r0, #1
 80073e4:	f43f af00 	beq.w	80071e8 <_printf_float+0x98>
 80073e8:	f109 0901 	add.w	r9, r9, #1
 80073ec:	e7ee      	b.n	80073cc <_printf_float+0x27c>
 80073ee:	bf00      	nop
 80073f0:	ffffffff 	.word	0xffffffff
 80073f4:	7fefffff 	.word	0x7fefffff
 80073f8:	0809fe54 	.word	0x0809fe54
 80073fc:	0809fe58 	.word	0x0809fe58
 8007400:	0809fe5c 	.word	0x0809fe5c
 8007404:	0809fe60 	.word	0x0809fe60
 8007408:	0809fe64 	.word	0x0809fe64
 800740c:	9a08      	ldr	r2, [sp, #32]
 800740e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007410:	429a      	cmp	r2, r3
 8007412:	bfa8      	it	ge
 8007414:	461a      	movge	r2, r3
 8007416:	2a00      	cmp	r2, #0
 8007418:	4691      	mov	r9, r2
 800741a:	dc38      	bgt.n	800748e <_printf_float+0x33e>
 800741c:	2300      	movs	r3, #0
 800741e:	9305      	str	r3, [sp, #20]
 8007420:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007424:	f104 021a 	add.w	r2, r4, #26
 8007428:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800742a:	9905      	ldr	r1, [sp, #20]
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	eba3 0309 	sub.w	r3, r3, r9
 8007432:	428b      	cmp	r3, r1
 8007434:	dc33      	bgt.n	800749e <_printf_float+0x34e>
 8007436:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800743a:	429a      	cmp	r2, r3
 800743c:	db3c      	blt.n	80074b8 <_printf_float+0x368>
 800743e:	6823      	ldr	r3, [r4, #0]
 8007440:	07da      	lsls	r2, r3, #31
 8007442:	d439      	bmi.n	80074b8 <_printf_float+0x368>
 8007444:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007448:	eba2 0903 	sub.w	r9, r2, r3
 800744c:	9b04      	ldr	r3, [sp, #16]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	4591      	cmp	r9, r2
 8007452:	bfa8      	it	ge
 8007454:	4691      	movge	r9, r2
 8007456:	f1b9 0f00 	cmp.w	r9, #0
 800745a:	dc35      	bgt.n	80074c8 <_printf_float+0x378>
 800745c:	f04f 0800 	mov.w	r8, #0
 8007460:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007464:	f104 0a1a 	add.w	sl, r4, #26
 8007468:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800746c:	1a9b      	subs	r3, r3, r2
 800746e:	eba3 0309 	sub.w	r3, r3, r9
 8007472:	4543      	cmp	r3, r8
 8007474:	f77f af77 	ble.w	8007366 <_printf_float+0x216>
 8007478:	2301      	movs	r3, #1
 800747a:	4652      	mov	r2, sl
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	47b8      	blx	r7
 8007482:	3001      	adds	r0, #1
 8007484:	f43f aeb0 	beq.w	80071e8 <_printf_float+0x98>
 8007488:	f108 0801 	add.w	r8, r8, #1
 800748c:	e7ec      	b.n	8007468 <_printf_float+0x318>
 800748e:	4613      	mov	r3, r2
 8007490:	4631      	mov	r1, r6
 8007492:	4642      	mov	r2, r8
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	d1bf      	bne.n	800741c <_printf_float+0x2cc>
 800749c:	e6a4      	b.n	80071e8 <_printf_float+0x98>
 800749e:	2301      	movs	r3, #1
 80074a0:	4631      	mov	r1, r6
 80074a2:	4628      	mov	r0, r5
 80074a4:	9204      	str	r2, [sp, #16]
 80074a6:	47b8      	blx	r7
 80074a8:	3001      	adds	r0, #1
 80074aa:	f43f ae9d 	beq.w	80071e8 <_printf_float+0x98>
 80074ae:	9b05      	ldr	r3, [sp, #20]
 80074b0:	9a04      	ldr	r2, [sp, #16]
 80074b2:	3301      	adds	r3, #1
 80074b4:	9305      	str	r3, [sp, #20]
 80074b6:	e7b7      	b.n	8007428 <_printf_float+0x2d8>
 80074b8:	4653      	mov	r3, sl
 80074ba:	465a      	mov	r2, fp
 80074bc:	4631      	mov	r1, r6
 80074be:	4628      	mov	r0, r5
 80074c0:	47b8      	blx	r7
 80074c2:	3001      	adds	r0, #1
 80074c4:	d1be      	bne.n	8007444 <_printf_float+0x2f4>
 80074c6:	e68f      	b.n	80071e8 <_printf_float+0x98>
 80074c8:	9a04      	ldr	r2, [sp, #16]
 80074ca:	464b      	mov	r3, r9
 80074cc:	4442      	add	r2, r8
 80074ce:	4631      	mov	r1, r6
 80074d0:	4628      	mov	r0, r5
 80074d2:	47b8      	blx	r7
 80074d4:	3001      	adds	r0, #1
 80074d6:	d1c1      	bne.n	800745c <_printf_float+0x30c>
 80074d8:	e686      	b.n	80071e8 <_printf_float+0x98>
 80074da:	9a08      	ldr	r2, [sp, #32]
 80074dc:	2a01      	cmp	r2, #1
 80074de:	dc01      	bgt.n	80074e4 <_printf_float+0x394>
 80074e0:	07db      	lsls	r3, r3, #31
 80074e2:	d537      	bpl.n	8007554 <_printf_float+0x404>
 80074e4:	2301      	movs	r3, #1
 80074e6:	4642      	mov	r2, r8
 80074e8:	4631      	mov	r1, r6
 80074ea:	4628      	mov	r0, r5
 80074ec:	47b8      	blx	r7
 80074ee:	3001      	adds	r0, #1
 80074f0:	f43f ae7a 	beq.w	80071e8 <_printf_float+0x98>
 80074f4:	4653      	mov	r3, sl
 80074f6:	465a      	mov	r2, fp
 80074f8:	4631      	mov	r1, r6
 80074fa:	4628      	mov	r0, r5
 80074fc:	47b8      	blx	r7
 80074fe:	3001      	adds	r0, #1
 8007500:	f43f ae72 	beq.w	80071e8 <_printf_float+0x98>
 8007504:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007508:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800750c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007510:	9b08      	ldr	r3, [sp, #32]
 8007512:	d01a      	beq.n	800754a <_printf_float+0x3fa>
 8007514:	3b01      	subs	r3, #1
 8007516:	f108 0201 	add.w	r2, r8, #1
 800751a:	4631      	mov	r1, r6
 800751c:	4628      	mov	r0, r5
 800751e:	47b8      	blx	r7
 8007520:	3001      	adds	r0, #1
 8007522:	d10e      	bne.n	8007542 <_printf_float+0x3f2>
 8007524:	e660      	b.n	80071e8 <_printf_float+0x98>
 8007526:	2301      	movs	r3, #1
 8007528:	464a      	mov	r2, r9
 800752a:	4631      	mov	r1, r6
 800752c:	4628      	mov	r0, r5
 800752e:	47b8      	blx	r7
 8007530:	3001      	adds	r0, #1
 8007532:	f43f ae59 	beq.w	80071e8 <_printf_float+0x98>
 8007536:	f108 0801 	add.w	r8, r8, #1
 800753a:	9b08      	ldr	r3, [sp, #32]
 800753c:	3b01      	subs	r3, #1
 800753e:	4543      	cmp	r3, r8
 8007540:	dcf1      	bgt.n	8007526 <_printf_float+0x3d6>
 8007542:	9b04      	ldr	r3, [sp, #16]
 8007544:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007548:	e6dd      	b.n	8007306 <_printf_float+0x1b6>
 800754a:	f04f 0800 	mov.w	r8, #0
 800754e:	f104 091a 	add.w	r9, r4, #26
 8007552:	e7f2      	b.n	800753a <_printf_float+0x3ea>
 8007554:	2301      	movs	r3, #1
 8007556:	4642      	mov	r2, r8
 8007558:	e7df      	b.n	800751a <_printf_float+0x3ca>
 800755a:	2301      	movs	r3, #1
 800755c:	464a      	mov	r2, r9
 800755e:	4631      	mov	r1, r6
 8007560:	4628      	mov	r0, r5
 8007562:	47b8      	blx	r7
 8007564:	3001      	adds	r0, #1
 8007566:	f43f ae3f 	beq.w	80071e8 <_printf_float+0x98>
 800756a:	f108 0801 	add.w	r8, r8, #1
 800756e:	68e3      	ldr	r3, [r4, #12]
 8007570:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007572:	1a5b      	subs	r3, r3, r1
 8007574:	4543      	cmp	r3, r8
 8007576:	dcf0      	bgt.n	800755a <_printf_float+0x40a>
 8007578:	e6f9      	b.n	800736e <_printf_float+0x21e>
 800757a:	f04f 0800 	mov.w	r8, #0
 800757e:	f104 0919 	add.w	r9, r4, #25
 8007582:	e7f4      	b.n	800756e <_printf_float+0x41e>

08007584 <_printf_common>:
 8007584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007588:	4616      	mov	r6, r2
 800758a:	4699      	mov	r9, r3
 800758c:	688a      	ldr	r2, [r1, #8]
 800758e:	690b      	ldr	r3, [r1, #16]
 8007590:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007594:	4293      	cmp	r3, r2
 8007596:	bfb8      	it	lt
 8007598:	4613      	movlt	r3, r2
 800759a:	6033      	str	r3, [r6, #0]
 800759c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075a0:	4607      	mov	r7, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	b10a      	cbz	r2, 80075aa <_printf_common+0x26>
 80075a6:	3301      	adds	r3, #1
 80075a8:	6033      	str	r3, [r6, #0]
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	0699      	lsls	r1, r3, #26
 80075ae:	bf42      	ittt	mi
 80075b0:	6833      	ldrmi	r3, [r6, #0]
 80075b2:	3302      	addmi	r3, #2
 80075b4:	6033      	strmi	r3, [r6, #0]
 80075b6:	6825      	ldr	r5, [r4, #0]
 80075b8:	f015 0506 	ands.w	r5, r5, #6
 80075bc:	d106      	bne.n	80075cc <_printf_common+0x48>
 80075be:	f104 0a19 	add.w	sl, r4, #25
 80075c2:	68e3      	ldr	r3, [r4, #12]
 80075c4:	6832      	ldr	r2, [r6, #0]
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	42ab      	cmp	r3, r5
 80075ca:	dc26      	bgt.n	800761a <_printf_common+0x96>
 80075cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075d0:	1e13      	subs	r3, r2, #0
 80075d2:	6822      	ldr	r2, [r4, #0]
 80075d4:	bf18      	it	ne
 80075d6:	2301      	movne	r3, #1
 80075d8:	0692      	lsls	r2, r2, #26
 80075da:	d42b      	bmi.n	8007634 <_printf_common+0xb0>
 80075dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075e0:	4649      	mov	r1, r9
 80075e2:	4638      	mov	r0, r7
 80075e4:	47c0      	blx	r8
 80075e6:	3001      	adds	r0, #1
 80075e8:	d01e      	beq.n	8007628 <_printf_common+0xa4>
 80075ea:	6823      	ldr	r3, [r4, #0]
 80075ec:	6922      	ldr	r2, [r4, #16]
 80075ee:	f003 0306 	and.w	r3, r3, #6
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	bf02      	ittt	eq
 80075f6:	68e5      	ldreq	r5, [r4, #12]
 80075f8:	6833      	ldreq	r3, [r6, #0]
 80075fa:	1aed      	subeq	r5, r5, r3
 80075fc:	68a3      	ldr	r3, [r4, #8]
 80075fe:	bf0c      	ite	eq
 8007600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007604:	2500      	movne	r5, #0
 8007606:	4293      	cmp	r3, r2
 8007608:	bfc4      	itt	gt
 800760a:	1a9b      	subgt	r3, r3, r2
 800760c:	18ed      	addgt	r5, r5, r3
 800760e:	2600      	movs	r6, #0
 8007610:	341a      	adds	r4, #26
 8007612:	42b5      	cmp	r5, r6
 8007614:	d11a      	bne.n	800764c <_printf_common+0xc8>
 8007616:	2000      	movs	r0, #0
 8007618:	e008      	b.n	800762c <_printf_common+0xa8>
 800761a:	2301      	movs	r3, #1
 800761c:	4652      	mov	r2, sl
 800761e:	4649      	mov	r1, r9
 8007620:	4638      	mov	r0, r7
 8007622:	47c0      	blx	r8
 8007624:	3001      	adds	r0, #1
 8007626:	d103      	bne.n	8007630 <_printf_common+0xac>
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007630:	3501      	adds	r5, #1
 8007632:	e7c6      	b.n	80075c2 <_printf_common+0x3e>
 8007634:	18e1      	adds	r1, r4, r3
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	2030      	movs	r0, #48	; 0x30
 800763a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800763e:	4422      	add	r2, r4
 8007640:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007644:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007648:	3302      	adds	r3, #2
 800764a:	e7c7      	b.n	80075dc <_printf_common+0x58>
 800764c:	2301      	movs	r3, #1
 800764e:	4622      	mov	r2, r4
 8007650:	4649      	mov	r1, r9
 8007652:	4638      	mov	r0, r7
 8007654:	47c0      	blx	r8
 8007656:	3001      	adds	r0, #1
 8007658:	d0e6      	beq.n	8007628 <_printf_common+0xa4>
 800765a:	3601      	adds	r6, #1
 800765c:	e7d9      	b.n	8007612 <_printf_common+0x8e>
	...

08007660 <_printf_i>:
 8007660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007664:	7e0f      	ldrb	r7, [r1, #24]
 8007666:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007668:	2f78      	cmp	r7, #120	; 0x78
 800766a:	4691      	mov	r9, r2
 800766c:	4680      	mov	r8, r0
 800766e:	460c      	mov	r4, r1
 8007670:	469a      	mov	sl, r3
 8007672:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007676:	d807      	bhi.n	8007688 <_printf_i+0x28>
 8007678:	2f62      	cmp	r7, #98	; 0x62
 800767a:	d80a      	bhi.n	8007692 <_printf_i+0x32>
 800767c:	2f00      	cmp	r7, #0
 800767e:	f000 80d4 	beq.w	800782a <_printf_i+0x1ca>
 8007682:	2f58      	cmp	r7, #88	; 0x58
 8007684:	f000 80c0 	beq.w	8007808 <_printf_i+0x1a8>
 8007688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800768c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007690:	e03a      	b.n	8007708 <_printf_i+0xa8>
 8007692:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007696:	2b15      	cmp	r3, #21
 8007698:	d8f6      	bhi.n	8007688 <_printf_i+0x28>
 800769a:	a101      	add	r1, pc, #4	; (adr r1, 80076a0 <_printf_i+0x40>)
 800769c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076a0:	080076f9 	.word	0x080076f9
 80076a4:	0800770d 	.word	0x0800770d
 80076a8:	08007689 	.word	0x08007689
 80076ac:	08007689 	.word	0x08007689
 80076b0:	08007689 	.word	0x08007689
 80076b4:	08007689 	.word	0x08007689
 80076b8:	0800770d 	.word	0x0800770d
 80076bc:	08007689 	.word	0x08007689
 80076c0:	08007689 	.word	0x08007689
 80076c4:	08007689 	.word	0x08007689
 80076c8:	08007689 	.word	0x08007689
 80076cc:	08007811 	.word	0x08007811
 80076d0:	08007739 	.word	0x08007739
 80076d4:	080077cb 	.word	0x080077cb
 80076d8:	08007689 	.word	0x08007689
 80076dc:	08007689 	.word	0x08007689
 80076e0:	08007833 	.word	0x08007833
 80076e4:	08007689 	.word	0x08007689
 80076e8:	08007739 	.word	0x08007739
 80076ec:	08007689 	.word	0x08007689
 80076f0:	08007689 	.word	0x08007689
 80076f4:	080077d3 	.word	0x080077d3
 80076f8:	682b      	ldr	r3, [r5, #0]
 80076fa:	1d1a      	adds	r2, r3, #4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	602a      	str	r2, [r5, #0]
 8007700:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007704:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007708:	2301      	movs	r3, #1
 800770a:	e09f      	b.n	800784c <_printf_i+0x1ec>
 800770c:	6820      	ldr	r0, [r4, #0]
 800770e:	682b      	ldr	r3, [r5, #0]
 8007710:	0607      	lsls	r7, r0, #24
 8007712:	f103 0104 	add.w	r1, r3, #4
 8007716:	6029      	str	r1, [r5, #0]
 8007718:	d501      	bpl.n	800771e <_printf_i+0xbe>
 800771a:	681e      	ldr	r6, [r3, #0]
 800771c:	e003      	b.n	8007726 <_printf_i+0xc6>
 800771e:	0646      	lsls	r6, r0, #25
 8007720:	d5fb      	bpl.n	800771a <_printf_i+0xba>
 8007722:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007726:	2e00      	cmp	r6, #0
 8007728:	da03      	bge.n	8007732 <_printf_i+0xd2>
 800772a:	232d      	movs	r3, #45	; 0x2d
 800772c:	4276      	negs	r6, r6
 800772e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007732:	485a      	ldr	r0, [pc, #360]	; (800789c <_printf_i+0x23c>)
 8007734:	230a      	movs	r3, #10
 8007736:	e012      	b.n	800775e <_printf_i+0xfe>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	6820      	ldr	r0, [r4, #0]
 800773c:	1d19      	adds	r1, r3, #4
 800773e:	6029      	str	r1, [r5, #0]
 8007740:	0605      	lsls	r5, r0, #24
 8007742:	d501      	bpl.n	8007748 <_printf_i+0xe8>
 8007744:	681e      	ldr	r6, [r3, #0]
 8007746:	e002      	b.n	800774e <_printf_i+0xee>
 8007748:	0641      	lsls	r1, r0, #25
 800774a:	d5fb      	bpl.n	8007744 <_printf_i+0xe4>
 800774c:	881e      	ldrh	r6, [r3, #0]
 800774e:	4853      	ldr	r0, [pc, #332]	; (800789c <_printf_i+0x23c>)
 8007750:	2f6f      	cmp	r7, #111	; 0x6f
 8007752:	bf0c      	ite	eq
 8007754:	2308      	moveq	r3, #8
 8007756:	230a      	movne	r3, #10
 8007758:	2100      	movs	r1, #0
 800775a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800775e:	6865      	ldr	r5, [r4, #4]
 8007760:	60a5      	str	r5, [r4, #8]
 8007762:	2d00      	cmp	r5, #0
 8007764:	bfa2      	ittt	ge
 8007766:	6821      	ldrge	r1, [r4, #0]
 8007768:	f021 0104 	bicge.w	r1, r1, #4
 800776c:	6021      	strge	r1, [r4, #0]
 800776e:	b90e      	cbnz	r6, 8007774 <_printf_i+0x114>
 8007770:	2d00      	cmp	r5, #0
 8007772:	d04b      	beq.n	800780c <_printf_i+0x1ac>
 8007774:	4615      	mov	r5, r2
 8007776:	fbb6 f1f3 	udiv	r1, r6, r3
 800777a:	fb03 6711 	mls	r7, r3, r1, r6
 800777e:	5dc7      	ldrb	r7, [r0, r7]
 8007780:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007784:	4637      	mov	r7, r6
 8007786:	42bb      	cmp	r3, r7
 8007788:	460e      	mov	r6, r1
 800778a:	d9f4      	bls.n	8007776 <_printf_i+0x116>
 800778c:	2b08      	cmp	r3, #8
 800778e:	d10b      	bne.n	80077a8 <_printf_i+0x148>
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	07de      	lsls	r6, r3, #31
 8007794:	d508      	bpl.n	80077a8 <_printf_i+0x148>
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	6861      	ldr	r1, [r4, #4]
 800779a:	4299      	cmp	r1, r3
 800779c:	bfde      	ittt	le
 800779e:	2330      	movle	r3, #48	; 0x30
 80077a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077a8:	1b52      	subs	r2, r2, r5
 80077aa:	6122      	str	r2, [r4, #16]
 80077ac:	f8cd a000 	str.w	sl, [sp]
 80077b0:	464b      	mov	r3, r9
 80077b2:	aa03      	add	r2, sp, #12
 80077b4:	4621      	mov	r1, r4
 80077b6:	4640      	mov	r0, r8
 80077b8:	f7ff fee4 	bl	8007584 <_printf_common>
 80077bc:	3001      	adds	r0, #1
 80077be:	d14a      	bne.n	8007856 <_printf_i+0x1f6>
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	b004      	add	sp, #16
 80077c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	f043 0320 	orr.w	r3, r3, #32
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	4833      	ldr	r0, [pc, #204]	; (80078a0 <_printf_i+0x240>)
 80077d4:	2778      	movs	r7, #120	; 0x78
 80077d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	6829      	ldr	r1, [r5, #0]
 80077de:	061f      	lsls	r7, r3, #24
 80077e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80077e4:	d402      	bmi.n	80077ec <_printf_i+0x18c>
 80077e6:	065f      	lsls	r7, r3, #25
 80077e8:	bf48      	it	mi
 80077ea:	b2b6      	uxthmi	r6, r6
 80077ec:	07df      	lsls	r7, r3, #31
 80077ee:	bf48      	it	mi
 80077f0:	f043 0320 	orrmi.w	r3, r3, #32
 80077f4:	6029      	str	r1, [r5, #0]
 80077f6:	bf48      	it	mi
 80077f8:	6023      	strmi	r3, [r4, #0]
 80077fa:	b91e      	cbnz	r6, 8007804 <_printf_i+0x1a4>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	f023 0320 	bic.w	r3, r3, #32
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	2310      	movs	r3, #16
 8007806:	e7a7      	b.n	8007758 <_printf_i+0xf8>
 8007808:	4824      	ldr	r0, [pc, #144]	; (800789c <_printf_i+0x23c>)
 800780a:	e7e4      	b.n	80077d6 <_printf_i+0x176>
 800780c:	4615      	mov	r5, r2
 800780e:	e7bd      	b.n	800778c <_printf_i+0x12c>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	6826      	ldr	r6, [r4, #0]
 8007814:	6961      	ldr	r1, [r4, #20]
 8007816:	1d18      	adds	r0, r3, #4
 8007818:	6028      	str	r0, [r5, #0]
 800781a:	0635      	lsls	r5, r6, #24
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	d501      	bpl.n	8007824 <_printf_i+0x1c4>
 8007820:	6019      	str	r1, [r3, #0]
 8007822:	e002      	b.n	800782a <_printf_i+0x1ca>
 8007824:	0670      	lsls	r0, r6, #25
 8007826:	d5fb      	bpl.n	8007820 <_printf_i+0x1c0>
 8007828:	8019      	strh	r1, [r3, #0]
 800782a:	2300      	movs	r3, #0
 800782c:	6123      	str	r3, [r4, #16]
 800782e:	4615      	mov	r5, r2
 8007830:	e7bc      	b.n	80077ac <_printf_i+0x14c>
 8007832:	682b      	ldr	r3, [r5, #0]
 8007834:	1d1a      	adds	r2, r3, #4
 8007836:	602a      	str	r2, [r5, #0]
 8007838:	681d      	ldr	r5, [r3, #0]
 800783a:	6862      	ldr	r2, [r4, #4]
 800783c:	2100      	movs	r1, #0
 800783e:	4628      	mov	r0, r5
 8007840:	f7f8 fcfe 	bl	8000240 <memchr>
 8007844:	b108      	cbz	r0, 800784a <_printf_i+0x1ea>
 8007846:	1b40      	subs	r0, r0, r5
 8007848:	6060      	str	r0, [r4, #4]
 800784a:	6863      	ldr	r3, [r4, #4]
 800784c:	6123      	str	r3, [r4, #16]
 800784e:	2300      	movs	r3, #0
 8007850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007854:	e7aa      	b.n	80077ac <_printf_i+0x14c>
 8007856:	6923      	ldr	r3, [r4, #16]
 8007858:	462a      	mov	r2, r5
 800785a:	4649      	mov	r1, r9
 800785c:	4640      	mov	r0, r8
 800785e:	47d0      	blx	sl
 8007860:	3001      	adds	r0, #1
 8007862:	d0ad      	beq.n	80077c0 <_printf_i+0x160>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	079b      	lsls	r3, r3, #30
 8007868:	d413      	bmi.n	8007892 <_printf_i+0x232>
 800786a:	68e0      	ldr	r0, [r4, #12]
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	4298      	cmp	r0, r3
 8007870:	bfb8      	it	lt
 8007872:	4618      	movlt	r0, r3
 8007874:	e7a6      	b.n	80077c4 <_printf_i+0x164>
 8007876:	2301      	movs	r3, #1
 8007878:	4632      	mov	r2, r6
 800787a:	4649      	mov	r1, r9
 800787c:	4640      	mov	r0, r8
 800787e:	47d0      	blx	sl
 8007880:	3001      	adds	r0, #1
 8007882:	d09d      	beq.n	80077c0 <_printf_i+0x160>
 8007884:	3501      	adds	r5, #1
 8007886:	68e3      	ldr	r3, [r4, #12]
 8007888:	9903      	ldr	r1, [sp, #12]
 800788a:	1a5b      	subs	r3, r3, r1
 800788c:	42ab      	cmp	r3, r5
 800788e:	dcf2      	bgt.n	8007876 <_printf_i+0x216>
 8007890:	e7eb      	b.n	800786a <_printf_i+0x20a>
 8007892:	2500      	movs	r5, #0
 8007894:	f104 0619 	add.w	r6, r4, #25
 8007898:	e7f5      	b.n	8007886 <_printf_i+0x226>
 800789a:	bf00      	nop
 800789c:	0809fe66 	.word	0x0809fe66
 80078a0:	0809fe77 	.word	0x0809fe77

080078a4 <std>:
 80078a4:	2300      	movs	r3, #0
 80078a6:	b510      	push	{r4, lr}
 80078a8:	4604      	mov	r4, r0
 80078aa:	e9c0 3300 	strd	r3, r3, [r0]
 80078ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80078b2:	6083      	str	r3, [r0, #8]
 80078b4:	8181      	strh	r1, [r0, #12]
 80078b6:	6643      	str	r3, [r0, #100]	; 0x64
 80078b8:	81c2      	strh	r2, [r0, #14]
 80078ba:	6183      	str	r3, [r0, #24]
 80078bc:	4619      	mov	r1, r3
 80078be:	2208      	movs	r2, #8
 80078c0:	305c      	adds	r0, #92	; 0x5c
 80078c2:	f000 f902 	bl	8007aca <memset>
 80078c6:	4b05      	ldr	r3, [pc, #20]	; (80078dc <std+0x38>)
 80078c8:	6263      	str	r3, [r4, #36]	; 0x24
 80078ca:	4b05      	ldr	r3, [pc, #20]	; (80078e0 <std+0x3c>)
 80078cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80078ce:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <std+0x40>)
 80078d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078d2:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <std+0x44>)
 80078d4:	6224      	str	r4, [r4, #32]
 80078d6:	6323      	str	r3, [r4, #48]	; 0x30
 80078d8:	bd10      	pop	{r4, pc}
 80078da:	bf00      	nop
 80078dc:	08007a45 	.word	0x08007a45
 80078e0:	08007a67 	.word	0x08007a67
 80078e4:	08007a9f 	.word	0x08007a9f
 80078e8:	08007ac3 	.word	0x08007ac3

080078ec <stdio_exit_handler>:
 80078ec:	4a02      	ldr	r2, [pc, #8]	; (80078f8 <stdio_exit_handler+0xc>)
 80078ee:	4903      	ldr	r1, [pc, #12]	; (80078fc <stdio_exit_handler+0x10>)
 80078f0:	4803      	ldr	r0, [pc, #12]	; (8007900 <stdio_exit_handler+0x14>)
 80078f2:	f000 b869 	b.w	80079c8 <_fwalk_sglue>
 80078f6:	bf00      	nop
 80078f8:	2000001c 	.word	0x2000001c
 80078fc:	08009465 	.word	0x08009465
 8007900:	20000028 	.word	0x20000028

08007904 <cleanup_stdio>:
 8007904:	6841      	ldr	r1, [r0, #4]
 8007906:	4b0c      	ldr	r3, [pc, #48]	; (8007938 <cleanup_stdio+0x34>)
 8007908:	4299      	cmp	r1, r3
 800790a:	b510      	push	{r4, lr}
 800790c:	4604      	mov	r4, r0
 800790e:	d001      	beq.n	8007914 <cleanup_stdio+0x10>
 8007910:	f001 fda8 	bl	8009464 <_fflush_r>
 8007914:	68a1      	ldr	r1, [r4, #8]
 8007916:	4b09      	ldr	r3, [pc, #36]	; (800793c <cleanup_stdio+0x38>)
 8007918:	4299      	cmp	r1, r3
 800791a:	d002      	beq.n	8007922 <cleanup_stdio+0x1e>
 800791c:	4620      	mov	r0, r4
 800791e:	f001 fda1 	bl	8009464 <_fflush_r>
 8007922:	68e1      	ldr	r1, [r4, #12]
 8007924:	4b06      	ldr	r3, [pc, #24]	; (8007940 <cleanup_stdio+0x3c>)
 8007926:	4299      	cmp	r1, r3
 8007928:	d004      	beq.n	8007934 <cleanup_stdio+0x30>
 800792a:	4620      	mov	r0, r4
 800792c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007930:	f001 bd98 	b.w	8009464 <_fflush_r>
 8007934:	bd10      	pop	{r4, pc}
 8007936:	bf00      	nop
 8007938:	200004f4 	.word	0x200004f4
 800793c:	2000055c 	.word	0x2000055c
 8007940:	200005c4 	.word	0x200005c4

08007944 <global_stdio_init.part.0>:
 8007944:	b510      	push	{r4, lr}
 8007946:	4b0b      	ldr	r3, [pc, #44]	; (8007974 <global_stdio_init.part.0+0x30>)
 8007948:	4c0b      	ldr	r4, [pc, #44]	; (8007978 <global_stdio_init.part.0+0x34>)
 800794a:	4a0c      	ldr	r2, [pc, #48]	; (800797c <global_stdio_init.part.0+0x38>)
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	4620      	mov	r0, r4
 8007950:	2200      	movs	r2, #0
 8007952:	2104      	movs	r1, #4
 8007954:	f7ff ffa6 	bl	80078a4 <std>
 8007958:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800795c:	2201      	movs	r2, #1
 800795e:	2109      	movs	r1, #9
 8007960:	f7ff ffa0 	bl	80078a4 <std>
 8007964:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007968:	2202      	movs	r2, #2
 800796a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800796e:	2112      	movs	r1, #18
 8007970:	f7ff bf98 	b.w	80078a4 <std>
 8007974:	2000062c 	.word	0x2000062c
 8007978:	200004f4 	.word	0x200004f4
 800797c:	080078ed 	.word	0x080078ed

08007980 <__sfp_lock_acquire>:
 8007980:	4801      	ldr	r0, [pc, #4]	; (8007988 <__sfp_lock_acquire+0x8>)
 8007982:	f000 b91f 	b.w	8007bc4 <__retarget_lock_acquire_recursive>
 8007986:	bf00      	nop
 8007988:	20000635 	.word	0x20000635

0800798c <__sfp_lock_release>:
 800798c:	4801      	ldr	r0, [pc, #4]	; (8007994 <__sfp_lock_release+0x8>)
 800798e:	f000 b91a 	b.w	8007bc6 <__retarget_lock_release_recursive>
 8007992:	bf00      	nop
 8007994:	20000635 	.word	0x20000635

08007998 <__sinit>:
 8007998:	b510      	push	{r4, lr}
 800799a:	4604      	mov	r4, r0
 800799c:	f7ff fff0 	bl	8007980 <__sfp_lock_acquire>
 80079a0:	6a23      	ldr	r3, [r4, #32]
 80079a2:	b11b      	cbz	r3, 80079ac <__sinit+0x14>
 80079a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079a8:	f7ff bff0 	b.w	800798c <__sfp_lock_release>
 80079ac:	4b04      	ldr	r3, [pc, #16]	; (80079c0 <__sinit+0x28>)
 80079ae:	6223      	str	r3, [r4, #32]
 80079b0:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <__sinit+0x2c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1f5      	bne.n	80079a4 <__sinit+0xc>
 80079b8:	f7ff ffc4 	bl	8007944 <global_stdio_init.part.0>
 80079bc:	e7f2      	b.n	80079a4 <__sinit+0xc>
 80079be:	bf00      	nop
 80079c0:	08007905 	.word	0x08007905
 80079c4:	2000062c 	.word	0x2000062c

080079c8 <_fwalk_sglue>:
 80079c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079cc:	4607      	mov	r7, r0
 80079ce:	4688      	mov	r8, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	2600      	movs	r6, #0
 80079d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079d8:	f1b9 0901 	subs.w	r9, r9, #1
 80079dc:	d505      	bpl.n	80079ea <_fwalk_sglue+0x22>
 80079de:	6824      	ldr	r4, [r4, #0]
 80079e0:	2c00      	cmp	r4, #0
 80079e2:	d1f7      	bne.n	80079d4 <_fwalk_sglue+0xc>
 80079e4:	4630      	mov	r0, r6
 80079e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079ea:	89ab      	ldrh	r3, [r5, #12]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d907      	bls.n	8007a00 <_fwalk_sglue+0x38>
 80079f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079f4:	3301      	adds	r3, #1
 80079f6:	d003      	beq.n	8007a00 <_fwalk_sglue+0x38>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c0      	blx	r8
 80079fe:	4306      	orrs	r6, r0
 8007a00:	3568      	adds	r5, #104	; 0x68
 8007a02:	e7e9      	b.n	80079d8 <_fwalk_sglue+0x10>

08007a04 <siprintf>:
 8007a04:	b40e      	push	{r1, r2, r3}
 8007a06:	b500      	push	{lr}
 8007a08:	b09c      	sub	sp, #112	; 0x70
 8007a0a:	ab1d      	add	r3, sp, #116	; 0x74
 8007a0c:	9002      	str	r0, [sp, #8]
 8007a0e:	9006      	str	r0, [sp, #24]
 8007a10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007a14:	4809      	ldr	r0, [pc, #36]	; (8007a3c <siprintf+0x38>)
 8007a16:	9107      	str	r1, [sp, #28]
 8007a18:	9104      	str	r1, [sp, #16]
 8007a1a:	4909      	ldr	r1, [pc, #36]	; (8007a40 <siprintf+0x3c>)
 8007a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a20:	9105      	str	r1, [sp, #20]
 8007a22:	6800      	ldr	r0, [r0, #0]
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	a902      	add	r1, sp, #8
 8007a28:	f001 fb98 	bl	800915c <_svfiprintf_r>
 8007a2c:	9b02      	ldr	r3, [sp, #8]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	b01c      	add	sp, #112	; 0x70
 8007a34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a38:	b003      	add	sp, #12
 8007a3a:	4770      	bx	lr
 8007a3c:	20000074 	.word	0x20000074
 8007a40:	ffff0208 	.word	0xffff0208

08007a44 <__sread>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	460c      	mov	r4, r1
 8007a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a4c:	f000 f86c 	bl	8007b28 <_read_r>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	bfab      	itete	ge
 8007a54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a56:	89a3      	ldrhlt	r3, [r4, #12]
 8007a58:	181b      	addge	r3, r3, r0
 8007a5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a5e:	bfac      	ite	ge
 8007a60:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a62:	81a3      	strhlt	r3, [r4, #12]
 8007a64:	bd10      	pop	{r4, pc}

08007a66 <__swrite>:
 8007a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6a:	461f      	mov	r7, r3
 8007a6c:	898b      	ldrh	r3, [r1, #12]
 8007a6e:	05db      	lsls	r3, r3, #23
 8007a70:	4605      	mov	r5, r0
 8007a72:	460c      	mov	r4, r1
 8007a74:	4616      	mov	r6, r2
 8007a76:	d505      	bpl.n	8007a84 <__swrite+0x1e>
 8007a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f000 f840 	bl	8007b04 <_lseek_r>
 8007a84:	89a3      	ldrh	r3, [r4, #12]
 8007a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a8e:	81a3      	strh	r3, [r4, #12]
 8007a90:	4632      	mov	r2, r6
 8007a92:	463b      	mov	r3, r7
 8007a94:	4628      	mov	r0, r5
 8007a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9a:	f000 b857 	b.w	8007b4c <_write_r>

08007a9e <__sseek>:
 8007a9e:	b510      	push	{r4, lr}
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa6:	f000 f82d 	bl	8007b04 <_lseek_r>
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	bf15      	itete	ne
 8007ab0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007ab2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007ab6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007aba:	81a3      	strheq	r3, [r4, #12]
 8007abc:	bf18      	it	ne
 8007abe:	81a3      	strhne	r3, [r4, #12]
 8007ac0:	bd10      	pop	{r4, pc}

08007ac2 <__sclose>:
 8007ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac6:	f000 b80d 	b.w	8007ae4 <_close_r>

08007aca <memset>:
 8007aca:	4402      	add	r2, r0
 8007acc:	4603      	mov	r3, r0
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d100      	bne.n	8007ad4 <memset+0xa>
 8007ad2:	4770      	bx	lr
 8007ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8007ad8:	e7f9      	b.n	8007ace <memset+0x4>
	...

08007adc <_localeconv_r>:
 8007adc:	4800      	ldr	r0, [pc, #0]	; (8007ae0 <_localeconv_r+0x4>)
 8007ade:	4770      	bx	lr
 8007ae0:	20000168 	.word	0x20000168

08007ae4 <_close_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d06      	ldr	r5, [pc, #24]	; (8007b00 <_close_r+0x1c>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	602b      	str	r3, [r5, #0]
 8007af0:	f7f9 fca3 	bl	800143a <_close>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_close_r+0x1a>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_close_r+0x1a>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	20000630 	.word	0x20000630

08007b04 <_lseek_r>:
 8007b04:	b538      	push	{r3, r4, r5, lr}
 8007b06:	4d07      	ldr	r5, [pc, #28]	; (8007b24 <_lseek_r+0x20>)
 8007b08:	4604      	mov	r4, r0
 8007b0a:	4608      	mov	r0, r1
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	2200      	movs	r2, #0
 8007b10:	602a      	str	r2, [r5, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	f7f9 fcb8 	bl	8001488 <_lseek>
 8007b18:	1c43      	adds	r3, r0, #1
 8007b1a:	d102      	bne.n	8007b22 <_lseek_r+0x1e>
 8007b1c:	682b      	ldr	r3, [r5, #0]
 8007b1e:	b103      	cbz	r3, 8007b22 <_lseek_r+0x1e>
 8007b20:	6023      	str	r3, [r4, #0]
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	20000630 	.word	0x20000630

08007b28 <_read_r>:
 8007b28:	b538      	push	{r3, r4, r5, lr}
 8007b2a:	4d07      	ldr	r5, [pc, #28]	; (8007b48 <_read_r+0x20>)
 8007b2c:	4604      	mov	r4, r0
 8007b2e:	4608      	mov	r0, r1
 8007b30:	4611      	mov	r1, r2
 8007b32:	2200      	movs	r2, #0
 8007b34:	602a      	str	r2, [r5, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	f7f9 fc46 	bl	80013c8 <_read>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d102      	bne.n	8007b46 <_read_r+0x1e>
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	b103      	cbz	r3, 8007b46 <_read_r+0x1e>
 8007b44:	6023      	str	r3, [r4, #0]
 8007b46:	bd38      	pop	{r3, r4, r5, pc}
 8007b48:	20000630 	.word	0x20000630

08007b4c <_write_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d07      	ldr	r5, [pc, #28]	; (8007b6c <_write_r+0x20>)
 8007b50:	4604      	mov	r4, r0
 8007b52:	4608      	mov	r0, r1
 8007b54:	4611      	mov	r1, r2
 8007b56:	2200      	movs	r2, #0
 8007b58:	602a      	str	r2, [r5, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f7f9 fc51 	bl	8001402 <_write>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_write_r+0x1e>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_write_r+0x1e>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20000630 	.word	0x20000630

08007b70 <__errno>:
 8007b70:	4b01      	ldr	r3, [pc, #4]	; (8007b78 <__errno+0x8>)
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	20000074 	.word	0x20000074

08007b7c <__libc_init_array>:
 8007b7c:	b570      	push	{r4, r5, r6, lr}
 8007b7e:	4d0d      	ldr	r5, [pc, #52]	; (8007bb4 <__libc_init_array+0x38>)
 8007b80:	4c0d      	ldr	r4, [pc, #52]	; (8007bb8 <__libc_init_array+0x3c>)
 8007b82:	1b64      	subs	r4, r4, r5
 8007b84:	10a4      	asrs	r4, r4, #2
 8007b86:	2600      	movs	r6, #0
 8007b88:	42a6      	cmp	r6, r4
 8007b8a:	d109      	bne.n	8007ba0 <__libc_init_array+0x24>
 8007b8c:	4d0b      	ldr	r5, [pc, #44]	; (8007bbc <__libc_init_array+0x40>)
 8007b8e:	4c0c      	ldr	r4, [pc, #48]	; (8007bc0 <__libc_init_array+0x44>)
 8007b90:	f002 f80c 	bl	8009bac <_init>
 8007b94:	1b64      	subs	r4, r4, r5
 8007b96:	10a4      	asrs	r4, r4, #2
 8007b98:	2600      	movs	r6, #0
 8007b9a:	42a6      	cmp	r6, r4
 8007b9c:	d105      	bne.n	8007baa <__libc_init_array+0x2e>
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ba4:	4798      	blx	r3
 8007ba6:	3601      	adds	r6, #1
 8007ba8:	e7ee      	b.n	8007b88 <__libc_init_array+0xc>
 8007baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bae:	4798      	blx	r3
 8007bb0:	3601      	adds	r6, #1
 8007bb2:	e7f2      	b.n	8007b9a <__libc_init_array+0x1e>
 8007bb4:	080a01cc 	.word	0x080a01cc
 8007bb8:	080a01cc 	.word	0x080a01cc
 8007bbc:	080a01cc 	.word	0x080a01cc
 8007bc0:	080a01d0 	.word	0x080a01d0

08007bc4 <__retarget_lock_acquire_recursive>:
 8007bc4:	4770      	bx	lr

08007bc6 <__retarget_lock_release_recursive>:
 8007bc6:	4770      	bx	lr

08007bc8 <quorem>:
 8007bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	6903      	ldr	r3, [r0, #16]
 8007bce:	690c      	ldr	r4, [r1, #16]
 8007bd0:	42a3      	cmp	r3, r4
 8007bd2:	4607      	mov	r7, r0
 8007bd4:	db7e      	blt.n	8007cd4 <quorem+0x10c>
 8007bd6:	3c01      	subs	r4, #1
 8007bd8:	f101 0814 	add.w	r8, r1, #20
 8007bdc:	f100 0514 	add.w	r5, r0, #20
 8007be0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007be4:	9301      	str	r3, [sp, #4]
 8007be6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bf6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bfa:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bfe:	d331      	bcc.n	8007c64 <quorem+0x9c>
 8007c00:	f04f 0e00 	mov.w	lr, #0
 8007c04:	4640      	mov	r0, r8
 8007c06:	46ac      	mov	ip, r5
 8007c08:	46f2      	mov	sl, lr
 8007c0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8007c0e:	b293      	uxth	r3, r2
 8007c10:	fb06 e303 	mla	r3, r6, r3, lr
 8007c14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c18:	0c1a      	lsrs	r2, r3, #16
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	ebaa 0303 	sub.w	r3, sl, r3
 8007c20:	f8dc a000 	ldr.w	sl, [ip]
 8007c24:	fa13 f38a 	uxtah	r3, r3, sl
 8007c28:	fb06 220e 	mla	r2, r6, lr, r2
 8007c2c:	9300      	str	r3, [sp, #0]
 8007c2e:	9b00      	ldr	r3, [sp, #0]
 8007c30:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c34:	b292      	uxth	r2, r2
 8007c36:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c3a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c3e:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c42:	4581      	cmp	r9, r0
 8007c44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c48:	f84c 3b04 	str.w	r3, [ip], #4
 8007c4c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c50:	d2db      	bcs.n	8007c0a <quorem+0x42>
 8007c52:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c56:	b92b      	cbnz	r3, 8007c64 <quorem+0x9c>
 8007c58:	9b01      	ldr	r3, [sp, #4]
 8007c5a:	3b04      	subs	r3, #4
 8007c5c:	429d      	cmp	r5, r3
 8007c5e:	461a      	mov	r2, r3
 8007c60:	d32c      	bcc.n	8007cbc <quorem+0xf4>
 8007c62:	613c      	str	r4, [r7, #16]
 8007c64:	4638      	mov	r0, r7
 8007c66:	f001 f91f 	bl	8008ea8 <__mcmp>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	db22      	blt.n	8007cb4 <quorem+0xec>
 8007c6e:	3601      	adds	r6, #1
 8007c70:	4629      	mov	r1, r5
 8007c72:	2000      	movs	r0, #0
 8007c74:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c78:	f8d1 c000 	ldr.w	ip, [r1]
 8007c7c:	b293      	uxth	r3, r2
 8007c7e:	1ac3      	subs	r3, r0, r3
 8007c80:	0c12      	lsrs	r2, r2, #16
 8007c82:	fa13 f38c 	uxtah	r3, r3, ip
 8007c86:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c94:	45c1      	cmp	r9, r8
 8007c96:	f841 3b04 	str.w	r3, [r1], #4
 8007c9a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c9e:	d2e9      	bcs.n	8007c74 <quorem+0xac>
 8007ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ca4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ca8:	b922      	cbnz	r2, 8007cb4 <quorem+0xec>
 8007caa:	3b04      	subs	r3, #4
 8007cac:	429d      	cmp	r5, r3
 8007cae:	461a      	mov	r2, r3
 8007cb0:	d30a      	bcc.n	8007cc8 <quorem+0x100>
 8007cb2:	613c      	str	r4, [r7, #16]
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	b003      	add	sp, #12
 8007cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cbc:	6812      	ldr	r2, [r2, #0]
 8007cbe:	3b04      	subs	r3, #4
 8007cc0:	2a00      	cmp	r2, #0
 8007cc2:	d1ce      	bne.n	8007c62 <quorem+0x9a>
 8007cc4:	3c01      	subs	r4, #1
 8007cc6:	e7c9      	b.n	8007c5c <quorem+0x94>
 8007cc8:	6812      	ldr	r2, [r2, #0]
 8007cca:	3b04      	subs	r3, #4
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	d1f0      	bne.n	8007cb2 <quorem+0xea>
 8007cd0:	3c01      	subs	r4, #1
 8007cd2:	e7eb      	b.n	8007cac <quorem+0xe4>
 8007cd4:	2000      	movs	r0, #0
 8007cd6:	e7ee      	b.n	8007cb6 <quorem+0xee>

08007cd8 <_dtoa_r>:
 8007cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cdc:	ed2d 8b02 	vpush	{d8}
 8007ce0:	69c5      	ldr	r5, [r0, #28]
 8007ce2:	b091      	sub	sp, #68	; 0x44
 8007ce4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ce8:	ec59 8b10 	vmov	r8, r9, d0
 8007cec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007cee:	9106      	str	r1, [sp, #24]
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	9208      	str	r2, [sp, #32]
 8007cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8007cf6:	b975      	cbnz	r5, 8007d16 <_dtoa_r+0x3e>
 8007cf8:	2010      	movs	r0, #16
 8007cfa:	f000 fda5 	bl	8008848 <malloc>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	61f0      	str	r0, [r6, #28]
 8007d02:	b920      	cbnz	r0, 8007d0e <_dtoa_r+0x36>
 8007d04:	4ba6      	ldr	r3, [pc, #664]	; (8007fa0 <_dtoa_r+0x2c8>)
 8007d06:	21ef      	movs	r1, #239	; 0xef
 8007d08:	48a6      	ldr	r0, [pc, #664]	; (8007fa4 <_dtoa_r+0x2cc>)
 8007d0a:	f001 fc0b 	bl	8009524 <__assert_func>
 8007d0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d12:	6005      	str	r5, [r0, #0]
 8007d14:	60c5      	str	r5, [r0, #12]
 8007d16:	69f3      	ldr	r3, [r6, #28]
 8007d18:	6819      	ldr	r1, [r3, #0]
 8007d1a:	b151      	cbz	r1, 8007d32 <_dtoa_r+0x5a>
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	604a      	str	r2, [r1, #4]
 8007d20:	2301      	movs	r3, #1
 8007d22:	4093      	lsls	r3, r2
 8007d24:	608b      	str	r3, [r1, #8]
 8007d26:	4630      	mov	r0, r6
 8007d28:	f000 fe82 	bl	8008a30 <_Bfree>
 8007d2c:	69f3      	ldr	r3, [r6, #28]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	f1b9 0300 	subs.w	r3, r9, #0
 8007d36:	bfbb      	ittet	lt
 8007d38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d3c:	9303      	strlt	r3, [sp, #12]
 8007d3e:	2300      	movge	r3, #0
 8007d40:	2201      	movlt	r2, #1
 8007d42:	bfac      	ite	ge
 8007d44:	6023      	strge	r3, [r4, #0]
 8007d46:	6022      	strlt	r2, [r4, #0]
 8007d48:	4b97      	ldr	r3, [pc, #604]	; (8007fa8 <_dtoa_r+0x2d0>)
 8007d4a:	9c03      	ldr	r4, [sp, #12]
 8007d4c:	43a3      	bics	r3, r4
 8007d4e:	d11c      	bne.n	8007d8a <_dtoa_r+0xb2>
 8007d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d52:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007d5c:	ea53 0308 	orrs.w	r3, r3, r8
 8007d60:	f000 84fb 	beq.w	800875a <_dtoa_r+0xa82>
 8007d64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d66:	b963      	cbnz	r3, 8007d82 <_dtoa_r+0xaa>
 8007d68:	4b90      	ldr	r3, [pc, #576]	; (8007fac <_dtoa_r+0x2d4>)
 8007d6a:	e020      	b.n	8007dae <_dtoa_r+0xd6>
 8007d6c:	4b90      	ldr	r3, [pc, #576]	; (8007fb0 <_dtoa_r+0x2d8>)
 8007d6e:	9301      	str	r3, [sp, #4]
 8007d70:	3308      	adds	r3, #8
 8007d72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	9801      	ldr	r0, [sp, #4]
 8007d78:	b011      	add	sp, #68	; 0x44
 8007d7a:	ecbd 8b02 	vpop	{d8}
 8007d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d82:	4b8a      	ldr	r3, [pc, #552]	; (8007fac <_dtoa_r+0x2d4>)
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	3303      	adds	r3, #3
 8007d88:	e7f3      	b.n	8007d72 <_dtoa_r+0x9a>
 8007d8a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007d8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d96:	d10c      	bne.n	8007db2 <_dtoa_r+0xda>
 8007d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 84d7 	beq.w	8008754 <_dtoa_r+0xa7c>
 8007da6:	4b83      	ldr	r3, [pc, #524]	; (8007fb4 <_dtoa_r+0x2dc>)
 8007da8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	9301      	str	r3, [sp, #4]
 8007db0:	e7e1      	b.n	8007d76 <_dtoa_r+0x9e>
 8007db2:	aa0e      	add	r2, sp, #56	; 0x38
 8007db4:	a90f      	add	r1, sp, #60	; 0x3c
 8007db6:	4630      	mov	r0, r6
 8007db8:	eeb0 0b48 	vmov.f64	d0, d8
 8007dbc:	f001 f91a 	bl	8008ff4 <__d2b>
 8007dc0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007dc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d046      	beq.n	8007e5a <_dtoa_r+0x182>
 8007dcc:	eeb0 7b48 	vmov.f64	d7, d8
 8007dd0:	ee18 1a90 	vmov	r1, s17
 8007dd4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007dd8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007ddc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007de0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007de4:	2000      	movs	r0, #0
 8007de6:	ee07 1a90 	vmov	s15, r1
 8007dea:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8007dee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007f88 <_dtoa_r+0x2b0>
 8007df2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007df6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007f90 <_dtoa_r+0x2b8>
 8007dfa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007dfe:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007f98 <_dtoa_r+0x2c0>
 8007e02:	ee07 3a90 	vmov	s15, r3
 8007e06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007e0a:	eeb0 7b46 	vmov.f64	d7, d6
 8007e0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007e12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007e16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1e:	ee16 ba90 	vmov	fp, s13
 8007e22:	9009      	str	r0, [sp, #36]	; 0x24
 8007e24:	d508      	bpl.n	8007e38 <_dtoa_r+0x160>
 8007e26:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007e2a:	eeb4 6b47 	vcmp.f64	d6, d7
 8007e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e32:	bf18      	it	ne
 8007e34:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007e38:	f1bb 0f16 	cmp.w	fp, #22
 8007e3c:	d82b      	bhi.n	8007e96 <_dtoa_r+0x1be>
 8007e3e:	495e      	ldr	r1, [pc, #376]	; (8007fb8 <_dtoa_r+0x2e0>)
 8007e40:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007e44:	ed91 7b00 	vldr	d7, [r1]
 8007e48:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e50:	d501      	bpl.n	8007e56 <_dtoa_r+0x17e>
 8007e52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e56:	2100      	movs	r1, #0
 8007e58:	e01e      	b.n	8007e98 <_dtoa_r+0x1c0>
 8007e5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007e62:	2920      	cmp	r1, #32
 8007e64:	bfc1      	itttt	gt
 8007e66:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007e6a:	408c      	lslgt	r4, r1
 8007e6c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007e70:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007e74:	bfd6      	itet	le
 8007e76:	f1c1 0120 	rsble	r1, r1, #32
 8007e7a:	4321      	orrgt	r1, r4
 8007e7c:	fa08 f101 	lslle.w	r1, r8, r1
 8007e80:	ee07 1a90 	vmov	s15, r1
 8007e84:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	ee17 1a90 	vmov	r1, s15
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007e94:	e7a7      	b.n	8007de6 <_dtoa_r+0x10e>
 8007e96:	2101      	movs	r1, #1
 8007e98:	1ad2      	subs	r2, r2, r3
 8007e9a:	1e53      	subs	r3, r2, #1
 8007e9c:	9305      	str	r3, [sp, #20]
 8007e9e:	bf45      	ittet	mi
 8007ea0:	f1c2 0301 	rsbmi	r3, r2, #1
 8007ea4:	9304      	strmi	r3, [sp, #16]
 8007ea6:	2300      	movpl	r3, #0
 8007ea8:	2300      	movmi	r3, #0
 8007eaa:	bf4c      	ite	mi
 8007eac:	9305      	strmi	r3, [sp, #20]
 8007eae:	9304      	strpl	r3, [sp, #16]
 8007eb0:	f1bb 0f00 	cmp.w	fp, #0
 8007eb4:	910b      	str	r1, [sp, #44]	; 0x2c
 8007eb6:	db18      	blt.n	8007eea <_dtoa_r+0x212>
 8007eb8:	9b05      	ldr	r3, [sp, #20]
 8007eba:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007ebe:	445b      	add	r3, fp
 8007ec0:	9305      	str	r3, [sp, #20]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	9a06      	ldr	r2, [sp, #24]
 8007ec6:	2a09      	cmp	r2, #9
 8007ec8:	d848      	bhi.n	8007f5c <_dtoa_r+0x284>
 8007eca:	2a05      	cmp	r2, #5
 8007ecc:	bfc4      	itt	gt
 8007ece:	3a04      	subgt	r2, #4
 8007ed0:	9206      	strgt	r2, [sp, #24]
 8007ed2:	9a06      	ldr	r2, [sp, #24]
 8007ed4:	f1a2 0202 	sub.w	r2, r2, #2
 8007ed8:	bfcc      	ite	gt
 8007eda:	2400      	movgt	r4, #0
 8007edc:	2401      	movle	r4, #1
 8007ede:	2a03      	cmp	r2, #3
 8007ee0:	d847      	bhi.n	8007f72 <_dtoa_r+0x29a>
 8007ee2:	e8df f002 	tbb	[pc, r2]
 8007ee6:	2d0b      	.short	0x2d0b
 8007ee8:	392b      	.short	0x392b
 8007eea:	9b04      	ldr	r3, [sp, #16]
 8007eec:	2200      	movs	r2, #0
 8007eee:	eba3 030b 	sub.w	r3, r3, fp
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	920a      	str	r2, [sp, #40]	; 0x28
 8007ef6:	f1cb 0300 	rsb	r3, fp, #0
 8007efa:	e7e3      	b.n	8007ec4 <_dtoa_r+0x1ec>
 8007efc:	2200      	movs	r2, #0
 8007efe:	9207      	str	r2, [sp, #28]
 8007f00:	9a08      	ldr	r2, [sp, #32]
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	dc38      	bgt.n	8007f78 <_dtoa_r+0x2a0>
 8007f06:	f04f 0a01 	mov.w	sl, #1
 8007f0a:	46d1      	mov	r9, sl
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	f8cd a020 	str.w	sl, [sp, #32]
 8007f12:	69f7      	ldr	r7, [r6, #28]
 8007f14:	2100      	movs	r1, #0
 8007f16:	2004      	movs	r0, #4
 8007f18:	f100 0c14 	add.w	ip, r0, #20
 8007f1c:	4594      	cmp	ip, r2
 8007f1e:	d930      	bls.n	8007f82 <_dtoa_r+0x2aa>
 8007f20:	6079      	str	r1, [r7, #4]
 8007f22:	4630      	mov	r0, r6
 8007f24:	930d      	str	r3, [sp, #52]	; 0x34
 8007f26:	f000 fd43 	bl	80089b0 <_Balloc>
 8007f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f2c:	9001      	str	r0, [sp, #4]
 8007f2e:	4602      	mov	r2, r0
 8007f30:	2800      	cmp	r0, #0
 8007f32:	d145      	bne.n	8007fc0 <_dtoa_r+0x2e8>
 8007f34:	4b21      	ldr	r3, [pc, #132]	; (8007fbc <_dtoa_r+0x2e4>)
 8007f36:	f240 11af 	movw	r1, #431	; 0x1af
 8007f3a:	e6e5      	b.n	8007d08 <_dtoa_r+0x30>
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	e7de      	b.n	8007efe <_dtoa_r+0x226>
 8007f40:	2200      	movs	r2, #0
 8007f42:	9207      	str	r2, [sp, #28]
 8007f44:	9a08      	ldr	r2, [sp, #32]
 8007f46:	eb0b 0a02 	add.w	sl, fp, r2
 8007f4a:	f10a 0901 	add.w	r9, sl, #1
 8007f4e:	464a      	mov	r2, r9
 8007f50:	2a01      	cmp	r2, #1
 8007f52:	bfb8      	it	lt
 8007f54:	2201      	movlt	r2, #1
 8007f56:	e7dc      	b.n	8007f12 <_dtoa_r+0x23a>
 8007f58:	2201      	movs	r2, #1
 8007f5a:	e7f2      	b.n	8007f42 <_dtoa_r+0x26a>
 8007f5c:	2401      	movs	r4, #1
 8007f5e:	2200      	movs	r2, #0
 8007f60:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007f64:	f04f 3aff 	mov.w	sl, #4294967295
 8007f68:	2100      	movs	r1, #0
 8007f6a:	46d1      	mov	r9, sl
 8007f6c:	2212      	movs	r2, #18
 8007f6e:	9108      	str	r1, [sp, #32]
 8007f70:	e7cf      	b.n	8007f12 <_dtoa_r+0x23a>
 8007f72:	2201      	movs	r2, #1
 8007f74:	9207      	str	r2, [sp, #28]
 8007f76:	e7f5      	b.n	8007f64 <_dtoa_r+0x28c>
 8007f78:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f7c:	46d1      	mov	r9, sl
 8007f7e:	4652      	mov	r2, sl
 8007f80:	e7c7      	b.n	8007f12 <_dtoa_r+0x23a>
 8007f82:	3101      	adds	r1, #1
 8007f84:	0040      	lsls	r0, r0, #1
 8007f86:	e7c7      	b.n	8007f18 <_dtoa_r+0x240>
 8007f88:	636f4361 	.word	0x636f4361
 8007f8c:	3fd287a7 	.word	0x3fd287a7
 8007f90:	8b60c8b3 	.word	0x8b60c8b3
 8007f94:	3fc68a28 	.word	0x3fc68a28
 8007f98:	509f79fb 	.word	0x509f79fb
 8007f9c:	3fd34413 	.word	0x3fd34413
 8007fa0:	0809fe95 	.word	0x0809fe95
 8007fa4:	0809feac 	.word	0x0809feac
 8007fa8:	7ff00000 	.word	0x7ff00000
 8007fac:	0809fe91 	.word	0x0809fe91
 8007fb0:	0809fe88 	.word	0x0809fe88
 8007fb4:	0809fe65 	.word	0x0809fe65
 8007fb8:	0809ff98 	.word	0x0809ff98
 8007fbc:	0809ff04 	.word	0x0809ff04
 8007fc0:	69f2      	ldr	r2, [r6, #28]
 8007fc2:	9901      	ldr	r1, [sp, #4]
 8007fc4:	6011      	str	r1, [r2, #0]
 8007fc6:	f1b9 0f0e 	cmp.w	r9, #14
 8007fca:	d86c      	bhi.n	80080a6 <_dtoa_r+0x3ce>
 8007fcc:	2c00      	cmp	r4, #0
 8007fce:	d06a      	beq.n	80080a6 <_dtoa_r+0x3ce>
 8007fd0:	f1bb 0f00 	cmp.w	fp, #0
 8007fd4:	f340 80a0 	ble.w	8008118 <_dtoa_r+0x440>
 8007fd8:	4ac1      	ldr	r2, [pc, #772]	; (80082e0 <_dtoa_r+0x608>)
 8007fda:	f00b 010f 	and.w	r1, fp, #15
 8007fde:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007fe2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007fe6:	ed92 7b00 	vldr	d7, [r2]
 8007fea:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007fee:	f000 8087 	beq.w	8008100 <_dtoa_r+0x428>
 8007ff2:	49bc      	ldr	r1, [pc, #752]	; (80082e4 <_dtoa_r+0x60c>)
 8007ff4:	ed91 6b08 	vldr	d6, [r1, #32]
 8007ff8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007ffc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008000:	f002 020f 	and.w	r2, r2, #15
 8008004:	2103      	movs	r1, #3
 8008006:	48b7      	ldr	r0, [pc, #732]	; (80082e4 <_dtoa_r+0x60c>)
 8008008:	2a00      	cmp	r2, #0
 800800a:	d17b      	bne.n	8008104 <_dtoa_r+0x42c>
 800800c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008010:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008014:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800801a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800801e:	2a00      	cmp	r2, #0
 8008020:	f000 80a0 	beq.w	8008164 <_dtoa_r+0x48c>
 8008024:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008028:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800802c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008030:	f140 8098 	bpl.w	8008164 <_dtoa_r+0x48c>
 8008034:	f1b9 0f00 	cmp.w	r9, #0
 8008038:	f000 8094 	beq.w	8008164 <_dtoa_r+0x48c>
 800803c:	f1ba 0f00 	cmp.w	sl, #0
 8008040:	dd2f      	ble.n	80080a2 <_dtoa_r+0x3ca>
 8008042:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008046:	ee27 7b06 	vmul.f64	d7, d7, d6
 800804a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800804e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8008052:	3101      	adds	r1, #1
 8008054:	4654      	mov	r4, sl
 8008056:	ed9d 6b02 	vldr	d6, [sp, #8]
 800805a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800805e:	ee07 1a90 	vmov	s15, r1
 8008062:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008066:	eea7 5b06 	vfma.f64	d5, d7, d6
 800806a:	ee15 7a90 	vmov	r7, s11
 800806e:	ec51 0b15 	vmov	r0, r1, d5
 8008072:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8008076:	2c00      	cmp	r4, #0
 8008078:	d177      	bne.n	800816a <_dtoa_r+0x492>
 800807a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800807e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008082:	ec41 0b17 	vmov	d7, r0, r1
 8008086:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800808a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808e:	f300 826a 	bgt.w	8008566 <_dtoa_r+0x88e>
 8008092:	eeb1 7b47 	vneg.f64	d7, d7
 8008096:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800809a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809e:	f100 8260 	bmi.w	8008562 <_dtoa_r+0x88a>
 80080a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80080a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080a8:	2a00      	cmp	r2, #0
 80080aa:	f2c0 811d 	blt.w	80082e8 <_dtoa_r+0x610>
 80080ae:	f1bb 0f0e 	cmp.w	fp, #14
 80080b2:	f300 8119 	bgt.w	80082e8 <_dtoa_r+0x610>
 80080b6:	4b8a      	ldr	r3, [pc, #552]	; (80082e0 <_dtoa_r+0x608>)
 80080b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080bc:	ed93 6b00 	vldr	d6, [r3]
 80080c0:	9b08      	ldr	r3, [sp, #32]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f280 80b7 	bge.w	8008236 <_dtoa_r+0x55e>
 80080c8:	f1b9 0f00 	cmp.w	r9, #0
 80080cc:	f300 80b3 	bgt.w	8008236 <_dtoa_r+0x55e>
 80080d0:	f040 8246 	bne.w	8008560 <_dtoa_r+0x888>
 80080d4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80080d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80080dc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080e0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e8:	464c      	mov	r4, r9
 80080ea:	464f      	mov	r7, r9
 80080ec:	f280 821c 	bge.w	8008528 <_dtoa_r+0x850>
 80080f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080f4:	2331      	movs	r3, #49	; 0x31
 80080f6:	f808 3b01 	strb.w	r3, [r8], #1
 80080fa:	f10b 0b01 	add.w	fp, fp, #1
 80080fe:	e218      	b.n	8008532 <_dtoa_r+0x85a>
 8008100:	2102      	movs	r1, #2
 8008102:	e780      	b.n	8008006 <_dtoa_r+0x32e>
 8008104:	07d4      	lsls	r4, r2, #31
 8008106:	d504      	bpl.n	8008112 <_dtoa_r+0x43a>
 8008108:	ed90 6b00 	vldr	d6, [r0]
 800810c:	3101      	adds	r1, #1
 800810e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008112:	1052      	asrs	r2, r2, #1
 8008114:	3008      	adds	r0, #8
 8008116:	e777      	b.n	8008008 <_dtoa_r+0x330>
 8008118:	d022      	beq.n	8008160 <_dtoa_r+0x488>
 800811a:	f1cb 0200 	rsb	r2, fp, #0
 800811e:	4970      	ldr	r1, [pc, #448]	; (80082e0 <_dtoa_r+0x608>)
 8008120:	f002 000f 	and.w	r0, r2, #15
 8008124:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008128:	ed91 7b00 	vldr	d7, [r1]
 800812c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008130:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008134:	486b      	ldr	r0, [pc, #428]	; (80082e4 <_dtoa_r+0x60c>)
 8008136:	1112      	asrs	r2, r2, #4
 8008138:	2400      	movs	r4, #0
 800813a:	2102      	movs	r1, #2
 800813c:	b92a      	cbnz	r2, 800814a <_dtoa_r+0x472>
 800813e:	2c00      	cmp	r4, #0
 8008140:	f43f af6a 	beq.w	8008018 <_dtoa_r+0x340>
 8008144:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008148:	e766      	b.n	8008018 <_dtoa_r+0x340>
 800814a:	07d7      	lsls	r7, r2, #31
 800814c:	d505      	bpl.n	800815a <_dtoa_r+0x482>
 800814e:	ed90 6b00 	vldr	d6, [r0]
 8008152:	3101      	adds	r1, #1
 8008154:	2401      	movs	r4, #1
 8008156:	ee27 7b06 	vmul.f64	d7, d7, d6
 800815a:	1052      	asrs	r2, r2, #1
 800815c:	3008      	adds	r0, #8
 800815e:	e7ed      	b.n	800813c <_dtoa_r+0x464>
 8008160:	2102      	movs	r1, #2
 8008162:	e759      	b.n	8008018 <_dtoa_r+0x340>
 8008164:	465a      	mov	r2, fp
 8008166:	464c      	mov	r4, r9
 8008168:	e775      	b.n	8008056 <_dtoa_r+0x37e>
 800816a:	ec41 0b17 	vmov	d7, r0, r1
 800816e:	495c      	ldr	r1, [pc, #368]	; (80082e0 <_dtoa_r+0x608>)
 8008170:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8008174:	ed11 4b02 	vldr	d4, [r1, #-8]
 8008178:	9901      	ldr	r1, [sp, #4]
 800817a:	440c      	add	r4, r1
 800817c:	9907      	ldr	r1, [sp, #28]
 800817e:	b351      	cbz	r1, 80081d6 <_dtoa_r+0x4fe>
 8008180:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008184:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008188:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800818c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008190:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008194:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008198:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800819c:	ee14 1a90 	vmov	r1, s9
 80081a0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80081a4:	3130      	adds	r1, #48	; 0x30
 80081a6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80081aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80081ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b2:	f808 1b01 	strb.w	r1, [r8], #1
 80081b6:	d439      	bmi.n	800822c <_dtoa_r+0x554>
 80081b8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80081bc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80081c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c4:	d472      	bmi.n	80082ac <_dtoa_r+0x5d4>
 80081c6:	45a0      	cmp	r8, r4
 80081c8:	f43f af6b 	beq.w	80080a2 <_dtoa_r+0x3ca>
 80081cc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80081d0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80081d4:	e7e0      	b.n	8008198 <_dtoa_r+0x4c0>
 80081d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80081de:	4620      	mov	r0, r4
 80081e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80081e4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80081e8:	ee14 1a90 	vmov	r1, s9
 80081ec:	3130      	adds	r1, #48	; 0x30
 80081ee:	f808 1b01 	strb.w	r1, [r8], #1
 80081f2:	45a0      	cmp	r8, r4
 80081f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80081f8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80081fc:	d118      	bne.n	8008230 <_dtoa_r+0x558>
 80081fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008202:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008206:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800820a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820e:	dc4d      	bgt.n	80082ac <_dtoa_r+0x5d4>
 8008210:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008214:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800821c:	f57f af41 	bpl.w	80080a2 <_dtoa_r+0x3ca>
 8008220:	4680      	mov	r8, r0
 8008222:	3801      	subs	r0, #1
 8008224:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008228:	2b30      	cmp	r3, #48	; 0x30
 800822a:	d0f9      	beq.n	8008220 <_dtoa_r+0x548>
 800822c:	4693      	mov	fp, r2
 800822e:	e02a      	b.n	8008286 <_dtoa_r+0x5ae>
 8008230:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008234:	e7d6      	b.n	80081e4 <_dtoa_r+0x50c>
 8008236:	ed9d 7b02 	vldr	d7, [sp, #8]
 800823a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800823e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008242:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008246:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800824a:	ee15 3a10 	vmov	r3, s10
 800824e:	3330      	adds	r3, #48	; 0x30
 8008250:	f808 3b01 	strb.w	r3, [r8], #1
 8008254:	9b01      	ldr	r3, [sp, #4]
 8008256:	eba8 0303 	sub.w	r3, r8, r3
 800825a:	4599      	cmp	r9, r3
 800825c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008260:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008264:	d133      	bne.n	80082ce <_dtoa_r+0x5f6>
 8008266:	ee37 7b07 	vadd.f64	d7, d7, d7
 800826a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800826e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008272:	dc1a      	bgt.n	80082aa <_dtoa_r+0x5d2>
 8008274:	eeb4 7b46 	vcmp.f64	d7, d6
 8008278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800827c:	d103      	bne.n	8008286 <_dtoa_r+0x5ae>
 800827e:	ee15 3a10 	vmov	r3, s10
 8008282:	07d9      	lsls	r1, r3, #31
 8008284:	d411      	bmi.n	80082aa <_dtoa_r+0x5d2>
 8008286:	4629      	mov	r1, r5
 8008288:	4630      	mov	r0, r6
 800828a:	f000 fbd1 	bl	8008a30 <_Bfree>
 800828e:	2300      	movs	r3, #0
 8008290:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008292:	f888 3000 	strb.w	r3, [r8]
 8008296:	f10b 0301 	add.w	r3, fp, #1
 800829a:	6013      	str	r3, [r2, #0]
 800829c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f43f ad69 	beq.w	8007d76 <_dtoa_r+0x9e>
 80082a4:	f8c3 8000 	str.w	r8, [r3]
 80082a8:	e565      	b.n	8007d76 <_dtoa_r+0x9e>
 80082aa:	465a      	mov	r2, fp
 80082ac:	4643      	mov	r3, r8
 80082ae:	4698      	mov	r8, r3
 80082b0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80082b4:	2939      	cmp	r1, #57	; 0x39
 80082b6:	d106      	bne.n	80082c6 <_dtoa_r+0x5ee>
 80082b8:	9901      	ldr	r1, [sp, #4]
 80082ba:	4299      	cmp	r1, r3
 80082bc:	d1f7      	bne.n	80082ae <_dtoa_r+0x5d6>
 80082be:	9801      	ldr	r0, [sp, #4]
 80082c0:	2130      	movs	r1, #48	; 0x30
 80082c2:	3201      	adds	r2, #1
 80082c4:	7001      	strb	r1, [r0, #0]
 80082c6:	7819      	ldrb	r1, [r3, #0]
 80082c8:	3101      	adds	r1, #1
 80082ca:	7019      	strb	r1, [r3, #0]
 80082cc:	e7ae      	b.n	800822c <_dtoa_r+0x554>
 80082ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80082d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80082d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082da:	d1b2      	bne.n	8008242 <_dtoa_r+0x56a>
 80082dc:	e7d3      	b.n	8008286 <_dtoa_r+0x5ae>
 80082de:	bf00      	nop
 80082e0:	0809ff98 	.word	0x0809ff98
 80082e4:	0809ff70 	.word	0x0809ff70
 80082e8:	9907      	ldr	r1, [sp, #28]
 80082ea:	2900      	cmp	r1, #0
 80082ec:	f000 80d0 	beq.w	8008490 <_dtoa_r+0x7b8>
 80082f0:	9906      	ldr	r1, [sp, #24]
 80082f2:	2901      	cmp	r1, #1
 80082f4:	f300 80b4 	bgt.w	8008460 <_dtoa_r+0x788>
 80082f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082fa:	2900      	cmp	r1, #0
 80082fc:	f000 80ac 	beq.w	8008458 <_dtoa_r+0x780>
 8008300:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008304:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008308:	461c      	mov	r4, r3
 800830a:	9309      	str	r3, [sp, #36]	; 0x24
 800830c:	9b04      	ldr	r3, [sp, #16]
 800830e:	4413      	add	r3, r2
 8008310:	9304      	str	r3, [sp, #16]
 8008312:	9b05      	ldr	r3, [sp, #20]
 8008314:	2101      	movs	r1, #1
 8008316:	4413      	add	r3, r2
 8008318:	4630      	mov	r0, r6
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	f000 fc3e 	bl	8008b9c <__i2b>
 8008320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008322:	4607      	mov	r7, r0
 8008324:	f1b8 0f00 	cmp.w	r8, #0
 8008328:	d00d      	beq.n	8008346 <_dtoa_r+0x66e>
 800832a:	9a05      	ldr	r2, [sp, #20]
 800832c:	2a00      	cmp	r2, #0
 800832e:	dd0a      	ble.n	8008346 <_dtoa_r+0x66e>
 8008330:	4542      	cmp	r2, r8
 8008332:	9904      	ldr	r1, [sp, #16]
 8008334:	bfa8      	it	ge
 8008336:	4642      	movge	r2, r8
 8008338:	1a89      	subs	r1, r1, r2
 800833a:	9104      	str	r1, [sp, #16]
 800833c:	9905      	ldr	r1, [sp, #20]
 800833e:	eba8 0802 	sub.w	r8, r8, r2
 8008342:	1a8a      	subs	r2, r1, r2
 8008344:	9205      	str	r2, [sp, #20]
 8008346:	b303      	cbz	r3, 800838a <_dtoa_r+0x6b2>
 8008348:	9a07      	ldr	r2, [sp, #28]
 800834a:	2a00      	cmp	r2, #0
 800834c:	f000 80a5 	beq.w	800849a <_dtoa_r+0x7c2>
 8008350:	2c00      	cmp	r4, #0
 8008352:	dd13      	ble.n	800837c <_dtoa_r+0x6a4>
 8008354:	4639      	mov	r1, r7
 8008356:	4622      	mov	r2, r4
 8008358:	4630      	mov	r0, r6
 800835a:	930d      	str	r3, [sp, #52]	; 0x34
 800835c:	f000 fcde 	bl	8008d1c <__pow5mult>
 8008360:	462a      	mov	r2, r5
 8008362:	4601      	mov	r1, r0
 8008364:	4607      	mov	r7, r0
 8008366:	4630      	mov	r0, r6
 8008368:	f000 fc2e 	bl	8008bc8 <__multiply>
 800836c:	4629      	mov	r1, r5
 800836e:	9009      	str	r0, [sp, #36]	; 0x24
 8008370:	4630      	mov	r0, r6
 8008372:	f000 fb5d 	bl	8008a30 <_Bfree>
 8008376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800837a:	4615      	mov	r5, r2
 800837c:	1b1a      	subs	r2, r3, r4
 800837e:	d004      	beq.n	800838a <_dtoa_r+0x6b2>
 8008380:	4629      	mov	r1, r5
 8008382:	4630      	mov	r0, r6
 8008384:	f000 fcca 	bl	8008d1c <__pow5mult>
 8008388:	4605      	mov	r5, r0
 800838a:	2101      	movs	r1, #1
 800838c:	4630      	mov	r0, r6
 800838e:	f000 fc05 	bl	8008b9c <__i2b>
 8008392:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008394:	2b00      	cmp	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	f340 8081 	ble.w	800849e <_dtoa_r+0x7c6>
 800839c:	461a      	mov	r2, r3
 800839e:	4601      	mov	r1, r0
 80083a0:	4630      	mov	r0, r6
 80083a2:	f000 fcbb 	bl	8008d1c <__pow5mult>
 80083a6:	9b06      	ldr	r3, [sp, #24]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	4604      	mov	r4, r0
 80083ac:	dd7a      	ble.n	80084a4 <_dtoa_r+0x7cc>
 80083ae:	2300      	movs	r3, #0
 80083b0:	9309      	str	r3, [sp, #36]	; 0x24
 80083b2:	6922      	ldr	r2, [r4, #16]
 80083b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80083b8:	6910      	ldr	r0, [r2, #16]
 80083ba:	f000 fba1 	bl	8008b00 <__hi0bits>
 80083be:	f1c0 0020 	rsb	r0, r0, #32
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	4418      	add	r0, r3
 80083c6:	f010 001f 	ands.w	r0, r0, #31
 80083ca:	f000 8093 	beq.w	80084f4 <_dtoa_r+0x81c>
 80083ce:	f1c0 0220 	rsb	r2, r0, #32
 80083d2:	2a04      	cmp	r2, #4
 80083d4:	f340 8085 	ble.w	80084e2 <_dtoa_r+0x80a>
 80083d8:	9b04      	ldr	r3, [sp, #16]
 80083da:	f1c0 001c 	rsb	r0, r0, #28
 80083de:	4403      	add	r3, r0
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	4480      	add	r8, r0
 80083e6:	4403      	add	r3, r0
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	9b04      	ldr	r3, [sp, #16]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dd05      	ble.n	80083fc <_dtoa_r+0x724>
 80083f0:	4629      	mov	r1, r5
 80083f2:	461a      	mov	r2, r3
 80083f4:	4630      	mov	r0, r6
 80083f6:	f000 fceb 	bl	8008dd0 <__lshift>
 80083fa:	4605      	mov	r5, r0
 80083fc:	9b05      	ldr	r3, [sp, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	dd05      	ble.n	800840e <_dtoa_r+0x736>
 8008402:	4621      	mov	r1, r4
 8008404:	461a      	mov	r2, r3
 8008406:	4630      	mov	r0, r6
 8008408:	f000 fce2 	bl	8008dd0 <__lshift>
 800840c:	4604      	mov	r4, r0
 800840e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008410:	2b00      	cmp	r3, #0
 8008412:	d071      	beq.n	80084f8 <_dtoa_r+0x820>
 8008414:	4621      	mov	r1, r4
 8008416:	4628      	mov	r0, r5
 8008418:	f000 fd46 	bl	8008ea8 <__mcmp>
 800841c:	2800      	cmp	r0, #0
 800841e:	da6b      	bge.n	80084f8 <_dtoa_r+0x820>
 8008420:	2300      	movs	r3, #0
 8008422:	4629      	mov	r1, r5
 8008424:	220a      	movs	r2, #10
 8008426:	4630      	mov	r0, r6
 8008428:	f000 fb24 	bl	8008a74 <__multadd>
 800842c:	9b07      	ldr	r3, [sp, #28]
 800842e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008432:	4605      	mov	r5, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 8197 	beq.w	8008768 <_dtoa_r+0xa90>
 800843a:	4639      	mov	r1, r7
 800843c:	2300      	movs	r3, #0
 800843e:	220a      	movs	r2, #10
 8008440:	4630      	mov	r0, r6
 8008442:	f000 fb17 	bl	8008a74 <__multadd>
 8008446:	f1ba 0f00 	cmp.w	sl, #0
 800844a:	4607      	mov	r7, r0
 800844c:	f300 8093 	bgt.w	8008576 <_dtoa_r+0x89e>
 8008450:	9b06      	ldr	r3, [sp, #24]
 8008452:	2b02      	cmp	r3, #2
 8008454:	dc57      	bgt.n	8008506 <_dtoa_r+0x82e>
 8008456:	e08e      	b.n	8008576 <_dtoa_r+0x89e>
 8008458:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800845a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800845e:	e751      	b.n	8008304 <_dtoa_r+0x62c>
 8008460:	f109 34ff 	add.w	r4, r9, #4294967295
 8008464:	42a3      	cmp	r3, r4
 8008466:	bfbf      	itttt	lt
 8008468:	1ae2      	sublt	r2, r4, r3
 800846a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800846c:	189b      	addlt	r3, r3, r2
 800846e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008470:	bfae      	itee	ge
 8008472:	1b1c      	subge	r4, r3, r4
 8008474:	4623      	movlt	r3, r4
 8008476:	2400      	movlt	r4, #0
 8008478:	f1b9 0f00 	cmp.w	r9, #0
 800847c:	bfb5      	itete	lt
 800847e:	9a04      	ldrlt	r2, [sp, #16]
 8008480:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008484:	eba2 0809 	sublt.w	r8, r2, r9
 8008488:	464a      	movge	r2, r9
 800848a:	bfb8      	it	lt
 800848c:	2200      	movlt	r2, #0
 800848e:	e73c      	b.n	800830a <_dtoa_r+0x632>
 8008490:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008494:	9f07      	ldr	r7, [sp, #28]
 8008496:	461c      	mov	r4, r3
 8008498:	e744      	b.n	8008324 <_dtoa_r+0x64c>
 800849a:	461a      	mov	r2, r3
 800849c:	e770      	b.n	8008380 <_dtoa_r+0x6a8>
 800849e:	9b06      	ldr	r3, [sp, #24]
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	dc18      	bgt.n	80084d6 <_dtoa_r+0x7fe>
 80084a4:	9b02      	ldr	r3, [sp, #8]
 80084a6:	b9b3      	cbnz	r3, 80084d6 <_dtoa_r+0x7fe>
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80084ae:	b9a2      	cbnz	r2, 80084da <_dtoa_r+0x802>
 80084b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084b4:	0d12      	lsrs	r2, r2, #20
 80084b6:	0512      	lsls	r2, r2, #20
 80084b8:	b18a      	cbz	r2, 80084de <_dtoa_r+0x806>
 80084ba:	9b04      	ldr	r3, [sp, #16]
 80084bc:	3301      	adds	r3, #1
 80084be:	9304      	str	r3, [sp, #16]
 80084c0:	9b05      	ldr	r3, [sp, #20]
 80084c2:	3301      	adds	r3, #1
 80084c4:	9305      	str	r3, [sp, #20]
 80084c6:	2301      	movs	r3, #1
 80084c8:	9309      	str	r3, [sp, #36]	; 0x24
 80084ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f47f af70 	bne.w	80083b2 <_dtoa_r+0x6da>
 80084d2:	2001      	movs	r0, #1
 80084d4:	e775      	b.n	80083c2 <_dtoa_r+0x6ea>
 80084d6:	2300      	movs	r3, #0
 80084d8:	e7f6      	b.n	80084c8 <_dtoa_r+0x7f0>
 80084da:	9b02      	ldr	r3, [sp, #8]
 80084dc:	e7f4      	b.n	80084c8 <_dtoa_r+0x7f0>
 80084de:	9209      	str	r2, [sp, #36]	; 0x24
 80084e0:	e7f3      	b.n	80084ca <_dtoa_r+0x7f2>
 80084e2:	d082      	beq.n	80083ea <_dtoa_r+0x712>
 80084e4:	9b04      	ldr	r3, [sp, #16]
 80084e6:	321c      	adds	r2, #28
 80084e8:	4413      	add	r3, r2
 80084ea:	9304      	str	r3, [sp, #16]
 80084ec:	9b05      	ldr	r3, [sp, #20]
 80084ee:	4490      	add	r8, r2
 80084f0:	4413      	add	r3, r2
 80084f2:	e779      	b.n	80083e8 <_dtoa_r+0x710>
 80084f4:	4602      	mov	r2, r0
 80084f6:	e7f5      	b.n	80084e4 <_dtoa_r+0x80c>
 80084f8:	f1b9 0f00 	cmp.w	r9, #0
 80084fc:	dc36      	bgt.n	800856c <_dtoa_r+0x894>
 80084fe:	9b06      	ldr	r3, [sp, #24]
 8008500:	2b02      	cmp	r3, #2
 8008502:	dd33      	ble.n	800856c <_dtoa_r+0x894>
 8008504:	46ca      	mov	sl, r9
 8008506:	f1ba 0f00 	cmp.w	sl, #0
 800850a:	d10d      	bne.n	8008528 <_dtoa_r+0x850>
 800850c:	4621      	mov	r1, r4
 800850e:	4653      	mov	r3, sl
 8008510:	2205      	movs	r2, #5
 8008512:	4630      	mov	r0, r6
 8008514:	f000 faae 	bl	8008a74 <__multadd>
 8008518:	4601      	mov	r1, r0
 800851a:	4604      	mov	r4, r0
 800851c:	4628      	mov	r0, r5
 800851e:	f000 fcc3 	bl	8008ea8 <__mcmp>
 8008522:	2800      	cmp	r0, #0
 8008524:	f73f ade4 	bgt.w	80080f0 <_dtoa_r+0x418>
 8008528:	9b08      	ldr	r3, [sp, #32]
 800852a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800852e:	ea6f 0b03 	mvn.w	fp, r3
 8008532:	f04f 0900 	mov.w	r9, #0
 8008536:	4621      	mov	r1, r4
 8008538:	4630      	mov	r0, r6
 800853a:	f000 fa79 	bl	8008a30 <_Bfree>
 800853e:	2f00      	cmp	r7, #0
 8008540:	f43f aea1 	beq.w	8008286 <_dtoa_r+0x5ae>
 8008544:	f1b9 0f00 	cmp.w	r9, #0
 8008548:	d005      	beq.n	8008556 <_dtoa_r+0x87e>
 800854a:	45b9      	cmp	r9, r7
 800854c:	d003      	beq.n	8008556 <_dtoa_r+0x87e>
 800854e:	4649      	mov	r1, r9
 8008550:	4630      	mov	r0, r6
 8008552:	f000 fa6d 	bl	8008a30 <_Bfree>
 8008556:	4639      	mov	r1, r7
 8008558:	4630      	mov	r0, r6
 800855a:	f000 fa69 	bl	8008a30 <_Bfree>
 800855e:	e692      	b.n	8008286 <_dtoa_r+0x5ae>
 8008560:	2400      	movs	r4, #0
 8008562:	4627      	mov	r7, r4
 8008564:	e7e0      	b.n	8008528 <_dtoa_r+0x850>
 8008566:	4693      	mov	fp, r2
 8008568:	4627      	mov	r7, r4
 800856a:	e5c1      	b.n	80080f0 <_dtoa_r+0x418>
 800856c:	9b07      	ldr	r3, [sp, #28]
 800856e:	46ca      	mov	sl, r9
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 8100 	beq.w	8008776 <_dtoa_r+0xa9e>
 8008576:	f1b8 0f00 	cmp.w	r8, #0
 800857a:	dd05      	ble.n	8008588 <_dtoa_r+0x8b0>
 800857c:	4639      	mov	r1, r7
 800857e:	4642      	mov	r2, r8
 8008580:	4630      	mov	r0, r6
 8008582:	f000 fc25 	bl	8008dd0 <__lshift>
 8008586:	4607      	mov	r7, r0
 8008588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858a:	2b00      	cmp	r3, #0
 800858c:	d05d      	beq.n	800864a <_dtoa_r+0x972>
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4630      	mov	r0, r6
 8008592:	f000 fa0d 	bl	80089b0 <_Balloc>
 8008596:	4680      	mov	r8, r0
 8008598:	b928      	cbnz	r0, 80085a6 <_dtoa_r+0x8ce>
 800859a:	4b82      	ldr	r3, [pc, #520]	; (80087a4 <_dtoa_r+0xacc>)
 800859c:	4602      	mov	r2, r0
 800859e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80085a2:	f7ff bbb1 	b.w	8007d08 <_dtoa_r+0x30>
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	3202      	adds	r2, #2
 80085aa:	0092      	lsls	r2, r2, #2
 80085ac:	f107 010c 	add.w	r1, r7, #12
 80085b0:	300c      	adds	r0, #12
 80085b2:	f000 ffa9 	bl	8009508 <memcpy>
 80085b6:	2201      	movs	r2, #1
 80085b8:	4641      	mov	r1, r8
 80085ba:	4630      	mov	r0, r6
 80085bc:	f000 fc08 	bl	8008dd0 <__lshift>
 80085c0:	9b01      	ldr	r3, [sp, #4]
 80085c2:	3301      	adds	r3, #1
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	4453      	add	r3, sl
 80085ca:	9308      	str	r3, [sp, #32]
 80085cc:	9b02      	ldr	r3, [sp, #8]
 80085ce:	f003 0301 	and.w	r3, r3, #1
 80085d2:	46b9      	mov	r9, r7
 80085d4:	9307      	str	r3, [sp, #28]
 80085d6:	4607      	mov	r7, r0
 80085d8:	9b04      	ldr	r3, [sp, #16]
 80085da:	4621      	mov	r1, r4
 80085dc:	3b01      	subs	r3, #1
 80085de:	4628      	mov	r0, r5
 80085e0:	9302      	str	r3, [sp, #8]
 80085e2:	f7ff faf1 	bl	8007bc8 <quorem>
 80085e6:	4603      	mov	r3, r0
 80085e8:	3330      	adds	r3, #48	; 0x30
 80085ea:	9005      	str	r0, [sp, #20]
 80085ec:	4649      	mov	r1, r9
 80085ee:	4628      	mov	r0, r5
 80085f0:	9309      	str	r3, [sp, #36]	; 0x24
 80085f2:	f000 fc59 	bl	8008ea8 <__mcmp>
 80085f6:	463a      	mov	r2, r7
 80085f8:	4682      	mov	sl, r0
 80085fa:	4621      	mov	r1, r4
 80085fc:	4630      	mov	r0, r6
 80085fe:	f000 fc6f 	bl	8008ee0 <__mdiff>
 8008602:	68c2      	ldr	r2, [r0, #12]
 8008604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008606:	4680      	mov	r8, r0
 8008608:	bb0a      	cbnz	r2, 800864e <_dtoa_r+0x976>
 800860a:	4601      	mov	r1, r0
 800860c:	4628      	mov	r0, r5
 800860e:	f000 fc4b 	bl	8008ea8 <__mcmp>
 8008612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008614:	4602      	mov	r2, r0
 8008616:	4641      	mov	r1, r8
 8008618:	4630      	mov	r0, r6
 800861a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800861e:	f000 fa07 	bl	8008a30 <_Bfree>
 8008622:	9b06      	ldr	r3, [sp, #24]
 8008624:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008626:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800862a:	ea43 0102 	orr.w	r1, r3, r2
 800862e:	9b07      	ldr	r3, [sp, #28]
 8008630:	4319      	orrs	r1, r3
 8008632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008634:	d10d      	bne.n	8008652 <_dtoa_r+0x97a>
 8008636:	2b39      	cmp	r3, #57	; 0x39
 8008638:	d029      	beq.n	800868e <_dtoa_r+0x9b6>
 800863a:	f1ba 0f00 	cmp.w	sl, #0
 800863e:	dd01      	ble.n	8008644 <_dtoa_r+0x96c>
 8008640:	9b05      	ldr	r3, [sp, #20]
 8008642:	3331      	adds	r3, #49	; 0x31
 8008644:	9a02      	ldr	r2, [sp, #8]
 8008646:	7013      	strb	r3, [r2, #0]
 8008648:	e775      	b.n	8008536 <_dtoa_r+0x85e>
 800864a:	4638      	mov	r0, r7
 800864c:	e7b8      	b.n	80085c0 <_dtoa_r+0x8e8>
 800864e:	2201      	movs	r2, #1
 8008650:	e7e1      	b.n	8008616 <_dtoa_r+0x93e>
 8008652:	f1ba 0f00 	cmp.w	sl, #0
 8008656:	db06      	blt.n	8008666 <_dtoa_r+0x98e>
 8008658:	9906      	ldr	r1, [sp, #24]
 800865a:	ea41 0a0a 	orr.w	sl, r1, sl
 800865e:	9907      	ldr	r1, [sp, #28]
 8008660:	ea5a 0a01 	orrs.w	sl, sl, r1
 8008664:	d120      	bne.n	80086a8 <_dtoa_r+0x9d0>
 8008666:	2a00      	cmp	r2, #0
 8008668:	ddec      	ble.n	8008644 <_dtoa_r+0x96c>
 800866a:	4629      	mov	r1, r5
 800866c:	2201      	movs	r2, #1
 800866e:	4630      	mov	r0, r6
 8008670:	9304      	str	r3, [sp, #16]
 8008672:	f000 fbad 	bl	8008dd0 <__lshift>
 8008676:	4621      	mov	r1, r4
 8008678:	4605      	mov	r5, r0
 800867a:	f000 fc15 	bl	8008ea8 <__mcmp>
 800867e:	2800      	cmp	r0, #0
 8008680:	9b04      	ldr	r3, [sp, #16]
 8008682:	dc02      	bgt.n	800868a <_dtoa_r+0x9b2>
 8008684:	d1de      	bne.n	8008644 <_dtoa_r+0x96c>
 8008686:	07da      	lsls	r2, r3, #31
 8008688:	d5dc      	bpl.n	8008644 <_dtoa_r+0x96c>
 800868a:	2b39      	cmp	r3, #57	; 0x39
 800868c:	d1d8      	bne.n	8008640 <_dtoa_r+0x968>
 800868e:	9a02      	ldr	r2, [sp, #8]
 8008690:	2339      	movs	r3, #57	; 0x39
 8008692:	7013      	strb	r3, [r2, #0]
 8008694:	4643      	mov	r3, r8
 8008696:	4698      	mov	r8, r3
 8008698:	3b01      	subs	r3, #1
 800869a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800869e:	2a39      	cmp	r2, #57	; 0x39
 80086a0:	d051      	beq.n	8008746 <_dtoa_r+0xa6e>
 80086a2:	3201      	adds	r2, #1
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	e746      	b.n	8008536 <_dtoa_r+0x85e>
 80086a8:	2a00      	cmp	r2, #0
 80086aa:	dd03      	ble.n	80086b4 <_dtoa_r+0x9dc>
 80086ac:	2b39      	cmp	r3, #57	; 0x39
 80086ae:	d0ee      	beq.n	800868e <_dtoa_r+0x9b6>
 80086b0:	3301      	adds	r3, #1
 80086b2:	e7c7      	b.n	8008644 <_dtoa_r+0x96c>
 80086b4:	9a04      	ldr	r2, [sp, #16]
 80086b6:	9908      	ldr	r1, [sp, #32]
 80086b8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086bc:	428a      	cmp	r2, r1
 80086be:	d02b      	beq.n	8008718 <_dtoa_r+0xa40>
 80086c0:	4629      	mov	r1, r5
 80086c2:	2300      	movs	r3, #0
 80086c4:	220a      	movs	r2, #10
 80086c6:	4630      	mov	r0, r6
 80086c8:	f000 f9d4 	bl	8008a74 <__multadd>
 80086cc:	45b9      	cmp	r9, r7
 80086ce:	4605      	mov	r5, r0
 80086d0:	f04f 0300 	mov.w	r3, #0
 80086d4:	f04f 020a 	mov.w	r2, #10
 80086d8:	4649      	mov	r1, r9
 80086da:	4630      	mov	r0, r6
 80086dc:	d107      	bne.n	80086ee <_dtoa_r+0xa16>
 80086de:	f000 f9c9 	bl	8008a74 <__multadd>
 80086e2:	4681      	mov	r9, r0
 80086e4:	4607      	mov	r7, r0
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	3301      	adds	r3, #1
 80086ea:	9304      	str	r3, [sp, #16]
 80086ec:	e774      	b.n	80085d8 <_dtoa_r+0x900>
 80086ee:	f000 f9c1 	bl	8008a74 <__multadd>
 80086f2:	4639      	mov	r1, r7
 80086f4:	4681      	mov	r9, r0
 80086f6:	2300      	movs	r3, #0
 80086f8:	220a      	movs	r2, #10
 80086fa:	4630      	mov	r0, r6
 80086fc:	f000 f9ba 	bl	8008a74 <__multadd>
 8008700:	4607      	mov	r7, r0
 8008702:	e7f0      	b.n	80086e6 <_dtoa_r+0xa0e>
 8008704:	f1ba 0f00 	cmp.w	sl, #0
 8008708:	9a01      	ldr	r2, [sp, #4]
 800870a:	bfcc      	ite	gt
 800870c:	46d0      	movgt	r8, sl
 800870e:	f04f 0801 	movle.w	r8, #1
 8008712:	4490      	add	r8, r2
 8008714:	f04f 0900 	mov.w	r9, #0
 8008718:	4629      	mov	r1, r5
 800871a:	2201      	movs	r2, #1
 800871c:	4630      	mov	r0, r6
 800871e:	9302      	str	r3, [sp, #8]
 8008720:	f000 fb56 	bl	8008dd0 <__lshift>
 8008724:	4621      	mov	r1, r4
 8008726:	4605      	mov	r5, r0
 8008728:	f000 fbbe 	bl	8008ea8 <__mcmp>
 800872c:	2800      	cmp	r0, #0
 800872e:	dcb1      	bgt.n	8008694 <_dtoa_r+0x9bc>
 8008730:	d102      	bne.n	8008738 <_dtoa_r+0xa60>
 8008732:	9b02      	ldr	r3, [sp, #8]
 8008734:	07db      	lsls	r3, r3, #31
 8008736:	d4ad      	bmi.n	8008694 <_dtoa_r+0x9bc>
 8008738:	4643      	mov	r3, r8
 800873a:	4698      	mov	r8, r3
 800873c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008740:	2a30      	cmp	r2, #48	; 0x30
 8008742:	d0fa      	beq.n	800873a <_dtoa_r+0xa62>
 8008744:	e6f7      	b.n	8008536 <_dtoa_r+0x85e>
 8008746:	9a01      	ldr	r2, [sp, #4]
 8008748:	429a      	cmp	r2, r3
 800874a:	d1a4      	bne.n	8008696 <_dtoa_r+0x9be>
 800874c:	f10b 0b01 	add.w	fp, fp, #1
 8008750:	2331      	movs	r3, #49	; 0x31
 8008752:	e778      	b.n	8008646 <_dtoa_r+0x96e>
 8008754:	4b14      	ldr	r3, [pc, #80]	; (80087a8 <_dtoa_r+0xad0>)
 8008756:	f7ff bb2a 	b.w	8007dae <_dtoa_r+0xd6>
 800875a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800875c:	2b00      	cmp	r3, #0
 800875e:	f47f ab05 	bne.w	8007d6c <_dtoa_r+0x94>
 8008762:	4b12      	ldr	r3, [pc, #72]	; (80087ac <_dtoa_r+0xad4>)
 8008764:	f7ff bb23 	b.w	8007dae <_dtoa_r+0xd6>
 8008768:	f1ba 0f00 	cmp.w	sl, #0
 800876c:	dc03      	bgt.n	8008776 <_dtoa_r+0xa9e>
 800876e:	9b06      	ldr	r3, [sp, #24]
 8008770:	2b02      	cmp	r3, #2
 8008772:	f73f aec8 	bgt.w	8008506 <_dtoa_r+0x82e>
 8008776:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800877a:	4621      	mov	r1, r4
 800877c:	4628      	mov	r0, r5
 800877e:	f7ff fa23 	bl	8007bc8 <quorem>
 8008782:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008786:	f808 3b01 	strb.w	r3, [r8], #1
 800878a:	9a01      	ldr	r2, [sp, #4]
 800878c:	eba8 0202 	sub.w	r2, r8, r2
 8008790:	4592      	cmp	sl, r2
 8008792:	ddb7      	ble.n	8008704 <_dtoa_r+0xa2c>
 8008794:	4629      	mov	r1, r5
 8008796:	2300      	movs	r3, #0
 8008798:	220a      	movs	r2, #10
 800879a:	4630      	mov	r0, r6
 800879c:	f000 f96a 	bl	8008a74 <__multadd>
 80087a0:	4605      	mov	r5, r0
 80087a2:	e7ea      	b.n	800877a <_dtoa_r+0xaa2>
 80087a4:	0809ff04 	.word	0x0809ff04
 80087a8:	0809fe64 	.word	0x0809fe64
 80087ac:	0809fe88 	.word	0x0809fe88

080087b0 <_free_r>:
 80087b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087b2:	2900      	cmp	r1, #0
 80087b4:	d044      	beq.n	8008840 <_free_r+0x90>
 80087b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087ba:	9001      	str	r0, [sp, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f1a1 0404 	sub.w	r4, r1, #4
 80087c2:	bfb8      	it	lt
 80087c4:	18e4      	addlt	r4, r4, r3
 80087c6:	f000 f8e7 	bl	8008998 <__malloc_lock>
 80087ca:	4a1e      	ldr	r2, [pc, #120]	; (8008844 <_free_r+0x94>)
 80087cc:	9801      	ldr	r0, [sp, #4]
 80087ce:	6813      	ldr	r3, [r2, #0]
 80087d0:	b933      	cbnz	r3, 80087e0 <_free_r+0x30>
 80087d2:	6063      	str	r3, [r4, #4]
 80087d4:	6014      	str	r4, [r2, #0]
 80087d6:	b003      	add	sp, #12
 80087d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087dc:	f000 b8e2 	b.w	80089a4 <__malloc_unlock>
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	d908      	bls.n	80087f6 <_free_r+0x46>
 80087e4:	6825      	ldr	r5, [r4, #0]
 80087e6:	1961      	adds	r1, r4, r5
 80087e8:	428b      	cmp	r3, r1
 80087ea:	bf01      	itttt	eq
 80087ec:	6819      	ldreq	r1, [r3, #0]
 80087ee:	685b      	ldreq	r3, [r3, #4]
 80087f0:	1949      	addeq	r1, r1, r5
 80087f2:	6021      	streq	r1, [r4, #0]
 80087f4:	e7ed      	b.n	80087d2 <_free_r+0x22>
 80087f6:	461a      	mov	r2, r3
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	b10b      	cbz	r3, 8008800 <_free_r+0x50>
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	d9fa      	bls.n	80087f6 <_free_r+0x46>
 8008800:	6811      	ldr	r1, [r2, #0]
 8008802:	1855      	adds	r5, r2, r1
 8008804:	42a5      	cmp	r5, r4
 8008806:	d10b      	bne.n	8008820 <_free_r+0x70>
 8008808:	6824      	ldr	r4, [r4, #0]
 800880a:	4421      	add	r1, r4
 800880c:	1854      	adds	r4, r2, r1
 800880e:	42a3      	cmp	r3, r4
 8008810:	6011      	str	r1, [r2, #0]
 8008812:	d1e0      	bne.n	80087d6 <_free_r+0x26>
 8008814:	681c      	ldr	r4, [r3, #0]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	6053      	str	r3, [r2, #4]
 800881a:	440c      	add	r4, r1
 800881c:	6014      	str	r4, [r2, #0]
 800881e:	e7da      	b.n	80087d6 <_free_r+0x26>
 8008820:	d902      	bls.n	8008828 <_free_r+0x78>
 8008822:	230c      	movs	r3, #12
 8008824:	6003      	str	r3, [r0, #0]
 8008826:	e7d6      	b.n	80087d6 <_free_r+0x26>
 8008828:	6825      	ldr	r5, [r4, #0]
 800882a:	1961      	adds	r1, r4, r5
 800882c:	428b      	cmp	r3, r1
 800882e:	bf04      	itt	eq
 8008830:	6819      	ldreq	r1, [r3, #0]
 8008832:	685b      	ldreq	r3, [r3, #4]
 8008834:	6063      	str	r3, [r4, #4]
 8008836:	bf04      	itt	eq
 8008838:	1949      	addeq	r1, r1, r5
 800883a:	6021      	streq	r1, [r4, #0]
 800883c:	6054      	str	r4, [r2, #4]
 800883e:	e7ca      	b.n	80087d6 <_free_r+0x26>
 8008840:	b003      	add	sp, #12
 8008842:	bd30      	pop	{r4, r5, pc}
 8008844:	20000638 	.word	0x20000638

08008848 <malloc>:
 8008848:	4b02      	ldr	r3, [pc, #8]	; (8008854 <malloc+0xc>)
 800884a:	4601      	mov	r1, r0
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	f000 b823 	b.w	8008898 <_malloc_r>
 8008852:	bf00      	nop
 8008854:	20000074 	.word	0x20000074

08008858 <sbrk_aligned>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	4e0e      	ldr	r6, [pc, #56]	; (8008894 <sbrk_aligned+0x3c>)
 800885c:	460c      	mov	r4, r1
 800885e:	6831      	ldr	r1, [r6, #0]
 8008860:	4605      	mov	r5, r0
 8008862:	b911      	cbnz	r1, 800886a <sbrk_aligned+0x12>
 8008864:	f000 fe40 	bl	80094e8 <_sbrk_r>
 8008868:	6030      	str	r0, [r6, #0]
 800886a:	4621      	mov	r1, r4
 800886c:	4628      	mov	r0, r5
 800886e:	f000 fe3b 	bl	80094e8 <_sbrk_r>
 8008872:	1c43      	adds	r3, r0, #1
 8008874:	d00a      	beq.n	800888c <sbrk_aligned+0x34>
 8008876:	1cc4      	adds	r4, r0, #3
 8008878:	f024 0403 	bic.w	r4, r4, #3
 800887c:	42a0      	cmp	r0, r4
 800887e:	d007      	beq.n	8008890 <sbrk_aligned+0x38>
 8008880:	1a21      	subs	r1, r4, r0
 8008882:	4628      	mov	r0, r5
 8008884:	f000 fe30 	bl	80094e8 <_sbrk_r>
 8008888:	3001      	adds	r0, #1
 800888a:	d101      	bne.n	8008890 <sbrk_aligned+0x38>
 800888c:	f04f 34ff 	mov.w	r4, #4294967295
 8008890:	4620      	mov	r0, r4
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	2000063c 	.word	0x2000063c

08008898 <_malloc_r>:
 8008898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800889c:	1ccd      	adds	r5, r1, #3
 800889e:	f025 0503 	bic.w	r5, r5, #3
 80088a2:	3508      	adds	r5, #8
 80088a4:	2d0c      	cmp	r5, #12
 80088a6:	bf38      	it	cc
 80088a8:	250c      	movcc	r5, #12
 80088aa:	2d00      	cmp	r5, #0
 80088ac:	4607      	mov	r7, r0
 80088ae:	db01      	blt.n	80088b4 <_malloc_r+0x1c>
 80088b0:	42a9      	cmp	r1, r5
 80088b2:	d905      	bls.n	80088c0 <_malloc_r+0x28>
 80088b4:	230c      	movs	r3, #12
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	2600      	movs	r6, #0
 80088ba:	4630      	mov	r0, r6
 80088bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008994 <_malloc_r+0xfc>
 80088c4:	f000 f868 	bl	8008998 <__malloc_lock>
 80088c8:	f8d8 3000 	ldr.w	r3, [r8]
 80088cc:	461c      	mov	r4, r3
 80088ce:	bb5c      	cbnz	r4, 8008928 <_malloc_r+0x90>
 80088d0:	4629      	mov	r1, r5
 80088d2:	4638      	mov	r0, r7
 80088d4:	f7ff ffc0 	bl	8008858 <sbrk_aligned>
 80088d8:	1c43      	adds	r3, r0, #1
 80088da:	4604      	mov	r4, r0
 80088dc:	d155      	bne.n	800898a <_malloc_r+0xf2>
 80088de:	f8d8 4000 	ldr.w	r4, [r8]
 80088e2:	4626      	mov	r6, r4
 80088e4:	2e00      	cmp	r6, #0
 80088e6:	d145      	bne.n	8008974 <_malloc_r+0xdc>
 80088e8:	2c00      	cmp	r4, #0
 80088ea:	d048      	beq.n	800897e <_malloc_r+0xe6>
 80088ec:	6823      	ldr	r3, [r4, #0]
 80088ee:	4631      	mov	r1, r6
 80088f0:	4638      	mov	r0, r7
 80088f2:	eb04 0903 	add.w	r9, r4, r3
 80088f6:	f000 fdf7 	bl	80094e8 <_sbrk_r>
 80088fa:	4581      	cmp	r9, r0
 80088fc:	d13f      	bne.n	800897e <_malloc_r+0xe6>
 80088fe:	6821      	ldr	r1, [r4, #0]
 8008900:	1a6d      	subs	r5, r5, r1
 8008902:	4629      	mov	r1, r5
 8008904:	4638      	mov	r0, r7
 8008906:	f7ff ffa7 	bl	8008858 <sbrk_aligned>
 800890a:	3001      	adds	r0, #1
 800890c:	d037      	beq.n	800897e <_malloc_r+0xe6>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	442b      	add	r3, r5
 8008912:	6023      	str	r3, [r4, #0]
 8008914:	f8d8 3000 	ldr.w	r3, [r8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d038      	beq.n	800898e <_malloc_r+0xf6>
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	42a2      	cmp	r2, r4
 8008920:	d12b      	bne.n	800897a <_malloc_r+0xe2>
 8008922:	2200      	movs	r2, #0
 8008924:	605a      	str	r2, [r3, #4]
 8008926:	e00f      	b.n	8008948 <_malloc_r+0xb0>
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	1b52      	subs	r2, r2, r5
 800892c:	d41f      	bmi.n	800896e <_malloc_r+0xd6>
 800892e:	2a0b      	cmp	r2, #11
 8008930:	d917      	bls.n	8008962 <_malloc_r+0xca>
 8008932:	1961      	adds	r1, r4, r5
 8008934:	42a3      	cmp	r3, r4
 8008936:	6025      	str	r5, [r4, #0]
 8008938:	bf18      	it	ne
 800893a:	6059      	strne	r1, [r3, #4]
 800893c:	6863      	ldr	r3, [r4, #4]
 800893e:	bf08      	it	eq
 8008940:	f8c8 1000 	streq.w	r1, [r8]
 8008944:	5162      	str	r2, [r4, r5]
 8008946:	604b      	str	r3, [r1, #4]
 8008948:	4638      	mov	r0, r7
 800894a:	f104 060b 	add.w	r6, r4, #11
 800894e:	f000 f829 	bl	80089a4 <__malloc_unlock>
 8008952:	f026 0607 	bic.w	r6, r6, #7
 8008956:	1d23      	adds	r3, r4, #4
 8008958:	1af2      	subs	r2, r6, r3
 800895a:	d0ae      	beq.n	80088ba <_malloc_r+0x22>
 800895c:	1b9b      	subs	r3, r3, r6
 800895e:	50a3      	str	r3, [r4, r2]
 8008960:	e7ab      	b.n	80088ba <_malloc_r+0x22>
 8008962:	42a3      	cmp	r3, r4
 8008964:	6862      	ldr	r2, [r4, #4]
 8008966:	d1dd      	bne.n	8008924 <_malloc_r+0x8c>
 8008968:	f8c8 2000 	str.w	r2, [r8]
 800896c:	e7ec      	b.n	8008948 <_malloc_r+0xb0>
 800896e:	4623      	mov	r3, r4
 8008970:	6864      	ldr	r4, [r4, #4]
 8008972:	e7ac      	b.n	80088ce <_malloc_r+0x36>
 8008974:	4634      	mov	r4, r6
 8008976:	6876      	ldr	r6, [r6, #4]
 8008978:	e7b4      	b.n	80088e4 <_malloc_r+0x4c>
 800897a:	4613      	mov	r3, r2
 800897c:	e7cc      	b.n	8008918 <_malloc_r+0x80>
 800897e:	230c      	movs	r3, #12
 8008980:	603b      	str	r3, [r7, #0]
 8008982:	4638      	mov	r0, r7
 8008984:	f000 f80e 	bl	80089a4 <__malloc_unlock>
 8008988:	e797      	b.n	80088ba <_malloc_r+0x22>
 800898a:	6025      	str	r5, [r4, #0]
 800898c:	e7dc      	b.n	8008948 <_malloc_r+0xb0>
 800898e:	605b      	str	r3, [r3, #4]
 8008990:	deff      	udf	#255	; 0xff
 8008992:	bf00      	nop
 8008994:	20000638 	.word	0x20000638

08008998 <__malloc_lock>:
 8008998:	4801      	ldr	r0, [pc, #4]	; (80089a0 <__malloc_lock+0x8>)
 800899a:	f7ff b913 	b.w	8007bc4 <__retarget_lock_acquire_recursive>
 800899e:	bf00      	nop
 80089a0:	20000634 	.word	0x20000634

080089a4 <__malloc_unlock>:
 80089a4:	4801      	ldr	r0, [pc, #4]	; (80089ac <__malloc_unlock+0x8>)
 80089a6:	f7ff b90e 	b.w	8007bc6 <__retarget_lock_release_recursive>
 80089aa:	bf00      	nop
 80089ac:	20000634 	.word	0x20000634

080089b0 <_Balloc>:
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	69c6      	ldr	r6, [r0, #28]
 80089b4:	4604      	mov	r4, r0
 80089b6:	460d      	mov	r5, r1
 80089b8:	b976      	cbnz	r6, 80089d8 <_Balloc+0x28>
 80089ba:	2010      	movs	r0, #16
 80089bc:	f7ff ff44 	bl	8008848 <malloc>
 80089c0:	4602      	mov	r2, r0
 80089c2:	61e0      	str	r0, [r4, #28]
 80089c4:	b920      	cbnz	r0, 80089d0 <_Balloc+0x20>
 80089c6:	4b18      	ldr	r3, [pc, #96]	; (8008a28 <_Balloc+0x78>)
 80089c8:	4818      	ldr	r0, [pc, #96]	; (8008a2c <_Balloc+0x7c>)
 80089ca:	216b      	movs	r1, #107	; 0x6b
 80089cc:	f000 fdaa 	bl	8009524 <__assert_func>
 80089d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089d4:	6006      	str	r6, [r0, #0]
 80089d6:	60c6      	str	r6, [r0, #12]
 80089d8:	69e6      	ldr	r6, [r4, #28]
 80089da:	68f3      	ldr	r3, [r6, #12]
 80089dc:	b183      	cbz	r3, 8008a00 <_Balloc+0x50>
 80089de:	69e3      	ldr	r3, [r4, #28]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089e6:	b9b8      	cbnz	r0, 8008a18 <_Balloc+0x68>
 80089e8:	2101      	movs	r1, #1
 80089ea:	fa01 f605 	lsl.w	r6, r1, r5
 80089ee:	1d72      	adds	r2, r6, #5
 80089f0:	0092      	lsls	r2, r2, #2
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 fdb4 	bl	8009560 <_calloc_r>
 80089f8:	b160      	cbz	r0, 8008a14 <_Balloc+0x64>
 80089fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089fe:	e00e      	b.n	8008a1e <_Balloc+0x6e>
 8008a00:	2221      	movs	r2, #33	; 0x21
 8008a02:	2104      	movs	r1, #4
 8008a04:	4620      	mov	r0, r4
 8008a06:	f000 fdab 	bl	8009560 <_calloc_r>
 8008a0a:	69e3      	ldr	r3, [r4, #28]
 8008a0c:	60f0      	str	r0, [r6, #12]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1e4      	bne.n	80089de <_Balloc+0x2e>
 8008a14:	2000      	movs	r0, #0
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	6802      	ldr	r2, [r0, #0]
 8008a1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a1e:	2300      	movs	r3, #0
 8008a20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a24:	e7f7      	b.n	8008a16 <_Balloc+0x66>
 8008a26:	bf00      	nop
 8008a28:	0809fe95 	.word	0x0809fe95
 8008a2c:	0809ff15 	.word	0x0809ff15

08008a30 <_Bfree>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	69c6      	ldr	r6, [r0, #28]
 8008a34:	4605      	mov	r5, r0
 8008a36:	460c      	mov	r4, r1
 8008a38:	b976      	cbnz	r6, 8008a58 <_Bfree+0x28>
 8008a3a:	2010      	movs	r0, #16
 8008a3c:	f7ff ff04 	bl	8008848 <malloc>
 8008a40:	4602      	mov	r2, r0
 8008a42:	61e8      	str	r0, [r5, #28]
 8008a44:	b920      	cbnz	r0, 8008a50 <_Bfree+0x20>
 8008a46:	4b09      	ldr	r3, [pc, #36]	; (8008a6c <_Bfree+0x3c>)
 8008a48:	4809      	ldr	r0, [pc, #36]	; (8008a70 <_Bfree+0x40>)
 8008a4a:	218f      	movs	r1, #143	; 0x8f
 8008a4c:	f000 fd6a 	bl	8009524 <__assert_func>
 8008a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a54:	6006      	str	r6, [r0, #0]
 8008a56:	60c6      	str	r6, [r0, #12]
 8008a58:	b13c      	cbz	r4, 8008a6a <_Bfree+0x3a>
 8008a5a:	69eb      	ldr	r3, [r5, #28]
 8008a5c:	6862      	ldr	r2, [r4, #4]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a64:	6021      	str	r1, [r4, #0]
 8008a66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a6a:	bd70      	pop	{r4, r5, r6, pc}
 8008a6c:	0809fe95 	.word	0x0809fe95
 8008a70:	0809ff15 	.word	0x0809ff15

08008a74 <__multadd>:
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	690d      	ldr	r5, [r1, #16]
 8008a7a:	4607      	mov	r7, r0
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	461e      	mov	r6, r3
 8008a80:	f101 0c14 	add.w	ip, r1, #20
 8008a84:	2000      	movs	r0, #0
 8008a86:	f8dc 3000 	ldr.w	r3, [ip]
 8008a8a:	b299      	uxth	r1, r3
 8008a8c:	fb02 6101 	mla	r1, r2, r1, r6
 8008a90:	0c1e      	lsrs	r6, r3, #16
 8008a92:	0c0b      	lsrs	r3, r1, #16
 8008a94:	fb02 3306 	mla	r3, r2, r6, r3
 8008a98:	b289      	uxth	r1, r1
 8008a9a:	3001      	adds	r0, #1
 8008a9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008aa0:	4285      	cmp	r5, r0
 8008aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8008aa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008aaa:	dcec      	bgt.n	8008a86 <__multadd+0x12>
 8008aac:	b30e      	cbz	r6, 8008af2 <__multadd+0x7e>
 8008aae:	68a3      	ldr	r3, [r4, #8]
 8008ab0:	42ab      	cmp	r3, r5
 8008ab2:	dc19      	bgt.n	8008ae8 <__multadd+0x74>
 8008ab4:	6861      	ldr	r1, [r4, #4]
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	3101      	adds	r1, #1
 8008aba:	f7ff ff79 	bl	80089b0 <_Balloc>
 8008abe:	4680      	mov	r8, r0
 8008ac0:	b928      	cbnz	r0, 8008ace <__multadd+0x5a>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b0c      	ldr	r3, [pc, #48]	; (8008af8 <__multadd+0x84>)
 8008ac6:	480d      	ldr	r0, [pc, #52]	; (8008afc <__multadd+0x88>)
 8008ac8:	21ba      	movs	r1, #186	; 0xba
 8008aca:	f000 fd2b 	bl	8009524 <__assert_func>
 8008ace:	6922      	ldr	r2, [r4, #16]
 8008ad0:	3202      	adds	r2, #2
 8008ad2:	f104 010c 	add.w	r1, r4, #12
 8008ad6:	0092      	lsls	r2, r2, #2
 8008ad8:	300c      	adds	r0, #12
 8008ada:	f000 fd15 	bl	8009508 <memcpy>
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4638      	mov	r0, r7
 8008ae2:	f7ff ffa5 	bl	8008a30 <_Bfree>
 8008ae6:	4644      	mov	r4, r8
 8008ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008aec:	3501      	adds	r5, #1
 8008aee:	615e      	str	r6, [r3, #20]
 8008af0:	6125      	str	r5, [r4, #16]
 8008af2:	4620      	mov	r0, r4
 8008af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af8:	0809ff04 	.word	0x0809ff04
 8008afc:	0809ff15 	.word	0x0809ff15

08008b00 <__hi0bits>:
 8008b00:	0c03      	lsrs	r3, r0, #16
 8008b02:	041b      	lsls	r3, r3, #16
 8008b04:	b9d3      	cbnz	r3, 8008b3c <__hi0bits+0x3c>
 8008b06:	0400      	lsls	r0, r0, #16
 8008b08:	2310      	movs	r3, #16
 8008b0a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008b0e:	bf04      	itt	eq
 8008b10:	0200      	lsleq	r0, r0, #8
 8008b12:	3308      	addeq	r3, #8
 8008b14:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b18:	bf04      	itt	eq
 8008b1a:	0100      	lsleq	r0, r0, #4
 8008b1c:	3304      	addeq	r3, #4
 8008b1e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b22:	bf04      	itt	eq
 8008b24:	0080      	lsleq	r0, r0, #2
 8008b26:	3302      	addeq	r3, #2
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	db05      	blt.n	8008b38 <__hi0bits+0x38>
 8008b2c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b30:	f103 0301 	add.w	r3, r3, #1
 8008b34:	bf08      	it	eq
 8008b36:	2320      	moveq	r3, #32
 8008b38:	4618      	mov	r0, r3
 8008b3a:	4770      	bx	lr
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	e7e4      	b.n	8008b0a <__hi0bits+0xa>

08008b40 <__lo0bits>:
 8008b40:	6803      	ldr	r3, [r0, #0]
 8008b42:	f013 0207 	ands.w	r2, r3, #7
 8008b46:	d00c      	beq.n	8008b62 <__lo0bits+0x22>
 8008b48:	07d9      	lsls	r1, r3, #31
 8008b4a:	d422      	bmi.n	8008b92 <__lo0bits+0x52>
 8008b4c:	079a      	lsls	r2, r3, #30
 8008b4e:	bf49      	itett	mi
 8008b50:	085b      	lsrmi	r3, r3, #1
 8008b52:	089b      	lsrpl	r3, r3, #2
 8008b54:	6003      	strmi	r3, [r0, #0]
 8008b56:	2201      	movmi	r2, #1
 8008b58:	bf5c      	itt	pl
 8008b5a:	6003      	strpl	r3, [r0, #0]
 8008b5c:	2202      	movpl	r2, #2
 8008b5e:	4610      	mov	r0, r2
 8008b60:	4770      	bx	lr
 8008b62:	b299      	uxth	r1, r3
 8008b64:	b909      	cbnz	r1, 8008b6a <__lo0bits+0x2a>
 8008b66:	0c1b      	lsrs	r3, r3, #16
 8008b68:	2210      	movs	r2, #16
 8008b6a:	b2d9      	uxtb	r1, r3
 8008b6c:	b909      	cbnz	r1, 8008b72 <__lo0bits+0x32>
 8008b6e:	3208      	adds	r2, #8
 8008b70:	0a1b      	lsrs	r3, r3, #8
 8008b72:	0719      	lsls	r1, r3, #28
 8008b74:	bf04      	itt	eq
 8008b76:	091b      	lsreq	r3, r3, #4
 8008b78:	3204      	addeq	r2, #4
 8008b7a:	0799      	lsls	r1, r3, #30
 8008b7c:	bf04      	itt	eq
 8008b7e:	089b      	lsreq	r3, r3, #2
 8008b80:	3202      	addeq	r2, #2
 8008b82:	07d9      	lsls	r1, r3, #31
 8008b84:	d403      	bmi.n	8008b8e <__lo0bits+0x4e>
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	f102 0201 	add.w	r2, r2, #1
 8008b8c:	d003      	beq.n	8008b96 <__lo0bits+0x56>
 8008b8e:	6003      	str	r3, [r0, #0]
 8008b90:	e7e5      	b.n	8008b5e <__lo0bits+0x1e>
 8008b92:	2200      	movs	r2, #0
 8008b94:	e7e3      	b.n	8008b5e <__lo0bits+0x1e>
 8008b96:	2220      	movs	r2, #32
 8008b98:	e7e1      	b.n	8008b5e <__lo0bits+0x1e>
	...

08008b9c <__i2b>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	460c      	mov	r4, r1
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	f7ff ff05 	bl	80089b0 <_Balloc>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	b928      	cbnz	r0, 8008bb6 <__i2b+0x1a>
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <__i2b+0x24>)
 8008bac:	4805      	ldr	r0, [pc, #20]	; (8008bc4 <__i2b+0x28>)
 8008bae:	f240 1145 	movw	r1, #325	; 0x145
 8008bb2:	f000 fcb7 	bl	8009524 <__assert_func>
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	6144      	str	r4, [r0, #20]
 8008bba:	6103      	str	r3, [r0, #16]
 8008bbc:	bd10      	pop	{r4, pc}
 8008bbe:	bf00      	nop
 8008bc0:	0809ff04 	.word	0x0809ff04
 8008bc4:	0809ff15 	.word	0x0809ff15

08008bc8 <__multiply>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	4691      	mov	r9, r2
 8008bce:	690a      	ldr	r2, [r1, #16]
 8008bd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	bfb8      	it	lt
 8008bd8:	460b      	movlt	r3, r1
 8008bda:	460c      	mov	r4, r1
 8008bdc:	bfbc      	itt	lt
 8008bde:	464c      	movlt	r4, r9
 8008be0:	4699      	movlt	r9, r3
 8008be2:	6927      	ldr	r7, [r4, #16]
 8008be4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008be8:	68a3      	ldr	r3, [r4, #8]
 8008bea:	6861      	ldr	r1, [r4, #4]
 8008bec:	eb07 060a 	add.w	r6, r7, sl
 8008bf0:	42b3      	cmp	r3, r6
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	bfb8      	it	lt
 8008bf6:	3101      	addlt	r1, #1
 8008bf8:	f7ff feda 	bl	80089b0 <_Balloc>
 8008bfc:	b930      	cbnz	r0, 8008c0c <__multiply+0x44>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	4b44      	ldr	r3, [pc, #272]	; (8008d14 <__multiply+0x14c>)
 8008c02:	4845      	ldr	r0, [pc, #276]	; (8008d18 <__multiply+0x150>)
 8008c04:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008c08:	f000 fc8c 	bl	8009524 <__assert_func>
 8008c0c:	f100 0514 	add.w	r5, r0, #20
 8008c10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008c14:	462b      	mov	r3, r5
 8008c16:	2200      	movs	r2, #0
 8008c18:	4543      	cmp	r3, r8
 8008c1a:	d321      	bcc.n	8008c60 <__multiply+0x98>
 8008c1c:	f104 0314 	add.w	r3, r4, #20
 8008c20:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c24:	f109 0314 	add.w	r3, r9, #20
 8008c28:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c2c:	9202      	str	r2, [sp, #8]
 8008c2e:	1b3a      	subs	r2, r7, r4
 8008c30:	3a15      	subs	r2, #21
 8008c32:	f022 0203 	bic.w	r2, r2, #3
 8008c36:	3204      	adds	r2, #4
 8008c38:	f104 0115 	add.w	r1, r4, #21
 8008c3c:	428f      	cmp	r7, r1
 8008c3e:	bf38      	it	cc
 8008c40:	2204      	movcc	r2, #4
 8008c42:	9201      	str	r2, [sp, #4]
 8008c44:	9a02      	ldr	r2, [sp, #8]
 8008c46:	9303      	str	r3, [sp, #12]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d80c      	bhi.n	8008c66 <__multiply+0x9e>
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	dd03      	ble.n	8008c58 <__multiply+0x90>
 8008c50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d05b      	beq.n	8008d10 <__multiply+0x148>
 8008c58:	6106      	str	r6, [r0, #16]
 8008c5a:	b005      	add	sp, #20
 8008c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c60:	f843 2b04 	str.w	r2, [r3], #4
 8008c64:	e7d8      	b.n	8008c18 <__multiply+0x50>
 8008c66:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c6a:	f1ba 0f00 	cmp.w	sl, #0
 8008c6e:	d024      	beq.n	8008cba <__multiply+0xf2>
 8008c70:	f104 0e14 	add.w	lr, r4, #20
 8008c74:	46a9      	mov	r9, r5
 8008c76:	f04f 0c00 	mov.w	ip, #0
 8008c7a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c7e:	f8d9 1000 	ldr.w	r1, [r9]
 8008c82:	fa1f fb82 	uxth.w	fp, r2
 8008c86:	b289      	uxth	r1, r1
 8008c88:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c8c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c90:	f8d9 2000 	ldr.w	r2, [r9]
 8008c94:	4461      	add	r1, ip
 8008c96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c9a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008ca2:	b289      	uxth	r1, r1
 8008ca4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ca8:	4577      	cmp	r7, lr
 8008caa:	f849 1b04 	str.w	r1, [r9], #4
 8008cae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008cb2:	d8e2      	bhi.n	8008c7a <__multiply+0xb2>
 8008cb4:	9a01      	ldr	r2, [sp, #4]
 8008cb6:	f845 c002 	str.w	ip, [r5, r2]
 8008cba:	9a03      	ldr	r2, [sp, #12]
 8008cbc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008cc0:	3304      	adds	r3, #4
 8008cc2:	f1b9 0f00 	cmp.w	r9, #0
 8008cc6:	d021      	beq.n	8008d0c <__multiply+0x144>
 8008cc8:	6829      	ldr	r1, [r5, #0]
 8008cca:	f104 0c14 	add.w	ip, r4, #20
 8008cce:	46ae      	mov	lr, r5
 8008cd0:	f04f 0a00 	mov.w	sl, #0
 8008cd4:	f8bc b000 	ldrh.w	fp, [ip]
 8008cd8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008cdc:	fb09 220b 	mla	r2, r9, fp, r2
 8008ce0:	4452      	add	r2, sl
 8008ce2:	b289      	uxth	r1, r1
 8008ce4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ce8:	f84e 1b04 	str.w	r1, [lr], #4
 8008cec:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008cf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cf4:	f8be 1000 	ldrh.w	r1, [lr]
 8008cf8:	fb09 110a 	mla	r1, r9, sl, r1
 8008cfc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008d00:	4567      	cmp	r7, ip
 8008d02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008d06:	d8e5      	bhi.n	8008cd4 <__multiply+0x10c>
 8008d08:	9a01      	ldr	r2, [sp, #4]
 8008d0a:	50a9      	str	r1, [r5, r2]
 8008d0c:	3504      	adds	r5, #4
 8008d0e:	e799      	b.n	8008c44 <__multiply+0x7c>
 8008d10:	3e01      	subs	r6, #1
 8008d12:	e79b      	b.n	8008c4c <__multiply+0x84>
 8008d14:	0809ff04 	.word	0x0809ff04
 8008d18:	0809ff15 	.word	0x0809ff15

08008d1c <__pow5mult>:
 8008d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d20:	4615      	mov	r5, r2
 8008d22:	f012 0203 	ands.w	r2, r2, #3
 8008d26:	4606      	mov	r6, r0
 8008d28:	460f      	mov	r7, r1
 8008d2a:	d007      	beq.n	8008d3c <__pow5mult+0x20>
 8008d2c:	4c25      	ldr	r4, [pc, #148]	; (8008dc4 <__pow5mult+0xa8>)
 8008d2e:	3a01      	subs	r2, #1
 8008d30:	2300      	movs	r3, #0
 8008d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d36:	f7ff fe9d 	bl	8008a74 <__multadd>
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	10ad      	asrs	r5, r5, #2
 8008d3e:	d03d      	beq.n	8008dbc <__pow5mult+0xa0>
 8008d40:	69f4      	ldr	r4, [r6, #28]
 8008d42:	b97c      	cbnz	r4, 8008d64 <__pow5mult+0x48>
 8008d44:	2010      	movs	r0, #16
 8008d46:	f7ff fd7f 	bl	8008848 <malloc>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	61f0      	str	r0, [r6, #28]
 8008d4e:	b928      	cbnz	r0, 8008d5c <__pow5mult+0x40>
 8008d50:	4b1d      	ldr	r3, [pc, #116]	; (8008dc8 <__pow5mult+0xac>)
 8008d52:	481e      	ldr	r0, [pc, #120]	; (8008dcc <__pow5mult+0xb0>)
 8008d54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d58:	f000 fbe4 	bl	8009524 <__assert_func>
 8008d5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d60:	6004      	str	r4, [r0, #0]
 8008d62:	60c4      	str	r4, [r0, #12]
 8008d64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008d68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d6c:	b94c      	cbnz	r4, 8008d82 <__pow5mult+0x66>
 8008d6e:	f240 2171 	movw	r1, #625	; 0x271
 8008d72:	4630      	mov	r0, r6
 8008d74:	f7ff ff12 	bl	8008b9c <__i2b>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d7e:	4604      	mov	r4, r0
 8008d80:	6003      	str	r3, [r0, #0]
 8008d82:	f04f 0900 	mov.w	r9, #0
 8008d86:	07eb      	lsls	r3, r5, #31
 8008d88:	d50a      	bpl.n	8008da0 <__pow5mult+0x84>
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4630      	mov	r0, r6
 8008d90:	f7ff ff1a 	bl	8008bc8 <__multiply>
 8008d94:	4639      	mov	r1, r7
 8008d96:	4680      	mov	r8, r0
 8008d98:	4630      	mov	r0, r6
 8008d9a:	f7ff fe49 	bl	8008a30 <_Bfree>
 8008d9e:	4647      	mov	r7, r8
 8008da0:	106d      	asrs	r5, r5, #1
 8008da2:	d00b      	beq.n	8008dbc <__pow5mult+0xa0>
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	b938      	cbnz	r0, 8008db8 <__pow5mult+0x9c>
 8008da8:	4622      	mov	r2, r4
 8008daa:	4621      	mov	r1, r4
 8008dac:	4630      	mov	r0, r6
 8008dae:	f7ff ff0b 	bl	8008bc8 <__multiply>
 8008db2:	6020      	str	r0, [r4, #0]
 8008db4:	f8c0 9000 	str.w	r9, [r0]
 8008db8:	4604      	mov	r4, r0
 8008dba:	e7e4      	b.n	8008d86 <__pow5mult+0x6a>
 8008dbc:	4638      	mov	r0, r7
 8008dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc2:	bf00      	nop
 8008dc4:	080a0060 	.word	0x080a0060
 8008dc8:	0809fe95 	.word	0x0809fe95
 8008dcc:	0809ff15 	.word	0x0809ff15

08008dd0 <__lshift>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	6849      	ldr	r1, [r1, #4]
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dde:	68a3      	ldr	r3, [r4, #8]
 8008de0:	4607      	mov	r7, r0
 8008de2:	4691      	mov	r9, r2
 8008de4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008de8:	f108 0601 	add.w	r6, r8, #1
 8008dec:	42b3      	cmp	r3, r6
 8008dee:	db0b      	blt.n	8008e08 <__lshift+0x38>
 8008df0:	4638      	mov	r0, r7
 8008df2:	f7ff fddd 	bl	80089b0 <_Balloc>
 8008df6:	4605      	mov	r5, r0
 8008df8:	b948      	cbnz	r0, 8008e0e <__lshift+0x3e>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	4b28      	ldr	r3, [pc, #160]	; (8008ea0 <__lshift+0xd0>)
 8008dfe:	4829      	ldr	r0, [pc, #164]	; (8008ea4 <__lshift+0xd4>)
 8008e00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008e04:	f000 fb8e 	bl	8009524 <__assert_func>
 8008e08:	3101      	adds	r1, #1
 8008e0a:	005b      	lsls	r3, r3, #1
 8008e0c:	e7ee      	b.n	8008dec <__lshift+0x1c>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f100 0114 	add.w	r1, r0, #20
 8008e14:	f100 0210 	add.w	r2, r0, #16
 8008e18:	4618      	mov	r0, r3
 8008e1a:	4553      	cmp	r3, sl
 8008e1c:	db33      	blt.n	8008e86 <__lshift+0xb6>
 8008e1e:	6920      	ldr	r0, [r4, #16]
 8008e20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e24:	f104 0314 	add.w	r3, r4, #20
 8008e28:	f019 091f 	ands.w	r9, r9, #31
 8008e2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e34:	d02b      	beq.n	8008e8e <__lshift+0xbe>
 8008e36:	f1c9 0e20 	rsb	lr, r9, #32
 8008e3a:	468a      	mov	sl, r1
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	6818      	ldr	r0, [r3, #0]
 8008e40:	fa00 f009 	lsl.w	r0, r0, r9
 8008e44:	4310      	orrs	r0, r2
 8008e46:	f84a 0b04 	str.w	r0, [sl], #4
 8008e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e4e:	459c      	cmp	ip, r3
 8008e50:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e54:	d8f3      	bhi.n	8008e3e <__lshift+0x6e>
 8008e56:	ebac 0304 	sub.w	r3, ip, r4
 8008e5a:	3b15      	subs	r3, #21
 8008e5c:	f023 0303 	bic.w	r3, r3, #3
 8008e60:	3304      	adds	r3, #4
 8008e62:	f104 0015 	add.w	r0, r4, #21
 8008e66:	4584      	cmp	ip, r0
 8008e68:	bf38      	it	cc
 8008e6a:	2304      	movcc	r3, #4
 8008e6c:	50ca      	str	r2, [r1, r3]
 8008e6e:	b10a      	cbz	r2, 8008e74 <__lshift+0xa4>
 8008e70:	f108 0602 	add.w	r6, r8, #2
 8008e74:	3e01      	subs	r6, #1
 8008e76:	4638      	mov	r0, r7
 8008e78:	612e      	str	r6, [r5, #16]
 8008e7a:	4621      	mov	r1, r4
 8008e7c:	f7ff fdd8 	bl	8008a30 <_Bfree>
 8008e80:	4628      	mov	r0, r5
 8008e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e86:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	e7c5      	b.n	8008e1a <__lshift+0x4a>
 8008e8e:	3904      	subs	r1, #4
 8008e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e94:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e98:	459c      	cmp	ip, r3
 8008e9a:	d8f9      	bhi.n	8008e90 <__lshift+0xc0>
 8008e9c:	e7ea      	b.n	8008e74 <__lshift+0xa4>
 8008e9e:	bf00      	nop
 8008ea0:	0809ff04 	.word	0x0809ff04
 8008ea4:	0809ff15 	.word	0x0809ff15

08008ea8 <__mcmp>:
 8008ea8:	b530      	push	{r4, r5, lr}
 8008eaa:	6902      	ldr	r2, [r0, #16]
 8008eac:	690c      	ldr	r4, [r1, #16]
 8008eae:	1b12      	subs	r2, r2, r4
 8008eb0:	d10e      	bne.n	8008ed0 <__mcmp+0x28>
 8008eb2:	f100 0314 	add.w	r3, r0, #20
 8008eb6:	3114      	adds	r1, #20
 8008eb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ebc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ec0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008ec4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008ec8:	42a5      	cmp	r5, r4
 8008eca:	d003      	beq.n	8008ed4 <__mcmp+0x2c>
 8008ecc:	d305      	bcc.n	8008eda <__mcmp+0x32>
 8008ece:	2201      	movs	r2, #1
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	bd30      	pop	{r4, r5, pc}
 8008ed4:	4283      	cmp	r3, r0
 8008ed6:	d3f3      	bcc.n	8008ec0 <__mcmp+0x18>
 8008ed8:	e7fa      	b.n	8008ed0 <__mcmp+0x28>
 8008eda:	f04f 32ff 	mov.w	r2, #4294967295
 8008ede:	e7f7      	b.n	8008ed0 <__mcmp+0x28>

08008ee0 <__mdiff>:
 8008ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4620      	mov	r0, r4
 8008eec:	4690      	mov	r8, r2
 8008eee:	f7ff ffdb 	bl	8008ea8 <__mcmp>
 8008ef2:	1e05      	subs	r5, r0, #0
 8008ef4:	d110      	bne.n	8008f18 <__mdiff+0x38>
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7ff fd59 	bl	80089b0 <_Balloc>
 8008efe:	b930      	cbnz	r0, 8008f0e <__mdiff+0x2e>
 8008f00:	4b3a      	ldr	r3, [pc, #232]	; (8008fec <__mdiff+0x10c>)
 8008f02:	4602      	mov	r2, r0
 8008f04:	f240 2137 	movw	r1, #567	; 0x237
 8008f08:	4839      	ldr	r0, [pc, #228]	; (8008ff0 <__mdiff+0x110>)
 8008f0a:	f000 fb0b 	bl	8009524 <__assert_func>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008f14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f18:	bfa4      	itt	ge
 8008f1a:	4643      	movge	r3, r8
 8008f1c:	46a0      	movge	r8, r4
 8008f1e:	4630      	mov	r0, r6
 8008f20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f24:	bfa6      	itte	ge
 8008f26:	461c      	movge	r4, r3
 8008f28:	2500      	movge	r5, #0
 8008f2a:	2501      	movlt	r5, #1
 8008f2c:	f7ff fd40 	bl	80089b0 <_Balloc>
 8008f30:	b920      	cbnz	r0, 8008f3c <__mdiff+0x5c>
 8008f32:	4b2e      	ldr	r3, [pc, #184]	; (8008fec <__mdiff+0x10c>)
 8008f34:	4602      	mov	r2, r0
 8008f36:	f240 2145 	movw	r1, #581	; 0x245
 8008f3a:	e7e5      	b.n	8008f08 <__mdiff+0x28>
 8008f3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f40:	6926      	ldr	r6, [r4, #16]
 8008f42:	60c5      	str	r5, [r0, #12]
 8008f44:	f104 0914 	add.w	r9, r4, #20
 8008f48:	f108 0514 	add.w	r5, r8, #20
 8008f4c:	f100 0e14 	add.w	lr, r0, #20
 8008f50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f58:	f108 0210 	add.w	r2, r8, #16
 8008f5c:	46f2      	mov	sl, lr
 8008f5e:	2100      	movs	r1, #0
 8008f60:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f68:	fa11 f88b 	uxtah	r8, r1, fp
 8008f6c:	b299      	uxth	r1, r3
 8008f6e:	0c1b      	lsrs	r3, r3, #16
 8008f70:	eba8 0801 	sub.w	r8, r8, r1
 8008f74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f7c:	fa1f f888 	uxth.w	r8, r8
 8008f80:	1419      	asrs	r1, r3, #16
 8008f82:	454e      	cmp	r6, r9
 8008f84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f88:	f84a 3b04 	str.w	r3, [sl], #4
 8008f8c:	d8e8      	bhi.n	8008f60 <__mdiff+0x80>
 8008f8e:	1b33      	subs	r3, r6, r4
 8008f90:	3b15      	subs	r3, #21
 8008f92:	f023 0303 	bic.w	r3, r3, #3
 8008f96:	3304      	adds	r3, #4
 8008f98:	3415      	adds	r4, #21
 8008f9a:	42a6      	cmp	r6, r4
 8008f9c:	bf38      	it	cc
 8008f9e:	2304      	movcc	r3, #4
 8008fa0:	441d      	add	r5, r3
 8008fa2:	4473      	add	r3, lr
 8008fa4:	469e      	mov	lr, r3
 8008fa6:	462e      	mov	r6, r5
 8008fa8:	4566      	cmp	r6, ip
 8008faa:	d30e      	bcc.n	8008fca <__mdiff+0xea>
 8008fac:	f10c 0203 	add.w	r2, ip, #3
 8008fb0:	1b52      	subs	r2, r2, r5
 8008fb2:	f022 0203 	bic.w	r2, r2, #3
 8008fb6:	3d03      	subs	r5, #3
 8008fb8:	45ac      	cmp	ip, r5
 8008fba:	bf38      	it	cc
 8008fbc:	2200      	movcc	r2, #0
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008fc4:	b17a      	cbz	r2, 8008fe6 <__mdiff+0x106>
 8008fc6:	6107      	str	r7, [r0, #16]
 8008fc8:	e7a4      	b.n	8008f14 <__mdiff+0x34>
 8008fca:	f856 8b04 	ldr.w	r8, [r6], #4
 8008fce:	fa11 f288 	uxtah	r2, r1, r8
 8008fd2:	1414      	asrs	r4, r2, #16
 8008fd4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fd8:	b292      	uxth	r2, r2
 8008fda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fde:	f84e 2b04 	str.w	r2, [lr], #4
 8008fe2:	1421      	asrs	r1, r4, #16
 8008fe4:	e7e0      	b.n	8008fa8 <__mdiff+0xc8>
 8008fe6:	3f01      	subs	r7, #1
 8008fe8:	e7ea      	b.n	8008fc0 <__mdiff+0xe0>
 8008fea:	bf00      	nop
 8008fec:	0809ff04 	.word	0x0809ff04
 8008ff0:	0809ff15 	.word	0x0809ff15

08008ff4 <__d2b>:
 8008ff4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ff8:	460f      	mov	r7, r1
 8008ffa:	2101      	movs	r1, #1
 8008ffc:	ec59 8b10 	vmov	r8, r9, d0
 8009000:	4616      	mov	r6, r2
 8009002:	f7ff fcd5 	bl	80089b0 <_Balloc>
 8009006:	4604      	mov	r4, r0
 8009008:	b930      	cbnz	r0, 8009018 <__d2b+0x24>
 800900a:	4602      	mov	r2, r0
 800900c:	4b24      	ldr	r3, [pc, #144]	; (80090a0 <__d2b+0xac>)
 800900e:	4825      	ldr	r0, [pc, #148]	; (80090a4 <__d2b+0xb0>)
 8009010:	f240 310f 	movw	r1, #783	; 0x30f
 8009014:	f000 fa86 	bl	8009524 <__assert_func>
 8009018:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800901c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009020:	bb2d      	cbnz	r5, 800906e <__d2b+0x7a>
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	f1b8 0300 	subs.w	r3, r8, #0
 8009028:	d026      	beq.n	8009078 <__d2b+0x84>
 800902a:	4668      	mov	r0, sp
 800902c:	9300      	str	r3, [sp, #0]
 800902e:	f7ff fd87 	bl	8008b40 <__lo0bits>
 8009032:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009036:	b1e8      	cbz	r0, 8009074 <__d2b+0x80>
 8009038:	f1c0 0320 	rsb	r3, r0, #32
 800903c:	fa02 f303 	lsl.w	r3, r2, r3
 8009040:	430b      	orrs	r3, r1
 8009042:	40c2      	lsrs	r2, r0
 8009044:	6163      	str	r3, [r4, #20]
 8009046:	9201      	str	r2, [sp, #4]
 8009048:	9b01      	ldr	r3, [sp, #4]
 800904a:	61a3      	str	r3, [r4, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	bf14      	ite	ne
 8009050:	2202      	movne	r2, #2
 8009052:	2201      	moveq	r2, #1
 8009054:	6122      	str	r2, [r4, #16]
 8009056:	b1bd      	cbz	r5, 8009088 <__d2b+0x94>
 8009058:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800905c:	4405      	add	r5, r0
 800905e:	603d      	str	r5, [r7, #0]
 8009060:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009064:	6030      	str	r0, [r6, #0]
 8009066:	4620      	mov	r0, r4
 8009068:	b003      	add	sp, #12
 800906a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800906e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009072:	e7d6      	b.n	8009022 <__d2b+0x2e>
 8009074:	6161      	str	r1, [r4, #20]
 8009076:	e7e7      	b.n	8009048 <__d2b+0x54>
 8009078:	a801      	add	r0, sp, #4
 800907a:	f7ff fd61 	bl	8008b40 <__lo0bits>
 800907e:	9b01      	ldr	r3, [sp, #4]
 8009080:	6163      	str	r3, [r4, #20]
 8009082:	3020      	adds	r0, #32
 8009084:	2201      	movs	r2, #1
 8009086:	e7e5      	b.n	8009054 <__d2b+0x60>
 8009088:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800908c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009090:	6038      	str	r0, [r7, #0]
 8009092:	6918      	ldr	r0, [r3, #16]
 8009094:	f7ff fd34 	bl	8008b00 <__hi0bits>
 8009098:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800909c:	e7e2      	b.n	8009064 <__d2b+0x70>
 800909e:	bf00      	nop
 80090a0:	0809ff04 	.word	0x0809ff04
 80090a4:	0809ff15 	.word	0x0809ff15

080090a8 <__ssputs_r>:
 80090a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090ac:	688e      	ldr	r6, [r1, #8]
 80090ae:	461f      	mov	r7, r3
 80090b0:	42be      	cmp	r6, r7
 80090b2:	680b      	ldr	r3, [r1, #0]
 80090b4:	4682      	mov	sl, r0
 80090b6:	460c      	mov	r4, r1
 80090b8:	4690      	mov	r8, r2
 80090ba:	d82c      	bhi.n	8009116 <__ssputs_r+0x6e>
 80090bc:	898a      	ldrh	r2, [r1, #12]
 80090be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090c2:	d026      	beq.n	8009112 <__ssputs_r+0x6a>
 80090c4:	6965      	ldr	r5, [r4, #20]
 80090c6:	6909      	ldr	r1, [r1, #16]
 80090c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090cc:	eba3 0901 	sub.w	r9, r3, r1
 80090d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090d4:	1c7b      	adds	r3, r7, #1
 80090d6:	444b      	add	r3, r9
 80090d8:	106d      	asrs	r5, r5, #1
 80090da:	429d      	cmp	r5, r3
 80090dc:	bf38      	it	cc
 80090de:	461d      	movcc	r5, r3
 80090e0:	0553      	lsls	r3, r2, #21
 80090e2:	d527      	bpl.n	8009134 <__ssputs_r+0x8c>
 80090e4:	4629      	mov	r1, r5
 80090e6:	f7ff fbd7 	bl	8008898 <_malloc_r>
 80090ea:	4606      	mov	r6, r0
 80090ec:	b360      	cbz	r0, 8009148 <__ssputs_r+0xa0>
 80090ee:	6921      	ldr	r1, [r4, #16]
 80090f0:	464a      	mov	r2, r9
 80090f2:	f000 fa09 	bl	8009508 <memcpy>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009100:	81a3      	strh	r3, [r4, #12]
 8009102:	6126      	str	r6, [r4, #16]
 8009104:	6165      	str	r5, [r4, #20]
 8009106:	444e      	add	r6, r9
 8009108:	eba5 0509 	sub.w	r5, r5, r9
 800910c:	6026      	str	r6, [r4, #0]
 800910e:	60a5      	str	r5, [r4, #8]
 8009110:	463e      	mov	r6, r7
 8009112:	42be      	cmp	r6, r7
 8009114:	d900      	bls.n	8009118 <__ssputs_r+0x70>
 8009116:	463e      	mov	r6, r7
 8009118:	6820      	ldr	r0, [r4, #0]
 800911a:	4632      	mov	r2, r6
 800911c:	4641      	mov	r1, r8
 800911e:	f000 f9c9 	bl	80094b4 <memmove>
 8009122:	68a3      	ldr	r3, [r4, #8]
 8009124:	1b9b      	subs	r3, r3, r6
 8009126:	60a3      	str	r3, [r4, #8]
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	4433      	add	r3, r6
 800912c:	6023      	str	r3, [r4, #0]
 800912e:	2000      	movs	r0, #0
 8009130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009134:	462a      	mov	r2, r5
 8009136:	f000 fa3b 	bl	80095b0 <_realloc_r>
 800913a:	4606      	mov	r6, r0
 800913c:	2800      	cmp	r0, #0
 800913e:	d1e0      	bne.n	8009102 <__ssputs_r+0x5a>
 8009140:	6921      	ldr	r1, [r4, #16]
 8009142:	4650      	mov	r0, sl
 8009144:	f7ff fb34 	bl	80087b0 <_free_r>
 8009148:	230c      	movs	r3, #12
 800914a:	f8ca 3000 	str.w	r3, [sl]
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	f04f 30ff 	mov.w	r0, #4294967295
 800915a:	e7e9      	b.n	8009130 <__ssputs_r+0x88>

0800915c <_svfiprintf_r>:
 800915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	4698      	mov	r8, r3
 8009162:	898b      	ldrh	r3, [r1, #12]
 8009164:	061b      	lsls	r3, r3, #24
 8009166:	b09d      	sub	sp, #116	; 0x74
 8009168:	4607      	mov	r7, r0
 800916a:	460d      	mov	r5, r1
 800916c:	4614      	mov	r4, r2
 800916e:	d50e      	bpl.n	800918e <_svfiprintf_r+0x32>
 8009170:	690b      	ldr	r3, [r1, #16]
 8009172:	b963      	cbnz	r3, 800918e <_svfiprintf_r+0x32>
 8009174:	2140      	movs	r1, #64	; 0x40
 8009176:	f7ff fb8f 	bl	8008898 <_malloc_r>
 800917a:	6028      	str	r0, [r5, #0]
 800917c:	6128      	str	r0, [r5, #16]
 800917e:	b920      	cbnz	r0, 800918a <_svfiprintf_r+0x2e>
 8009180:	230c      	movs	r3, #12
 8009182:	603b      	str	r3, [r7, #0]
 8009184:	f04f 30ff 	mov.w	r0, #4294967295
 8009188:	e0d0      	b.n	800932c <_svfiprintf_r+0x1d0>
 800918a:	2340      	movs	r3, #64	; 0x40
 800918c:	616b      	str	r3, [r5, #20]
 800918e:	2300      	movs	r3, #0
 8009190:	9309      	str	r3, [sp, #36]	; 0x24
 8009192:	2320      	movs	r3, #32
 8009194:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009198:	f8cd 800c 	str.w	r8, [sp, #12]
 800919c:	2330      	movs	r3, #48	; 0x30
 800919e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009344 <_svfiprintf_r+0x1e8>
 80091a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091a6:	f04f 0901 	mov.w	r9, #1
 80091aa:	4623      	mov	r3, r4
 80091ac:	469a      	mov	sl, r3
 80091ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b2:	b10a      	cbz	r2, 80091b8 <_svfiprintf_r+0x5c>
 80091b4:	2a25      	cmp	r2, #37	; 0x25
 80091b6:	d1f9      	bne.n	80091ac <_svfiprintf_r+0x50>
 80091b8:	ebba 0b04 	subs.w	fp, sl, r4
 80091bc:	d00b      	beq.n	80091d6 <_svfiprintf_r+0x7a>
 80091be:	465b      	mov	r3, fp
 80091c0:	4622      	mov	r2, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	4638      	mov	r0, r7
 80091c6:	f7ff ff6f 	bl	80090a8 <__ssputs_r>
 80091ca:	3001      	adds	r0, #1
 80091cc:	f000 80a9 	beq.w	8009322 <_svfiprintf_r+0x1c6>
 80091d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d2:	445a      	add	r2, fp
 80091d4:	9209      	str	r2, [sp, #36]	; 0x24
 80091d6:	f89a 3000 	ldrb.w	r3, [sl]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	f000 80a1 	beq.w	8009322 <_svfiprintf_r+0x1c6>
 80091e0:	2300      	movs	r3, #0
 80091e2:	f04f 32ff 	mov.w	r2, #4294967295
 80091e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ea:	f10a 0a01 	add.w	sl, sl, #1
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	9307      	str	r3, [sp, #28]
 80091f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091f6:	931a      	str	r3, [sp, #104]	; 0x68
 80091f8:	4654      	mov	r4, sl
 80091fa:	2205      	movs	r2, #5
 80091fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009200:	4850      	ldr	r0, [pc, #320]	; (8009344 <_svfiprintf_r+0x1e8>)
 8009202:	f7f7 f81d 	bl	8000240 <memchr>
 8009206:	9a04      	ldr	r2, [sp, #16]
 8009208:	b9d8      	cbnz	r0, 8009242 <_svfiprintf_r+0xe6>
 800920a:	06d0      	lsls	r0, r2, #27
 800920c:	bf44      	itt	mi
 800920e:	2320      	movmi	r3, #32
 8009210:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009214:	0711      	lsls	r1, r2, #28
 8009216:	bf44      	itt	mi
 8009218:	232b      	movmi	r3, #43	; 0x2b
 800921a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800921e:	f89a 3000 	ldrb.w	r3, [sl]
 8009222:	2b2a      	cmp	r3, #42	; 0x2a
 8009224:	d015      	beq.n	8009252 <_svfiprintf_r+0xf6>
 8009226:	9a07      	ldr	r2, [sp, #28]
 8009228:	4654      	mov	r4, sl
 800922a:	2000      	movs	r0, #0
 800922c:	f04f 0c0a 	mov.w	ip, #10
 8009230:	4621      	mov	r1, r4
 8009232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009236:	3b30      	subs	r3, #48	; 0x30
 8009238:	2b09      	cmp	r3, #9
 800923a:	d94d      	bls.n	80092d8 <_svfiprintf_r+0x17c>
 800923c:	b1b0      	cbz	r0, 800926c <_svfiprintf_r+0x110>
 800923e:	9207      	str	r2, [sp, #28]
 8009240:	e014      	b.n	800926c <_svfiprintf_r+0x110>
 8009242:	eba0 0308 	sub.w	r3, r0, r8
 8009246:	fa09 f303 	lsl.w	r3, r9, r3
 800924a:	4313      	orrs	r3, r2
 800924c:	9304      	str	r3, [sp, #16]
 800924e:	46a2      	mov	sl, r4
 8009250:	e7d2      	b.n	80091f8 <_svfiprintf_r+0x9c>
 8009252:	9b03      	ldr	r3, [sp, #12]
 8009254:	1d19      	adds	r1, r3, #4
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	9103      	str	r1, [sp, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	bfbb      	ittet	lt
 800925e:	425b      	neglt	r3, r3
 8009260:	f042 0202 	orrlt.w	r2, r2, #2
 8009264:	9307      	strge	r3, [sp, #28]
 8009266:	9307      	strlt	r3, [sp, #28]
 8009268:	bfb8      	it	lt
 800926a:	9204      	strlt	r2, [sp, #16]
 800926c:	7823      	ldrb	r3, [r4, #0]
 800926e:	2b2e      	cmp	r3, #46	; 0x2e
 8009270:	d10c      	bne.n	800928c <_svfiprintf_r+0x130>
 8009272:	7863      	ldrb	r3, [r4, #1]
 8009274:	2b2a      	cmp	r3, #42	; 0x2a
 8009276:	d134      	bne.n	80092e2 <_svfiprintf_r+0x186>
 8009278:	9b03      	ldr	r3, [sp, #12]
 800927a:	1d1a      	adds	r2, r3, #4
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	9203      	str	r2, [sp, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	bfb8      	it	lt
 8009284:	f04f 33ff 	movlt.w	r3, #4294967295
 8009288:	3402      	adds	r4, #2
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009354 <_svfiprintf_r+0x1f8>
 8009290:	7821      	ldrb	r1, [r4, #0]
 8009292:	2203      	movs	r2, #3
 8009294:	4650      	mov	r0, sl
 8009296:	f7f6 ffd3 	bl	8000240 <memchr>
 800929a:	b138      	cbz	r0, 80092ac <_svfiprintf_r+0x150>
 800929c:	9b04      	ldr	r3, [sp, #16]
 800929e:	eba0 000a 	sub.w	r0, r0, sl
 80092a2:	2240      	movs	r2, #64	; 0x40
 80092a4:	4082      	lsls	r2, r0
 80092a6:	4313      	orrs	r3, r2
 80092a8:	3401      	adds	r4, #1
 80092aa:	9304      	str	r3, [sp, #16]
 80092ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b0:	4825      	ldr	r0, [pc, #148]	; (8009348 <_svfiprintf_r+0x1ec>)
 80092b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092b6:	2206      	movs	r2, #6
 80092b8:	f7f6 ffc2 	bl	8000240 <memchr>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d038      	beq.n	8009332 <_svfiprintf_r+0x1d6>
 80092c0:	4b22      	ldr	r3, [pc, #136]	; (800934c <_svfiprintf_r+0x1f0>)
 80092c2:	bb1b      	cbnz	r3, 800930c <_svfiprintf_r+0x1b0>
 80092c4:	9b03      	ldr	r3, [sp, #12]
 80092c6:	3307      	adds	r3, #7
 80092c8:	f023 0307 	bic.w	r3, r3, #7
 80092cc:	3308      	adds	r3, #8
 80092ce:	9303      	str	r3, [sp, #12]
 80092d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092d2:	4433      	add	r3, r6
 80092d4:	9309      	str	r3, [sp, #36]	; 0x24
 80092d6:	e768      	b.n	80091aa <_svfiprintf_r+0x4e>
 80092d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80092dc:	460c      	mov	r4, r1
 80092de:	2001      	movs	r0, #1
 80092e0:	e7a6      	b.n	8009230 <_svfiprintf_r+0xd4>
 80092e2:	2300      	movs	r3, #0
 80092e4:	3401      	adds	r4, #1
 80092e6:	9305      	str	r3, [sp, #20]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f04f 0c0a 	mov.w	ip, #10
 80092ee:	4620      	mov	r0, r4
 80092f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092f4:	3a30      	subs	r2, #48	; 0x30
 80092f6:	2a09      	cmp	r2, #9
 80092f8:	d903      	bls.n	8009302 <_svfiprintf_r+0x1a6>
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d0c6      	beq.n	800928c <_svfiprintf_r+0x130>
 80092fe:	9105      	str	r1, [sp, #20]
 8009300:	e7c4      	b.n	800928c <_svfiprintf_r+0x130>
 8009302:	fb0c 2101 	mla	r1, ip, r1, r2
 8009306:	4604      	mov	r4, r0
 8009308:	2301      	movs	r3, #1
 800930a:	e7f0      	b.n	80092ee <_svfiprintf_r+0x192>
 800930c:	ab03      	add	r3, sp, #12
 800930e:	9300      	str	r3, [sp, #0]
 8009310:	462a      	mov	r2, r5
 8009312:	4b0f      	ldr	r3, [pc, #60]	; (8009350 <_svfiprintf_r+0x1f4>)
 8009314:	a904      	add	r1, sp, #16
 8009316:	4638      	mov	r0, r7
 8009318:	f7fd ff1a 	bl	8007150 <_printf_float>
 800931c:	1c42      	adds	r2, r0, #1
 800931e:	4606      	mov	r6, r0
 8009320:	d1d6      	bne.n	80092d0 <_svfiprintf_r+0x174>
 8009322:	89ab      	ldrh	r3, [r5, #12]
 8009324:	065b      	lsls	r3, r3, #25
 8009326:	f53f af2d 	bmi.w	8009184 <_svfiprintf_r+0x28>
 800932a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800932c:	b01d      	add	sp, #116	; 0x74
 800932e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009332:	ab03      	add	r3, sp, #12
 8009334:	9300      	str	r3, [sp, #0]
 8009336:	462a      	mov	r2, r5
 8009338:	4b05      	ldr	r3, [pc, #20]	; (8009350 <_svfiprintf_r+0x1f4>)
 800933a:	a904      	add	r1, sp, #16
 800933c:	4638      	mov	r0, r7
 800933e:	f7fe f98f 	bl	8007660 <_printf_i>
 8009342:	e7eb      	b.n	800931c <_svfiprintf_r+0x1c0>
 8009344:	080a006c 	.word	0x080a006c
 8009348:	080a0076 	.word	0x080a0076
 800934c:	08007151 	.word	0x08007151
 8009350:	080090a9 	.word	0x080090a9
 8009354:	080a0072 	.word	0x080a0072

08009358 <__sflush_r>:
 8009358:	898a      	ldrh	r2, [r1, #12]
 800935a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800935e:	4605      	mov	r5, r0
 8009360:	0710      	lsls	r0, r2, #28
 8009362:	460c      	mov	r4, r1
 8009364:	d458      	bmi.n	8009418 <__sflush_r+0xc0>
 8009366:	684b      	ldr	r3, [r1, #4]
 8009368:	2b00      	cmp	r3, #0
 800936a:	dc05      	bgt.n	8009378 <__sflush_r+0x20>
 800936c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800936e:	2b00      	cmp	r3, #0
 8009370:	dc02      	bgt.n	8009378 <__sflush_r+0x20>
 8009372:	2000      	movs	r0, #0
 8009374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800937a:	2e00      	cmp	r6, #0
 800937c:	d0f9      	beq.n	8009372 <__sflush_r+0x1a>
 800937e:	2300      	movs	r3, #0
 8009380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009384:	682f      	ldr	r7, [r5, #0]
 8009386:	6a21      	ldr	r1, [r4, #32]
 8009388:	602b      	str	r3, [r5, #0]
 800938a:	d032      	beq.n	80093f2 <__sflush_r+0x9a>
 800938c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800938e:	89a3      	ldrh	r3, [r4, #12]
 8009390:	075a      	lsls	r2, r3, #29
 8009392:	d505      	bpl.n	80093a0 <__sflush_r+0x48>
 8009394:	6863      	ldr	r3, [r4, #4]
 8009396:	1ac0      	subs	r0, r0, r3
 8009398:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800939a:	b10b      	cbz	r3, 80093a0 <__sflush_r+0x48>
 800939c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800939e:	1ac0      	subs	r0, r0, r3
 80093a0:	2300      	movs	r3, #0
 80093a2:	4602      	mov	r2, r0
 80093a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80093a6:	6a21      	ldr	r1, [r4, #32]
 80093a8:	4628      	mov	r0, r5
 80093aa:	47b0      	blx	r6
 80093ac:	1c43      	adds	r3, r0, #1
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	d106      	bne.n	80093c0 <__sflush_r+0x68>
 80093b2:	6829      	ldr	r1, [r5, #0]
 80093b4:	291d      	cmp	r1, #29
 80093b6:	d82b      	bhi.n	8009410 <__sflush_r+0xb8>
 80093b8:	4a29      	ldr	r2, [pc, #164]	; (8009460 <__sflush_r+0x108>)
 80093ba:	410a      	asrs	r2, r1
 80093bc:	07d6      	lsls	r6, r2, #31
 80093be:	d427      	bmi.n	8009410 <__sflush_r+0xb8>
 80093c0:	2200      	movs	r2, #0
 80093c2:	6062      	str	r2, [r4, #4]
 80093c4:	04d9      	lsls	r1, r3, #19
 80093c6:	6922      	ldr	r2, [r4, #16]
 80093c8:	6022      	str	r2, [r4, #0]
 80093ca:	d504      	bpl.n	80093d6 <__sflush_r+0x7e>
 80093cc:	1c42      	adds	r2, r0, #1
 80093ce:	d101      	bne.n	80093d4 <__sflush_r+0x7c>
 80093d0:	682b      	ldr	r3, [r5, #0]
 80093d2:	b903      	cbnz	r3, 80093d6 <__sflush_r+0x7e>
 80093d4:	6560      	str	r0, [r4, #84]	; 0x54
 80093d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093d8:	602f      	str	r7, [r5, #0]
 80093da:	2900      	cmp	r1, #0
 80093dc:	d0c9      	beq.n	8009372 <__sflush_r+0x1a>
 80093de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093e2:	4299      	cmp	r1, r3
 80093e4:	d002      	beq.n	80093ec <__sflush_r+0x94>
 80093e6:	4628      	mov	r0, r5
 80093e8:	f7ff f9e2 	bl	80087b0 <_free_r>
 80093ec:	2000      	movs	r0, #0
 80093ee:	6360      	str	r0, [r4, #52]	; 0x34
 80093f0:	e7c0      	b.n	8009374 <__sflush_r+0x1c>
 80093f2:	2301      	movs	r3, #1
 80093f4:	4628      	mov	r0, r5
 80093f6:	47b0      	blx	r6
 80093f8:	1c41      	adds	r1, r0, #1
 80093fa:	d1c8      	bne.n	800938e <__sflush_r+0x36>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0c5      	beq.n	800938e <__sflush_r+0x36>
 8009402:	2b1d      	cmp	r3, #29
 8009404:	d001      	beq.n	800940a <__sflush_r+0xb2>
 8009406:	2b16      	cmp	r3, #22
 8009408:	d101      	bne.n	800940e <__sflush_r+0xb6>
 800940a:	602f      	str	r7, [r5, #0]
 800940c:	e7b1      	b.n	8009372 <__sflush_r+0x1a>
 800940e:	89a3      	ldrh	r3, [r4, #12]
 8009410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009414:	81a3      	strh	r3, [r4, #12]
 8009416:	e7ad      	b.n	8009374 <__sflush_r+0x1c>
 8009418:	690f      	ldr	r7, [r1, #16]
 800941a:	2f00      	cmp	r7, #0
 800941c:	d0a9      	beq.n	8009372 <__sflush_r+0x1a>
 800941e:	0793      	lsls	r3, r2, #30
 8009420:	680e      	ldr	r6, [r1, #0]
 8009422:	bf08      	it	eq
 8009424:	694b      	ldreq	r3, [r1, #20]
 8009426:	600f      	str	r7, [r1, #0]
 8009428:	bf18      	it	ne
 800942a:	2300      	movne	r3, #0
 800942c:	eba6 0807 	sub.w	r8, r6, r7
 8009430:	608b      	str	r3, [r1, #8]
 8009432:	f1b8 0f00 	cmp.w	r8, #0
 8009436:	dd9c      	ble.n	8009372 <__sflush_r+0x1a>
 8009438:	6a21      	ldr	r1, [r4, #32]
 800943a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800943c:	4643      	mov	r3, r8
 800943e:	463a      	mov	r2, r7
 8009440:	4628      	mov	r0, r5
 8009442:	47b0      	blx	r6
 8009444:	2800      	cmp	r0, #0
 8009446:	dc06      	bgt.n	8009456 <__sflush_r+0xfe>
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800944e:	81a3      	strh	r3, [r4, #12]
 8009450:	f04f 30ff 	mov.w	r0, #4294967295
 8009454:	e78e      	b.n	8009374 <__sflush_r+0x1c>
 8009456:	4407      	add	r7, r0
 8009458:	eba8 0800 	sub.w	r8, r8, r0
 800945c:	e7e9      	b.n	8009432 <__sflush_r+0xda>
 800945e:	bf00      	nop
 8009460:	dfbffffe 	.word	0xdfbffffe

08009464 <_fflush_r>:
 8009464:	b538      	push	{r3, r4, r5, lr}
 8009466:	690b      	ldr	r3, [r1, #16]
 8009468:	4605      	mov	r5, r0
 800946a:	460c      	mov	r4, r1
 800946c:	b913      	cbnz	r3, 8009474 <_fflush_r+0x10>
 800946e:	2500      	movs	r5, #0
 8009470:	4628      	mov	r0, r5
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	b118      	cbz	r0, 800947e <_fflush_r+0x1a>
 8009476:	6a03      	ldr	r3, [r0, #32]
 8009478:	b90b      	cbnz	r3, 800947e <_fflush_r+0x1a>
 800947a:	f7fe fa8d 	bl	8007998 <__sinit>
 800947e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d0f3      	beq.n	800946e <_fflush_r+0xa>
 8009486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009488:	07d0      	lsls	r0, r2, #31
 800948a:	d404      	bmi.n	8009496 <_fflush_r+0x32>
 800948c:	0599      	lsls	r1, r3, #22
 800948e:	d402      	bmi.n	8009496 <_fflush_r+0x32>
 8009490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009492:	f7fe fb97 	bl	8007bc4 <__retarget_lock_acquire_recursive>
 8009496:	4628      	mov	r0, r5
 8009498:	4621      	mov	r1, r4
 800949a:	f7ff ff5d 	bl	8009358 <__sflush_r>
 800949e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094a0:	07da      	lsls	r2, r3, #31
 80094a2:	4605      	mov	r5, r0
 80094a4:	d4e4      	bmi.n	8009470 <_fflush_r+0xc>
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	059b      	lsls	r3, r3, #22
 80094aa:	d4e1      	bmi.n	8009470 <_fflush_r+0xc>
 80094ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094ae:	f7fe fb8a 	bl	8007bc6 <__retarget_lock_release_recursive>
 80094b2:	e7dd      	b.n	8009470 <_fflush_r+0xc>

080094b4 <memmove>:
 80094b4:	4288      	cmp	r0, r1
 80094b6:	b510      	push	{r4, lr}
 80094b8:	eb01 0402 	add.w	r4, r1, r2
 80094bc:	d902      	bls.n	80094c4 <memmove+0x10>
 80094be:	4284      	cmp	r4, r0
 80094c0:	4623      	mov	r3, r4
 80094c2:	d807      	bhi.n	80094d4 <memmove+0x20>
 80094c4:	1e43      	subs	r3, r0, #1
 80094c6:	42a1      	cmp	r1, r4
 80094c8:	d008      	beq.n	80094dc <memmove+0x28>
 80094ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094d2:	e7f8      	b.n	80094c6 <memmove+0x12>
 80094d4:	4402      	add	r2, r0
 80094d6:	4601      	mov	r1, r0
 80094d8:	428a      	cmp	r2, r1
 80094da:	d100      	bne.n	80094de <memmove+0x2a>
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094e6:	e7f7      	b.n	80094d8 <memmove+0x24>

080094e8 <_sbrk_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4d06      	ldr	r5, [pc, #24]	; (8009504 <_sbrk_r+0x1c>)
 80094ec:	2300      	movs	r3, #0
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	602b      	str	r3, [r5, #0]
 80094f4:	f7f7 ffd6 	bl	80014a4 <_sbrk>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	d102      	bne.n	8009502 <_sbrk_r+0x1a>
 80094fc:	682b      	ldr	r3, [r5, #0]
 80094fe:	b103      	cbz	r3, 8009502 <_sbrk_r+0x1a>
 8009500:	6023      	str	r3, [r4, #0]
 8009502:	bd38      	pop	{r3, r4, r5, pc}
 8009504:	20000630 	.word	0x20000630

08009508 <memcpy>:
 8009508:	440a      	add	r2, r1
 800950a:	4291      	cmp	r1, r2
 800950c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009510:	d100      	bne.n	8009514 <memcpy+0xc>
 8009512:	4770      	bx	lr
 8009514:	b510      	push	{r4, lr}
 8009516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800951a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800951e:	4291      	cmp	r1, r2
 8009520:	d1f9      	bne.n	8009516 <memcpy+0xe>
 8009522:	bd10      	pop	{r4, pc}

08009524 <__assert_func>:
 8009524:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009526:	4614      	mov	r4, r2
 8009528:	461a      	mov	r2, r3
 800952a:	4b09      	ldr	r3, [pc, #36]	; (8009550 <__assert_func+0x2c>)
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	4605      	mov	r5, r0
 8009530:	68d8      	ldr	r0, [r3, #12]
 8009532:	b14c      	cbz	r4, 8009548 <__assert_func+0x24>
 8009534:	4b07      	ldr	r3, [pc, #28]	; (8009554 <__assert_func+0x30>)
 8009536:	9100      	str	r1, [sp, #0]
 8009538:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800953c:	4906      	ldr	r1, [pc, #24]	; (8009558 <__assert_func+0x34>)
 800953e:	462b      	mov	r3, r5
 8009540:	f000 f872 	bl	8009628 <fiprintf>
 8009544:	f000 f882 	bl	800964c <abort>
 8009548:	4b04      	ldr	r3, [pc, #16]	; (800955c <__assert_func+0x38>)
 800954a:	461c      	mov	r4, r3
 800954c:	e7f3      	b.n	8009536 <__assert_func+0x12>
 800954e:	bf00      	nop
 8009550:	20000074 	.word	0x20000074
 8009554:	080a0087 	.word	0x080a0087
 8009558:	080a0094 	.word	0x080a0094
 800955c:	080a00c2 	.word	0x080a00c2

08009560 <_calloc_r>:
 8009560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009562:	fba1 2402 	umull	r2, r4, r1, r2
 8009566:	b94c      	cbnz	r4, 800957c <_calloc_r+0x1c>
 8009568:	4611      	mov	r1, r2
 800956a:	9201      	str	r2, [sp, #4]
 800956c:	f7ff f994 	bl	8008898 <_malloc_r>
 8009570:	9a01      	ldr	r2, [sp, #4]
 8009572:	4605      	mov	r5, r0
 8009574:	b930      	cbnz	r0, 8009584 <_calloc_r+0x24>
 8009576:	4628      	mov	r0, r5
 8009578:	b003      	add	sp, #12
 800957a:	bd30      	pop	{r4, r5, pc}
 800957c:	220c      	movs	r2, #12
 800957e:	6002      	str	r2, [r0, #0]
 8009580:	2500      	movs	r5, #0
 8009582:	e7f8      	b.n	8009576 <_calloc_r+0x16>
 8009584:	4621      	mov	r1, r4
 8009586:	f7fe faa0 	bl	8007aca <memset>
 800958a:	e7f4      	b.n	8009576 <_calloc_r+0x16>

0800958c <__ascii_mbtowc>:
 800958c:	b082      	sub	sp, #8
 800958e:	b901      	cbnz	r1, 8009592 <__ascii_mbtowc+0x6>
 8009590:	a901      	add	r1, sp, #4
 8009592:	b142      	cbz	r2, 80095a6 <__ascii_mbtowc+0x1a>
 8009594:	b14b      	cbz	r3, 80095aa <__ascii_mbtowc+0x1e>
 8009596:	7813      	ldrb	r3, [r2, #0]
 8009598:	600b      	str	r3, [r1, #0]
 800959a:	7812      	ldrb	r2, [r2, #0]
 800959c:	1e10      	subs	r0, r2, #0
 800959e:	bf18      	it	ne
 80095a0:	2001      	movne	r0, #1
 80095a2:	b002      	add	sp, #8
 80095a4:	4770      	bx	lr
 80095a6:	4610      	mov	r0, r2
 80095a8:	e7fb      	b.n	80095a2 <__ascii_mbtowc+0x16>
 80095aa:	f06f 0001 	mvn.w	r0, #1
 80095ae:	e7f8      	b.n	80095a2 <__ascii_mbtowc+0x16>

080095b0 <_realloc_r>:
 80095b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b4:	4680      	mov	r8, r0
 80095b6:	4614      	mov	r4, r2
 80095b8:	460e      	mov	r6, r1
 80095ba:	b921      	cbnz	r1, 80095c6 <_realloc_r+0x16>
 80095bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095c0:	4611      	mov	r1, r2
 80095c2:	f7ff b969 	b.w	8008898 <_malloc_r>
 80095c6:	b92a      	cbnz	r2, 80095d4 <_realloc_r+0x24>
 80095c8:	f7ff f8f2 	bl	80087b0 <_free_r>
 80095cc:	4625      	mov	r5, r4
 80095ce:	4628      	mov	r0, r5
 80095d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d4:	f000 f841 	bl	800965a <_malloc_usable_size_r>
 80095d8:	4284      	cmp	r4, r0
 80095da:	4607      	mov	r7, r0
 80095dc:	d802      	bhi.n	80095e4 <_realloc_r+0x34>
 80095de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095e2:	d812      	bhi.n	800960a <_realloc_r+0x5a>
 80095e4:	4621      	mov	r1, r4
 80095e6:	4640      	mov	r0, r8
 80095e8:	f7ff f956 	bl	8008898 <_malloc_r>
 80095ec:	4605      	mov	r5, r0
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d0ed      	beq.n	80095ce <_realloc_r+0x1e>
 80095f2:	42bc      	cmp	r4, r7
 80095f4:	4622      	mov	r2, r4
 80095f6:	4631      	mov	r1, r6
 80095f8:	bf28      	it	cs
 80095fa:	463a      	movcs	r2, r7
 80095fc:	f7ff ff84 	bl	8009508 <memcpy>
 8009600:	4631      	mov	r1, r6
 8009602:	4640      	mov	r0, r8
 8009604:	f7ff f8d4 	bl	80087b0 <_free_r>
 8009608:	e7e1      	b.n	80095ce <_realloc_r+0x1e>
 800960a:	4635      	mov	r5, r6
 800960c:	e7df      	b.n	80095ce <_realloc_r+0x1e>

0800960e <__ascii_wctomb>:
 800960e:	b149      	cbz	r1, 8009624 <__ascii_wctomb+0x16>
 8009610:	2aff      	cmp	r2, #255	; 0xff
 8009612:	bf85      	ittet	hi
 8009614:	238a      	movhi	r3, #138	; 0x8a
 8009616:	6003      	strhi	r3, [r0, #0]
 8009618:	700a      	strbls	r2, [r1, #0]
 800961a:	f04f 30ff 	movhi.w	r0, #4294967295
 800961e:	bf98      	it	ls
 8009620:	2001      	movls	r0, #1
 8009622:	4770      	bx	lr
 8009624:	4608      	mov	r0, r1
 8009626:	4770      	bx	lr

08009628 <fiprintf>:
 8009628:	b40e      	push	{r1, r2, r3}
 800962a:	b503      	push	{r0, r1, lr}
 800962c:	4601      	mov	r1, r0
 800962e:	ab03      	add	r3, sp, #12
 8009630:	4805      	ldr	r0, [pc, #20]	; (8009648 <fiprintf+0x20>)
 8009632:	f853 2b04 	ldr.w	r2, [r3], #4
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	f000 f83f 	bl	80096bc <_vfiprintf_r>
 800963e:	b002      	add	sp, #8
 8009640:	f85d eb04 	ldr.w	lr, [sp], #4
 8009644:	b003      	add	sp, #12
 8009646:	4770      	bx	lr
 8009648:	20000074 	.word	0x20000074

0800964c <abort>:
 800964c:	b508      	push	{r3, lr}
 800964e:	2006      	movs	r0, #6
 8009650:	f000 fa0c 	bl	8009a6c <raise>
 8009654:	2001      	movs	r0, #1
 8009656:	f7f7 fead 	bl	80013b4 <_exit>

0800965a <_malloc_usable_size_r>:
 800965a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800965e:	1f18      	subs	r0, r3, #4
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfbc      	itt	lt
 8009664:	580b      	ldrlt	r3, [r1, r0]
 8009666:	18c0      	addlt	r0, r0, r3
 8009668:	4770      	bx	lr

0800966a <__sfputc_r>:
 800966a:	6893      	ldr	r3, [r2, #8]
 800966c:	3b01      	subs	r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	b410      	push	{r4}
 8009672:	6093      	str	r3, [r2, #8]
 8009674:	da08      	bge.n	8009688 <__sfputc_r+0x1e>
 8009676:	6994      	ldr	r4, [r2, #24]
 8009678:	42a3      	cmp	r3, r4
 800967a:	db01      	blt.n	8009680 <__sfputc_r+0x16>
 800967c:	290a      	cmp	r1, #10
 800967e:	d103      	bne.n	8009688 <__sfputc_r+0x1e>
 8009680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009684:	f000 b934 	b.w	80098f0 <__swbuf_r>
 8009688:	6813      	ldr	r3, [r2, #0]
 800968a:	1c58      	adds	r0, r3, #1
 800968c:	6010      	str	r0, [r2, #0]
 800968e:	7019      	strb	r1, [r3, #0]
 8009690:	4608      	mov	r0, r1
 8009692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009696:	4770      	bx	lr

08009698 <__sfputs_r>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	4614      	mov	r4, r2
 80096a0:	18d5      	adds	r5, r2, r3
 80096a2:	42ac      	cmp	r4, r5
 80096a4:	d101      	bne.n	80096aa <__sfputs_r+0x12>
 80096a6:	2000      	movs	r0, #0
 80096a8:	e007      	b.n	80096ba <__sfputs_r+0x22>
 80096aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ae:	463a      	mov	r2, r7
 80096b0:	4630      	mov	r0, r6
 80096b2:	f7ff ffda 	bl	800966a <__sfputc_r>
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	d1f3      	bne.n	80096a2 <__sfputs_r+0xa>
 80096ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096bc <_vfiprintf_r>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	460d      	mov	r5, r1
 80096c2:	b09d      	sub	sp, #116	; 0x74
 80096c4:	4614      	mov	r4, r2
 80096c6:	4698      	mov	r8, r3
 80096c8:	4606      	mov	r6, r0
 80096ca:	b118      	cbz	r0, 80096d4 <_vfiprintf_r+0x18>
 80096cc:	6a03      	ldr	r3, [r0, #32]
 80096ce:	b90b      	cbnz	r3, 80096d4 <_vfiprintf_r+0x18>
 80096d0:	f7fe f962 	bl	8007998 <__sinit>
 80096d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d6:	07d9      	lsls	r1, r3, #31
 80096d8:	d405      	bmi.n	80096e6 <_vfiprintf_r+0x2a>
 80096da:	89ab      	ldrh	r3, [r5, #12]
 80096dc:	059a      	lsls	r2, r3, #22
 80096de:	d402      	bmi.n	80096e6 <_vfiprintf_r+0x2a>
 80096e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096e2:	f7fe fa6f 	bl	8007bc4 <__retarget_lock_acquire_recursive>
 80096e6:	89ab      	ldrh	r3, [r5, #12]
 80096e8:	071b      	lsls	r3, r3, #28
 80096ea:	d501      	bpl.n	80096f0 <_vfiprintf_r+0x34>
 80096ec:	692b      	ldr	r3, [r5, #16]
 80096ee:	b99b      	cbnz	r3, 8009718 <_vfiprintf_r+0x5c>
 80096f0:	4629      	mov	r1, r5
 80096f2:	4630      	mov	r0, r6
 80096f4:	f000 f93a 	bl	800996c <__swsetup_r>
 80096f8:	b170      	cbz	r0, 8009718 <_vfiprintf_r+0x5c>
 80096fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096fc:	07dc      	lsls	r4, r3, #31
 80096fe:	d504      	bpl.n	800970a <_vfiprintf_r+0x4e>
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	b01d      	add	sp, #116	; 0x74
 8009706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970a:	89ab      	ldrh	r3, [r5, #12]
 800970c:	0598      	lsls	r0, r3, #22
 800970e:	d4f7      	bmi.n	8009700 <_vfiprintf_r+0x44>
 8009710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009712:	f7fe fa58 	bl	8007bc6 <__retarget_lock_release_recursive>
 8009716:	e7f3      	b.n	8009700 <_vfiprintf_r+0x44>
 8009718:	2300      	movs	r3, #0
 800971a:	9309      	str	r3, [sp, #36]	; 0x24
 800971c:	2320      	movs	r3, #32
 800971e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009722:	f8cd 800c 	str.w	r8, [sp, #12]
 8009726:	2330      	movs	r3, #48	; 0x30
 8009728:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80098dc <_vfiprintf_r+0x220>
 800972c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009730:	f04f 0901 	mov.w	r9, #1
 8009734:	4623      	mov	r3, r4
 8009736:	469a      	mov	sl, r3
 8009738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800973c:	b10a      	cbz	r2, 8009742 <_vfiprintf_r+0x86>
 800973e:	2a25      	cmp	r2, #37	; 0x25
 8009740:	d1f9      	bne.n	8009736 <_vfiprintf_r+0x7a>
 8009742:	ebba 0b04 	subs.w	fp, sl, r4
 8009746:	d00b      	beq.n	8009760 <_vfiprintf_r+0xa4>
 8009748:	465b      	mov	r3, fp
 800974a:	4622      	mov	r2, r4
 800974c:	4629      	mov	r1, r5
 800974e:	4630      	mov	r0, r6
 8009750:	f7ff ffa2 	bl	8009698 <__sfputs_r>
 8009754:	3001      	adds	r0, #1
 8009756:	f000 80a9 	beq.w	80098ac <_vfiprintf_r+0x1f0>
 800975a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800975c:	445a      	add	r2, fp
 800975e:	9209      	str	r2, [sp, #36]	; 0x24
 8009760:	f89a 3000 	ldrb.w	r3, [sl]
 8009764:	2b00      	cmp	r3, #0
 8009766:	f000 80a1 	beq.w	80098ac <_vfiprintf_r+0x1f0>
 800976a:	2300      	movs	r3, #0
 800976c:	f04f 32ff 	mov.w	r2, #4294967295
 8009770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009774:	f10a 0a01 	add.w	sl, sl, #1
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	9307      	str	r3, [sp, #28]
 800977c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009780:	931a      	str	r3, [sp, #104]	; 0x68
 8009782:	4654      	mov	r4, sl
 8009784:	2205      	movs	r2, #5
 8009786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800978a:	4854      	ldr	r0, [pc, #336]	; (80098dc <_vfiprintf_r+0x220>)
 800978c:	f7f6 fd58 	bl	8000240 <memchr>
 8009790:	9a04      	ldr	r2, [sp, #16]
 8009792:	b9d8      	cbnz	r0, 80097cc <_vfiprintf_r+0x110>
 8009794:	06d1      	lsls	r1, r2, #27
 8009796:	bf44      	itt	mi
 8009798:	2320      	movmi	r3, #32
 800979a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800979e:	0713      	lsls	r3, r2, #28
 80097a0:	bf44      	itt	mi
 80097a2:	232b      	movmi	r3, #43	; 0x2b
 80097a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a8:	f89a 3000 	ldrb.w	r3, [sl]
 80097ac:	2b2a      	cmp	r3, #42	; 0x2a
 80097ae:	d015      	beq.n	80097dc <_vfiprintf_r+0x120>
 80097b0:	9a07      	ldr	r2, [sp, #28]
 80097b2:	4654      	mov	r4, sl
 80097b4:	2000      	movs	r0, #0
 80097b6:	f04f 0c0a 	mov.w	ip, #10
 80097ba:	4621      	mov	r1, r4
 80097bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097c0:	3b30      	subs	r3, #48	; 0x30
 80097c2:	2b09      	cmp	r3, #9
 80097c4:	d94d      	bls.n	8009862 <_vfiprintf_r+0x1a6>
 80097c6:	b1b0      	cbz	r0, 80097f6 <_vfiprintf_r+0x13a>
 80097c8:	9207      	str	r2, [sp, #28]
 80097ca:	e014      	b.n	80097f6 <_vfiprintf_r+0x13a>
 80097cc:	eba0 0308 	sub.w	r3, r0, r8
 80097d0:	fa09 f303 	lsl.w	r3, r9, r3
 80097d4:	4313      	orrs	r3, r2
 80097d6:	9304      	str	r3, [sp, #16]
 80097d8:	46a2      	mov	sl, r4
 80097da:	e7d2      	b.n	8009782 <_vfiprintf_r+0xc6>
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	1d19      	adds	r1, r3, #4
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	9103      	str	r1, [sp, #12]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bfbb      	ittet	lt
 80097e8:	425b      	neglt	r3, r3
 80097ea:	f042 0202 	orrlt.w	r2, r2, #2
 80097ee:	9307      	strge	r3, [sp, #28]
 80097f0:	9307      	strlt	r3, [sp, #28]
 80097f2:	bfb8      	it	lt
 80097f4:	9204      	strlt	r2, [sp, #16]
 80097f6:	7823      	ldrb	r3, [r4, #0]
 80097f8:	2b2e      	cmp	r3, #46	; 0x2e
 80097fa:	d10c      	bne.n	8009816 <_vfiprintf_r+0x15a>
 80097fc:	7863      	ldrb	r3, [r4, #1]
 80097fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009800:	d134      	bne.n	800986c <_vfiprintf_r+0x1b0>
 8009802:	9b03      	ldr	r3, [sp, #12]
 8009804:	1d1a      	adds	r2, r3, #4
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	9203      	str	r2, [sp, #12]
 800980a:	2b00      	cmp	r3, #0
 800980c:	bfb8      	it	lt
 800980e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009812:	3402      	adds	r4, #2
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80098ec <_vfiprintf_r+0x230>
 800981a:	7821      	ldrb	r1, [r4, #0]
 800981c:	2203      	movs	r2, #3
 800981e:	4650      	mov	r0, sl
 8009820:	f7f6 fd0e 	bl	8000240 <memchr>
 8009824:	b138      	cbz	r0, 8009836 <_vfiprintf_r+0x17a>
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	eba0 000a 	sub.w	r0, r0, sl
 800982c:	2240      	movs	r2, #64	; 0x40
 800982e:	4082      	lsls	r2, r0
 8009830:	4313      	orrs	r3, r2
 8009832:	3401      	adds	r4, #1
 8009834:	9304      	str	r3, [sp, #16]
 8009836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800983a:	4829      	ldr	r0, [pc, #164]	; (80098e0 <_vfiprintf_r+0x224>)
 800983c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009840:	2206      	movs	r2, #6
 8009842:	f7f6 fcfd 	bl	8000240 <memchr>
 8009846:	2800      	cmp	r0, #0
 8009848:	d03f      	beq.n	80098ca <_vfiprintf_r+0x20e>
 800984a:	4b26      	ldr	r3, [pc, #152]	; (80098e4 <_vfiprintf_r+0x228>)
 800984c:	bb1b      	cbnz	r3, 8009896 <_vfiprintf_r+0x1da>
 800984e:	9b03      	ldr	r3, [sp, #12]
 8009850:	3307      	adds	r3, #7
 8009852:	f023 0307 	bic.w	r3, r3, #7
 8009856:	3308      	adds	r3, #8
 8009858:	9303      	str	r3, [sp, #12]
 800985a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800985c:	443b      	add	r3, r7
 800985e:	9309      	str	r3, [sp, #36]	; 0x24
 8009860:	e768      	b.n	8009734 <_vfiprintf_r+0x78>
 8009862:	fb0c 3202 	mla	r2, ip, r2, r3
 8009866:	460c      	mov	r4, r1
 8009868:	2001      	movs	r0, #1
 800986a:	e7a6      	b.n	80097ba <_vfiprintf_r+0xfe>
 800986c:	2300      	movs	r3, #0
 800986e:	3401      	adds	r4, #1
 8009870:	9305      	str	r3, [sp, #20]
 8009872:	4619      	mov	r1, r3
 8009874:	f04f 0c0a 	mov.w	ip, #10
 8009878:	4620      	mov	r0, r4
 800987a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800987e:	3a30      	subs	r2, #48	; 0x30
 8009880:	2a09      	cmp	r2, #9
 8009882:	d903      	bls.n	800988c <_vfiprintf_r+0x1d0>
 8009884:	2b00      	cmp	r3, #0
 8009886:	d0c6      	beq.n	8009816 <_vfiprintf_r+0x15a>
 8009888:	9105      	str	r1, [sp, #20]
 800988a:	e7c4      	b.n	8009816 <_vfiprintf_r+0x15a>
 800988c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009890:	4604      	mov	r4, r0
 8009892:	2301      	movs	r3, #1
 8009894:	e7f0      	b.n	8009878 <_vfiprintf_r+0x1bc>
 8009896:	ab03      	add	r3, sp, #12
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	462a      	mov	r2, r5
 800989c:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <_vfiprintf_r+0x22c>)
 800989e:	a904      	add	r1, sp, #16
 80098a0:	4630      	mov	r0, r6
 80098a2:	f7fd fc55 	bl	8007150 <_printf_float>
 80098a6:	4607      	mov	r7, r0
 80098a8:	1c78      	adds	r0, r7, #1
 80098aa:	d1d6      	bne.n	800985a <_vfiprintf_r+0x19e>
 80098ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ae:	07d9      	lsls	r1, r3, #31
 80098b0:	d405      	bmi.n	80098be <_vfiprintf_r+0x202>
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	059a      	lsls	r2, r3, #22
 80098b6:	d402      	bmi.n	80098be <_vfiprintf_r+0x202>
 80098b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098ba:	f7fe f984 	bl	8007bc6 <__retarget_lock_release_recursive>
 80098be:	89ab      	ldrh	r3, [r5, #12]
 80098c0:	065b      	lsls	r3, r3, #25
 80098c2:	f53f af1d 	bmi.w	8009700 <_vfiprintf_r+0x44>
 80098c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098c8:	e71c      	b.n	8009704 <_vfiprintf_r+0x48>
 80098ca:	ab03      	add	r3, sp, #12
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	462a      	mov	r2, r5
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <_vfiprintf_r+0x22c>)
 80098d2:	a904      	add	r1, sp, #16
 80098d4:	4630      	mov	r0, r6
 80098d6:	f7fd fec3 	bl	8007660 <_printf_i>
 80098da:	e7e4      	b.n	80098a6 <_vfiprintf_r+0x1ea>
 80098dc:	080a006c 	.word	0x080a006c
 80098e0:	080a0076 	.word	0x080a0076
 80098e4:	08007151 	.word	0x08007151
 80098e8:	08009699 	.word	0x08009699
 80098ec:	080a0072 	.word	0x080a0072

080098f0 <__swbuf_r>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	460e      	mov	r6, r1
 80098f4:	4614      	mov	r4, r2
 80098f6:	4605      	mov	r5, r0
 80098f8:	b118      	cbz	r0, 8009902 <__swbuf_r+0x12>
 80098fa:	6a03      	ldr	r3, [r0, #32]
 80098fc:	b90b      	cbnz	r3, 8009902 <__swbuf_r+0x12>
 80098fe:	f7fe f84b 	bl	8007998 <__sinit>
 8009902:	69a3      	ldr	r3, [r4, #24]
 8009904:	60a3      	str	r3, [r4, #8]
 8009906:	89a3      	ldrh	r3, [r4, #12]
 8009908:	071a      	lsls	r2, r3, #28
 800990a:	d525      	bpl.n	8009958 <__swbuf_r+0x68>
 800990c:	6923      	ldr	r3, [r4, #16]
 800990e:	b31b      	cbz	r3, 8009958 <__swbuf_r+0x68>
 8009910:	6823      	ldr	r3, [r4, #0]
 8009912:	6922      	ldr	r2, [r4, #16]
 8009914:	1a98      	subs	r0, r3, r2
 8009916:	6963      	ldr	r3, [r4, #20]
 8009918:	b2f6      	uxtb	r6, r6
 800991a:	4283      	cmp	r3, r0
 800991c:	4637      	mov	r7, r6
 800991e:	dc04      	bgt.n	800992a <__swbuf_r+0x3a>
 8009920:	4621      	mov	r1, r4
 8009922:	4628      	mov	r0, r5
 8009924:	f7ff fd9e 	bl	8009464 <_fflush_r>
 8009928:	b9e0      	cbnz	r0, 8009964 <__swbuf_r+0x74>
 800992a:	68a3      	ldr	r3, [r4, #8]
 800992c:	3b01      	subs	r3, #1
 800992e:	60a3      	str	r3, [r4, #8]
 8009930:	6823      	ldr	r3, [r4, #0]
 8009932:	1c5a      	adds	r2, r3, #1
 8009934:	6022      	str	r2, [r4, #0]
 8009936:	701e      	strb	r6, [r3, #0]
 8009938:	6962      	ldr	r2, [r4, #20]
 800993a:	1c43      	adds	r3, r0, #1
 800993c:	429a      	cmp	r2, r3
 800993e:	d004      	beq.n	800994a <__swbuf_r+0x5a>
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	07db      	lsls	r3, r3, #31
 8009944:	d506      	bpl.n	8009954 <__swbuf_r+0x64>
 8009946:	2e0a      	cmp	r6, #10
 8009948:	d104      	bne.n	8009954 <__swbuf_r+0x64>
 800994a:	4621      	mov	r1, r4
 800994c:	4628      	mov	r0, r5
 800994e:	f7ff fd89 	bl	8009464 <_fflush_r>
 8009952:	b938      	cbnz	r0, 8009964 <__swbuf_r+0x74>
 8009954:	4638      	mov	r0, r7
 8009956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009958:	4621      	mov	r1, r4
 800995a:	4628      	mov	r0, r5
 800995c:	f000 f806 	bl	800996c <__swsetup_r>
 8009960:	2800      	cmp	r0, #0
 8009962:	d0d5      	beq.n	8009910 <__swbuf_r+0x20>
 8009964:	f04f 37ff 	mov.w	r7, #4294967295
 8009968:	e7f4      	b.n	8009954 <__swbuf_r+0x64>
	...

0800996c <__swsetup_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	4b2a      	ldr	r3, [pc, #168]	; (8009a18 <__swsetup_r+0xac>)
 8009970:	4605      	mov	r5, r0
 8009972:	6818      	ldr	r0, [r3, #0]
 8009974:	460c      	mov	r4, r1
 8009976:	b118      	cbz	r0, 8009980 <__swsetup_r+0x14>
 8009978:	6a03      	ldr	r3, [r0, #32]
 800997a:	b90b      	cbnz	r3, 8009980 <__swsetup_r+0x14>
 800997c:	f7fe f80c 	bl	8007998 <__sinit>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009986:	0718      	lsls	r0, r3, #28
 8009988:	d422      	bmi.n	80099d0 <__swsetup_r+0x64>
 800998a:	06d9      	lsls	r1, r3, #27
 800998c:	d407      	bmi.n	800999e <__swsetup_r+0x32>
 800998e:	2309      	movs	r3, #9
 8009990:	602b      	str	r3, [r5, #0]
 8009992:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	f04f 30ff 	mov.w	r0, #4294967295
 800999c:	e034      	b.n	8009a08 <__swsetup_r+0x9c>
 800999e:	0758      	lsls	r0, r3, #29
 80099a0:	d512      	bpl.n	80099c8 <__swsetup_r+0x5c>
 80099a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099a4:	b141      	cbz	r1, 80099b8 <__swsetup_r+0x4c>
 80099a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099aa:	4299      	cmp	r1, r3
 80099ac:	d002      	beq.n	80099b4 <__swsetup_r+0x48>
 80099ae:	4628      	mov	r0, r5
 80099b0:	f7fe fefe 	bl	80087b0 <_free_r>
 80099b4:	2300      	movs	r3, #0
 80099b6:	6363      	str	r3, [r4, #52]	; 0x34
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099be:	81a3      	strh	r3, [r4, #12]
 80099c0:	2300      	movs	r3, #0
 80099c2:	6063      	str	r3, [r4, #4]
 80099c4:	6923      	ldr	r3, [r4, #16]
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	89a3      	ldrh	r3, [r4, #12]
 80099ca:	f043 0308 	orr.w	r3, r3, #8
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	6923      	ldr	r3, [r4, #16]
 80099d2:	b94b      	cbnz	r3, 80099e8 <__swsetup_r+0x7c>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099de:	d003      	beq.n	80099e8 <__swsetup_r+0x7c>
 80099e0:	4621      	mov	r1, r4
 80099e2:	4628      	mov	r0, r5
 80099e4:	f000 f884 	bl	8009af0 <__smakebuf_r>
 80099e8:	89a0      	ldrh	r0, [r4, #12]
 80099ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099ee:	f010 0301 	ands.w	r3, r0, #1
 80099f2:	d00a      	beq.n	8009a0a <__swsetup_r+0x9e>
 80099f4:	2300      	movs	r3, #0
 80099f6:	60a3      	str	r3, [r4, #8]
 80099f8:	6963      	ldr	r3, [r4, #20]
 80099fa:	425b      	negs	r3, r3
 80099fc:	61a3      	str	r3, [r4, #24]
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	b943      	cbnz	r3, 8009a14 <__swsetup_r+0xa8>
 8009a02:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009a06:	d1c4      	bne.n	8009992 <__swsetup_r+0x26>
 8009a08:	bd38      	pop	{r3, r4, r5, pc}
 8009a0a:	0781      	lsls	r1, r0, #30
 8009a0c:	bf58      	it	pl
 8009a0e:	6963      	ldrpl	r3, [r4, #20]
 8009a10:	60a3      	str	r3, [r4, #8]
 8009a12:	e7f4      	b.n	80099fe <__swsetup_r+0x92>
 8009a14:	2000      	movs	r0, #0
 8009a16:	e7f7      	b.n	8009a08 <__swsetup_r+0x9c>
 8009a18:	20000074 	.word	0x20000074

08009a1c <_raise_r>:
 8009a1c:	291f      	cmp	r1, #31
 8009a1e:	b538      	push	{r3, r4, r5, lr}
 8009a20:	4604      	mov	r4, r0
 8009a22:	460d      	mov	r5, r1
 8009a24:	d904      	bls.n	8009a30 <_raise_r+0x14>
 8009a26:	2316      	movs	r3, #22
 8009a28:	6003      	str	r3, [r0, #0]
 8009a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009a32:	b112      	cbz	r2, 8009a3a <_raise_r+0x1e>
 8009a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a38:	b94b      	cbnz	r3, 8009a4e <_raise_r+0x32>
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f830 	bl	8009aa0 <_getpid_r>
 8009a40:	462a      	mov	r2, r5
 8009a42:	4601      	mov	r1, r0
 8009a44:	4620      	mov	r0, r4
 8009a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a4a:	f000 b817 	b.w	8009a7c <_kill_r>
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d00a      	beq.n	8009a68 <_raise_r+0x4c>
 8009a52:	1c59      	adds	r1, r3, #1
 8009a54:	d103      	bne.n	8009a5e <_raise_r+0x42>
 8009a56:	2316      	movs	r3, #22
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	2001      	movs	r0, #1
 8009a5c:	e7e7      	b.n	8009a2e <_raise_r+0x12>
 8009a5e:	2400      	movs	r4, #0
 8009a60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a64:	4628      	mov	r0, r5
 8009a66:	4798      	blx	r3
 8009a68:	2000      	movs	r0, #0
 8009a6a:	e7e0      	b.n	8009a2e <_raise_r+0x12>

08009a6c <raise>:
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <raise+0xc>)
 8009a6e:	4601      	mov	r1, r0
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	f7ff bfd3 	b.w	8009a1c <_raise_r>
 8009a76:	bf00      	nop
 8009a78:	20000074 	.word	0x20000074

08009a7c <_kill_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	; (8009a9c <_kill_r+0x20>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	4611      	mov	r1, r2
 8009a88:	602b      	str	r3, [r5, #0]
 8009a8a:	f7f7 fc83 	bl	8001394 <_kill>
 8009a8e:	1c43      	adds	r3, r0, #1
 8009a90:	d102      	bne.n	8009a98 <_kill_r+0x1c>
 8009a92:	682b      	ldr	r3, [r5, #0]
 8009a94:	b103      	cbz	r3, 8009a98 <_kill_r+0x1c>
 8009a96:	6023      	str	r3, [r4, #0]
 8009a98:	bd38      	pop	{r3, r4, r5, pc}
 8009a9a:	bf00      	nop
 8009a9c:	20000630 	.word	0x20000630

08009aa0 <_getpid_r>:
 8009aa0:	f7f7 bc70 	b.w	8001384 <_getpid>

08009aa4 <__swhatbuf_r>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aac:	2900      	cmp	r1, #0
 8009aae:	b096      	sub	sp, #88	; 0x58
 8009ab0:	4615      	mov	r5, r2
 8009ab2:	461e      	mov	r6, r3
 8009ab4:	da0d      	bge.n	8009ad2 <__swhatbuf_r+0x2e>
 8009ab6:	89a3      	ldrh	r3, [r4, #12]
 8009ab8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009abc:	f04f 0100 	mov.w	r1, #0
 8009ac0:	bf0c      	ite	eq
 8009ac2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009ac6:	2340      	movne	r3, #64	; 0x40
 8009ac8:	2000      	movs	r0, #0
 8009aca:	6031      	str	r1, [r6, #0]
 8009acc:	602b      	str	r3, [r5, #0]
 8009ace:	b016      	add	sp, #88	; 0x58
 8009ad0:	bd70      	pop	{r4, r5, r6, pc}
 8009ad2:	466a      	mov	r2, sp
 8009ad4:	f000 f848 	bl	8009b68 <_fstat_r>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	dbec      	blt.n	8009ab6 <__swhatbuf_r+0x12>
 8009adc:	9901      	ldr	r1, [sp, #4]
 8009ade:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009ae2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009ae6:	4259      	negs	r1, r3
 8009ae8:	4159      	adcs	r1, r3
 8009aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009aee:	e7eb      	b.n	8009ac8 <__swhatbuf_r+0x24>

08009af0 <__smakebuf_r>:
 8009af0:	898b      	ldrh	r3, [r1, #12]
 8009af2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009af4:	079d      	lsls	r5, r3, #30
 8009af6:	4606      	mov	r6, r0
 8009af8:	460c      	mov	r4, r1
 8009afa:	d507      	bpl.n	8009b0c <__smakebuf_r+0x1c>
 8009afc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b00:	6023      	str	r3, [r4, #0]
 8009b02:	6123      	str	r3, [r4, #16]
 8009b04:	2301      	movs	r3, #1
 8009b06:	6163      	str	r3, [r4, #20]
 8009b08:	b002      	add	sp, #8
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	ab01      	add	r3, sp, #4
 8009b0e:	466a      	mov	r2, sp
 8009b10:	f7ff ffc8 	bl	8009aa4 <__swhatbuf_r>
 8009b14:	9900      	ldr	r1, [sp, #0]
 8009b16:	4605      	mov	r5, r0
 8009b18:	4630      	mov	r0, r6
 8009b1a:	f7fe febd 	bl	8008898 <_malloc_r>
 8009b1e:	b948      	cbnz	r0, 8009b34 <__smakebuf_r+0x44>
 8009b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b24:	059a      	lsls	r2, r3, #22
 8009b26:	d4ef      	bmi.n	8009b08 <__smakebuf_r+0x18>
 8009b28:	f023 0303 	bic.w	r3, r3, #3
 8009b2c:	f043 0302 	orr.w	r3, r3, #2
 8009b30:	81a3      	strh	r3, [r4, #12]
 8009b32:	e7e3      	b.n	8009afc <__smakebuf_r+0xc>
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	6020      	str	r0, [r4, #0]
 8009b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b3c:	81a3      	strh	r3, [r4, #12]
 8009b3e:	9b00      	ldr	r3, [sp, #0]
 8009b40:	6163      	str	r3, [r4, #20]
 8009b42:	9b01      	ldr	r3, [sp, #4]
 8009b44:	6120      	str	r0, [r4, #16]
 8009b46:	b15b      	cbz	r3, 8009b60 <__smakebuf_r+0x70>
 8009b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f000 f81d 	bl	8009b8c <_isatty_r>
 8009b52:	b128      	cbz	r0, 8009b60 <__smakebuf_r+0x70>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	f023 0303 	bic.w	r3, r3, #3
 8009b5a:	f043 0301 	orr.w	r3, r3, #1
 8009b5e:	81a3      	strh	r3, [r4, #12]
 8009b60:	89a3      	ldrh	r3, [r4, #12]
 8009b62:	431d      	orrs	r5, r3
 8009b64:	81a5      	strh	r5, [r4, #12]
 8009b66:	e7cf      	b.n	8009b08 <__smakebuf_r+0x18>

08009b68 <_fstat_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4d07      	ldr	r5, [pc, #28]	; (8009b88 <_fstat_r+0x20>)
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	4604      	mov	r4, r0
 8009b70:	4608      	mov	r0, r1
 8009b72:	4611      	mov	r1, r2
 8009b74:	602b      	str	r3, [r5, #0]
 8009b76:	f7f7 fc6c 	bl	8001452 <_fstat>
 8009b7a:	1c43      	adds	r3, r0, #1
 8009b7c:	d102      	bne.n	8009b84 <_fstat_r+0x1c>
 8009b7e:	682b      	ldr	r3, [r5, #0]
 8009b80:	b103      	cbz	r3, 8009b84 <_fstat_r+0x1c>
 8009b82:	6023      	str	r3, [r4, #0]
 8009b84:	bd38      	pop	{r3, r4, r5, pc}
 8009b86:	bf00      	nop
 8009b88:	20000630 	.word	0x20000630

08009b8c <_isatty_r>:
 8009b8c:	b538      	push	{r3, r4, r5, lr}
 8009b8e:	4d06      	ldr	r5, [pc, #24]	; (8009ba8 <_isatty_r+0x1c>)
 8009b90:	2300      	movs	r3, #0
 8009b92:	4604      	mov	r4, r0
 8009b94:	4608      	mov	r0, r1
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	f7f7 fc6b 	bl	8001472 <_isatty>
 8009b9c:	1c43      	adds	r3, r0, #1
 8009b9e:	d102      	bne.n	8009ba6 <_isatty_r+0x1a>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	b103      	cbz	r3, 8009ba6 <_isatty_r+0x1a>
 8009ba4:	6023      	str	r3, [r4, #0]
 8009ba6:	bd38      	pop	{r3, r4, r5, pc}
 8009ba8:	20000630 	.word	0x20000630

08009bac <_init>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	bf00      	nop
 8009bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb2:	bc08      	pop	{r3}
 8009bb4:	469e      	mov	lr, r3
 8009bb6:	4770      	bx	lr

08009bb8 <_fini>:
 8009bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bba:	bf00      	nop
 8009bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bbe:	bc08      	pop	{r3}
 8009bc0:	469e      	mov	lr, r3
 8009bc2:	4770      	bx	lr
