
LAB8_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000965f4  08009bb0  08009bb0  00019bb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080a01a4  080a01a4  000c01e4  2**0
                  CONTENTS
  4 .ARM          00000008  080a01a4  080a01a4  000b01a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080a01ac  080a01ac  000c01e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080a01ac  080a01ac  000b01ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080a01b0  080a01b0  000b01b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080a01b4  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  200001e4  080a0398  000c01e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  080a0398  000c0640  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000c01e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000c0212  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ae45  00000000  00000000  000c0255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e49  00000000  00000000  000db09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001650  00000000  00000000  000deee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001158  00000000  00000000  000e0538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bdc8  00000000  00000000  000e1690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f3f0  00000000  00000000  0010d458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001071f6  00000000  00000000  0012c848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c04  00000000  00000000  00233a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0023a644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009b94 	.word	0x08009b94

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08009b94 	.word	0x08009b94

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060a:	4b1e      	ldr	r3, [pc, #120]	; (8000684 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000616:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_ADC1_Init+0x98>)
 8000618:	2201      	movs	r2, #1
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000624:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b16      	ldr	r3, [pc, #88]	; (8000684 <MX_ADC1_Init+0x98>)
 800062c:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 800062e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000636:	4b13      	ldr	r3, [pc, #76]	; (8000684 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064a:	480e      	ldr	r0, [pc, #56]	; (8000684 <MX_ADC1_Init+0x98>)
 800064c:	f002 f8f4 	bl	8002838 <HAL_ADC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000656:	f000 fce3 	bl	8001020 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065e:	2301      	movs	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000666:	463b      	mov	r3, r7
 8000668:	4619      	mov	r1, r3
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <MX_ADC1_Init+0x98>)
 800066c:	f002 fa8e 	bl	8002b8c <HAL_ADC_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000676:	f000 fcd3 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067a:	bf00      	nop
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000200 	.word	0x20000200
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a15      	ldr	r2, [pc, #84]	; (8000704 <HAL_ADC_MspInit+0x74>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d123      	bne.n	80006fa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a14      	ldr	r2, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a0e      	ldr	r2, [pc, #56]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_ADC_MspInit+0x78>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80006e2:	2309      	movs	r3, #9
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4805      	ldr	r0, [pc, #20]	; (800070c <HAL_ADC_MspInit+0x7c>)
 80006f6:	f002 fe3d 	bl	8003374 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40012000 	.word	0x40012000
 8000708:	40023800 	.word	0x40023800
 800070c:	40020000 	.word	0x40020000

08000710 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08e      	sub	sp, #56	; 0x38
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000726:	4ba4      	ldr	r3, [pc, #656]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4aa3      	ldr	r2, [pc, #652]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800072c:	f043 0310 	orr.w	r3, r3, #16
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4ba1      	ldr	r3, [pc, #644]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0310 	and.w	r3, r3, #16
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b9e      	ldr	r3, [pc, #632]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a9d      	ldr	r2, [pc, #628]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b9b      	ldr	r3, [pc, #620]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	61fb      	str	r3, [r7, #28]
 8000754:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000756:	4b98      	ldr	r3, [pc, #608]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a97      	ldr	r2, [pc, #604]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b95      	ldr	r3, [pc, #596]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0320 	and.w	r3, r3, #32
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b92      	ldr	r3, [pc, #584]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a91      	ldr	r2, [pc, #580]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b8f      	ldr	r3, [pc, #572]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	4b8c      	ldr	r3, [pc, #560]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a8b      	ldr	r2, [pc, #556]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b89      	ldr	r3, [pc, #548]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b86      	ldr	r3, [pc, #536]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a85      	ldr	r2, [pc, #532]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b83      	ldr	r3, [pc, #524]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b6:	4b80      	ldr	r3, [pc, #512]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a7f      	ldr	r2, [pc, #508]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b7d      	ldr	r3, [pc, #500]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ce:	4b7a      	ldr	r3, [pc, #488]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a79      	ldr	r2, [pc, #484]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b77      	ldr	r3, [pc, #476]	; (80009b8 <MX_GPIO_Init+0x2a8>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2168      	movs	r1, #104	; 0x68
 80007ea:	4874      	ldr	r0, [pc, #464]	; (80009bc <MX_GPIO_Init+0x2ac>)
 80007ec:	f002 ff6e 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80007f6:	4872      	ldr	r0, [pc, #456]	; (80009c0 <MX_GPIO_Init+0x2b0>)
 80007f8:	f002 ff68 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4870      	ldr	r0, [pc, #448]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000802:	f002 ff63 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800080c:	486e      	ldr	r0, [pc, #440]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 800080e:	f002 ff5d 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000812:	2314      	movs	r3, #20
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000816:	2300      	movs	r3, #0
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	4865      	ldr	r0, [pc, #404]	; (80009bc <MX_GPIO_Init+0x2ac>)
 8000826:	f002 fda5 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800082a:	2368      	movs	r3, #104	; 0x68
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082e:	2301      	movs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	485e      	ldr	r0, [pc, #376]	; (80009bc <MX_GPIO_Init+0x2ac>)
 8000842:	f002 fd97 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	485b      	ldr	r0, [pc, #364]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 800085c:	f002 fd8a 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000860:	2332      	movs	r3, #50	; 0x32
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086c:	2303      	movs	r3, #3
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000870:	230b      	movs	r3, #11
 8000872:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	4853      	ldr	r0, [pc, #332]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 800087c:	f002 fd7a 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000880:	2386      	movs	r3, #134	; 0x86
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000890:	230b      	movs	r3, #11
 8000892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	4619      	mov	r1, r3
 800089a:	484c      	ldr	r0, [pc, #304]	; (80009cc <MX_GPIO_Init+0x2bc>)
 800089c:	f002 fd6a 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a6:	2302      	movs	r3, #2
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b2:	230b      	movs	r3, #11
 80008b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	4619      	mov	r1, r3
 80008bc:	4840      	ldr	r0, [pc, #256]	; (80009c0 <MX_GPIO_Init+0x2b0>)
 80008be:	f002 fd59 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80008c2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d8:	4619      	mov	r1, r3
 80008da:	4839      	ldr	r0, [pc, #228]	; (80009c0 <MX_GPIO_Init+0x2b0>)
 80008dc:	f002 fd4a 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e0:	2340      	movs	r3, #64	; 0x40
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e4:	2301      	movs	r3, #1
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4833      	ldr	r0, [pc, #204]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 80008f8:	f002 fd3c 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	482d      	ldr	r0, [pc, #180]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 8000910:	f002 fd30 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000914:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000922:	2303      	movs	r3, #3
 8000924:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092a:	4619      	mov	r1, r3
 800092c:	4826      	ldr	r0, [pc, #152]	; (80009c8 <MX_GPIO_Init+0x2b8>)
 800092e:	f002 fd21 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000932:	230f      	movs	r3, #15
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000936:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	4822      	ldr	r0, [pc, #136]	; (80009d0 <MX_GPIO_Init+0x2c0>)
 8000948:	f002 fd14 	bl	8003374 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800094c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095a:	2303      	movs	r3, #3
 800095c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800095e:	230b      	movs	r3, #11
 8000960:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000966:	4619      	mov	r1, r3
 8000968:	4816      	ldr	r0, [pc, #88]	; (80009c4 <MX_GPIO_Init+0x2b4>)
 800096a:	f002 fd03 	bl	8003374 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2102      	movs	r1, #2
 8000972:	2006      	movs	r0, #6
 8000974:	f002 fc35 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000978:	2006      	movs	r0, #6
 800097a:	f002 fc4e 	bl	800321a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 800097e:	2200      	movs	r2, #0
 8000980:	2102      	movs	r1, #2
 8000982:	2007      	movs	r0, #7
 8000984:	f002 fc2d 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000988:	2007      	movs	r0, #7
 800098a:	f002 fc46 	bl	800321a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2102      	movs	r1, #2
 8000992:	2008      	movs	r0, #8
 8000994:	f002 fc25 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000998:	2008      	movs	r0, #8
 800099a:	f002 fc3e 	bl	800321a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2102      	movs	r1, #2
 80009a2:	2009      	movs	r0, #9
 80009a4:	f002 fc1d 	bl	80031e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80009a8:	2009      	movs	r0, #9
 80009aa:	f002 fc36 	bl	800321a <HAL_NVIC_EnableIRQ>

}
 80009ae:	bf00      	nop
 80009b0:	3738      	adds	r7, #56	; 0x38
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020c00 	.word	0x40020c00

080009d4 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80009d8:	4b1b      	ldr	r3, [pc, #108]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009da:	4a1c      	ldr	r2, [pc, #112]	; (8000a4c <MX_I2C4_Init+0x78>)
 80009dc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <MX_I2C4_Init+0x7c>)
 80009e2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_I2C4_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000a0e:	480e      	ldr	r0, [pc, #56]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a10:	f002 fe9a 	bl	8003748 <HAL_I2C_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000a1a:	f000 fb01 	bl	8001020 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a22:	f002 ff21 	bl	8003868 <HAL_I2CEx_ConfigAnalogFilter>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000a2c:	f000 faf8 	bl	8001020 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_I2C4_Init+0x74>)
 8000a34:	f002 ff63 	bl	80038fe <HAL_I2CEx_ConfigDigitalFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000a3e:	f000 faef 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000248 	.word	0x20000248
 8000a4c:	40006000 	.word	0x40006000
 8000a50:	00808cd2 	.word	0x00808cd2

08000a54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b0ae      	sub	sp, #184	; 0xb8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	2290      	movs	r2, #144	; 0x90
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f007 f81c 	bl	8007ab2 <memset>
  if(i2cHandle->Instance==I2C4)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a22      	ldr	r2, [pc, #136]	; (8000b08 <HAL_I2C_MspInit+0xb4>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d13d      	bne.n	8000b00 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000a84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 fc63 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000aa0:	f000 fabe 	bl	8001020 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa4:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa8:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aaa:	f043 0308 	orr.w	r3, r3, #8
 8000aae:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab0:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab4:	f003 0308 	and.w	r3, r3, #8
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000abc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ac0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000ad6:	2304      	movs	r3, #4
 8000ad8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000adc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <HAL_I2C_MspInit+0xbc>)
 8000ae4:	f002 fc46 	bl	8003374 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000aee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <HAL_I2C_MspInit+0xb8>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	37b8      	adds	r7, #184	; 0xb8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40006000 	.word	0x40006000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020c00 	.word	0x40020c00

08000b14 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b18:	f3bf 8f4f 	dsb	sy
}
 8000b1c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b1e:	f3bf 8f6f 	isb	sy
}
 8000b22:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <SCB_EnableICache+0x48>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b2c:	f3bf 8f4f 	dsb	sy
}
 8000b30:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b32:	f3bf 8f6f 	isb	sy
}
 8000b36:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <SCB_EnableICache+0x48>)
 8000b3a:	695b      	ldr	r3, [r3, #20]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <SCB_EnableICache+0x48>)
 8000b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b42:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b44:	f3bf 8f4f 	dsb	sy
}
 8000b48:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000b4a:	f3bf 8f6f 	isb	sy
}
 8000b4e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000b66:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6e:	f3bf 8f4f 	dsb	sy
}
 8000b72:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000b74:	4b1b      	ldr	r3, [pc, #108]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b7a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	0b5b      	lsrs	r3, r3, #13
 8000b80:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000b84:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b8e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	015a      	lsls	r2, r3, #5
 8000b94:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000b98:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000b9e:	4911      	ldr	r1, [pc, #68]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1e5a      	subs	r2, r3, #1
 8000baa:	60ba      	str	r2, [r7, #8]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1ef      	bne.n	8000b90 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	60fa      	str	r2, [r7, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d1e5      	bne.n	8000b86 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000bba:	f3bf 8f4f 	dsb	sy
}
 8000bbe:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	4a07      	ldr	r2, [pc, #28]	; (8000be4 <SCB_EnableDCache+0x84>)
 8000bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bcc:	f3bf 8f4f 	dsb	sy
}
 8000bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bd2:	f3bf 8f6f 	isb	sy
}
 8000bd6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <displayTime>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayTime(int minute, int second) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
	char toMinute[10];
	char toSecond[10];

	sprintf(toMinute, "%02d", minute);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	490a      	ldr	r1, [pc, #40]	; (8000c24 <displayTime+0x3c>)
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f006 fef6 	bl	80079ec <siprintf>
	sprintf(toSecond, "%02d", second);
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	4907      	ldr	r1, [pc, #28]	; (8000c24 <displayTime+0x3c>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f006 feef 	bl	80079ec <siprintf>
	sprintf(timeString, "%02d:%02d", minute, second);
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4905      	ldr	r1, [pc, #20]	; (8000c28 <displayTime+0x40>)
 8000c14:	4805      	ldr	r0, [pc, #20]	; (8000c2c <displayTime+0x44>)
 8000c16:	f006 fee9 	bl	80079ec <siprintf>
//	print("\r");
//	print(timeString);
}
 8000c1a:	bf00      	nop
 8000c1c:	3720      	adds	r7, #32
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	08009bb0 	.word	0x08009bb0
 8000c28:	08009bb8 	.word	0x08009bb8
 8000c2c:	200002ac 	.word	0x200002ac

08000c30 <display4096_to_45>:
void display4096_to_45(uint32_t myNumber) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	currentVal = (45 * myNumber) / 4096;
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	4413      	add	r3, r2
 8000c40:	011a      	lsls	r2, r3, #4
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	0b1b      	lsrs	r3, r3, #12
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <display4096_to_45+0x8c>)
 8000c4a:	701a      	strb	r2, [r3, #0]
	if (currentVal != lastVal) {
 8000c4c:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <display4096_to_45+0x8c>)
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <display4096_to_45+0x90>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d02c      	beq.n	8000cb2 <display4096_to_45+0x82>
		if (currentVal >= lastVal - swing && currentVal <= lastVal + swing) {
 8000c58:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <display4096_to_45+0x8c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <display4096_to_45+0x90>)
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4619      	mov	r1, r3
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <display4096_to_45+0x94>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	1acb      	subs	r3, r1, r3
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	db0a      	blt.n	8000c84 <display4096_to_45+0x54>
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <display4096_to_45+0x8c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <display4096_to_45+0x90>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <display4096_to_45+0x94>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	440b      	add	r3, r1
 8000c80:	429a      	cmp	r2, r3
 8000c82:	dd16      	ble.n	8000cb2 <display4096_to_45+0x82>
			// If it's within the swing range, don't update lastVal
		} else {
			lastVal = currentVal;
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <display4096_to_45+0x8c>)
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <display4096_to_45+0x90>)
 8000c8a:	701a      	strb	r2, [r3, #0]
			sprintf(toDec45, "b%02d", lastVal);
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <display4096_to_45+0x90>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	490d      	ldr	r1, [pc, #52]	; (8000cc8 <display4096_to_45+0x98>)
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <display4096_to_45+0x9c>)
 8000c96:	f006 fea9 	bl	80079ec <siprintf>
			//print(toDec45);
			HAL_UART_Transmit(&huart6, (uint8_t*) toDec45, strlen(toDec45),
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <display4096_to_45+0x9c>)
 8000c9c:	f7ff fb20 	bl	80002e0 <strlen>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ca8:	4908      	ldr	r1, [pc, #32]	; (8000ccc <display4096_to_45+0x9c>)
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <display4096_to_45+0xa0>)
 8000cac:	f005 f89a 	bl	8005de4 <HAL_UART_Transmit>
					1000);
			//print("\r\n");
		}
	}

}
 8000cb0:	e7ff      	b.n	8000cb2 <display4096_to_45+0x82>
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200002ca 	.word	0x200002ca
 8000cc0:	200002cb 	.word	0x200002cb
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	08009bc4 	.word	0x08009bc4
 8000ccc:	200002a4 	.word	0x200002a4
 8000cd0:	20000468 	.word	0x20000468

08000cd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000cda:	f7ff ff1b 	bl	8000b14 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000cde:	f7ff ff3f 	bl	8000b60 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce2:	f001 fd1f 	bl	8002724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce6:	f000 f92f 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cea:	f7ff fd11 	bl	8000710 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cee:	f000 fd57 	bl	80017a0 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000cf2:	f000 f9e1 	bl	80010b8 <MX_SPI5_Init>
  MX_RNG_Init();
 8000cf6:	f000 f997 	bl	8001028 <MX_RNG_Init>
  MX_TIM2_Init();
 8000cfa:	f000 fc85 	bl	8001608 <MX_TIM2_Init>
  MX_I2C4_Init();
 8000cfe:	f7ff fe69 	bl	80009d4 <MX_I2C4_Init>
  MX_ADC1_Init();
 8000d02:	f7ff fc73 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000d06:	f000 fc2b 	bl	8001560 <MX_TIM1_Init>
  MX_USART6_UART_Init();
 8000d0a:	f000 fd79 	bl	8001800 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
	ILI9341_Init(); //initial driver setup to drive ili9341
 8000d0e:	f001 fa27 	bl	8002160 <ILI9341_Init>
	HAL_ADC_Start(&hadc1);
 8000d12:	4875      	ldr	r0, [pc, #468]	; (8000ee8 <main+0x214>)
 8000d14:	f001 fdd4 	bl	80028c0 <HAL_ADC_Start>
	while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK) {
 8000d18:	bf00      	nop
 8000d1a:	2164      	movs	r1, #100	; 0x64
 8000d1c:	4872      	ldr	r0, [pc, #456]	; (8000ee8 <main+0x214>)
 8000d1e:	f001 fe9d 	bl	8002a5c <HAL_ADC_PollForConversion>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1f8      	bne.n	8000d1a <main+0x46>
		}
		adc_val = HAL_ADC_GetValue(&hadc1);
 8000d28:	486f      	ldr	r0, [pc, #444]	; (8000ee8 <main+0x214>)
 8000d2a:	f001 ff22 	bl	8002b72 <HAL_ADC_GetValue>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	4a6e      	ldr	r2, [pc, #440]	; (8000eec <main+0x218>)
 8000d32:	6013      	str	r3, [r2, #0]
		display4096_to_45(adc_val);
 8000d34:	4b6d      	ldr	r3, [pc, #436]	; (8000eec <main+0x218>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff79 	bl	8000c30 <display4096_to_45>
//		while(__HAL_UART_GET_FLAG(&huart6,UART_FLAG_RXNE) == RESET){}
		HAL_UART_Receive(&huart6, (uint8_t*) &ch1, 1, 1000);
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	2201      	movs	r2, #1
 8000d44:	496a      	ldr	r1, [pc, #424]	; (8000ef0 <main+0x21c>)
 8000d46:	486b      	ldr	r0, [pc, #428]	; (8000ef4 <main+0x220>)
 8000d48:	f005 f8cf 	bl	8005eea <HAL_UART_Receive>
//		HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
		print(ch1);
 8000d4c:	4b68      	ldr	r3, [pc, #416]	; (8000ef0 <main+0x21c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461c      	mov	r4, r3
 8000d52:	4b67      	ldr	r3, [pc, #412]	; (8000ef0 <main+0x21c>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fac2 	bl	80002e0 <strlen>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d64:	4621      	mov	r1, r4
 8000d66:	4864      	ldr	r0, [pc, #400]	; (8000ef8 <main+0x224>)
 8000d68:	f005 f83c 	bl	8005de4 <HAL_UART_Transmit>
		if (ch1 == '0') {
 8000d6c:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <main+0x21c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b30      	cmp	r3, #48	; 0x30
 8000d72:	d103      	bne.n	8000d7c <main+0xa8>
			playerSignal = 0;
 8000d74:	4b61      	ldr	r3, [pc, #388]	; (8000efc <main+0x228>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	e006      	b.n	8000d8a <main+0xb6>
		} else if (ch1 == '1') {
 8000d7c:	4b5c      	ldr	r3, [pc, #368]	; (8000ef0 <main+0x21c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b31      	cmp	r3, #49	; 0x31
 8000d82:	d102      	bne.n	8000d8a <main+0xb6>
			playerSignal = 1;
 8000d84:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <main+0x228>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
		}
		if (state != 1) {
 8000d8a:	4b5d      	ldr	r3, [pc, #372]	; (8000f00 <main+0x22c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d002      	beq.n	8000d98 <main+0xc4>
			isBackgroundFill = 0;
 8000d92:	4b5c      	ldr	r3, [pc, #368]	; (8000f04 <main+0x230>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
		}

		if (state == 0) {
 8000d98:	4b59      	ldr	r3, [pc, #356]	; (8000f00 <main+0x22c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d121      	bne.n	8000de4 <main+0x110>
			ILI9341_Draw_Image((const char*) image_data_setup,
 8000da0:	2102      	movs	r1, #2
 8000da2:	4859      	ldr	r0, [pc, #356]	; (8000f08 <main+0x234>)
 8000da4:	f000 fefe 	bl	8001ba4 <ILI9341_Draw_Image>
			SCREEN_VERTICAL_2);
			minuteA = 10;
 8000da8:	4b58      	ldr	r3, [pc, #352]	; (8000f0c <main+0x238>)
 8000daa:	220a      	movs	r2, #10
 8000dac:	601a      	str	r2, [r3, #0]
			secondA = 0;
 8000dae:	4b58      	ldr	r3, [pc, #352]	; (8000f10 <main+0x23c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
			minuteB = 10;
 8000db4:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <main+0x240>)
 8000db6:	220a      	movs	r2, #10
 8000db8:	601a      	str	r2, [r3, #0]
			secondB = 0;
 8000dba:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <main+0x244>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
			sendTwo = 0;
 8000dc0:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <main+0x248>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]

			if (sendZero == 0) {
 8000dc6:	4b56      	ldr	r3, [pc, #344]	; (8000f20 <main+0x24c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d1a4      	bne.n	8000d18 <main+0x44>
				//send 0
				//print("0");
				HAL_UART_Transmit(&huart6, (uint8_t*) "000", 3, 1000);
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	4953      	ldr	r1, [pc, #332]	; (8000f24 <main+0x250>)
 8000dd6:	4847      	ldr	r0, [pc, #284]	; (8000ef4 <main+0x220>)
 8000dd8:	f005 f804 	bl	8005de4 <HAL_UART_Transmit>
				sendZero = 1;
 8000ddc:	4b50      	ldr	r3, [pc, #320]	; (8000f20 <main+0x24c>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	e799      	b.n	8000d18 <main+0x44>
			}
		} else if (state == 1) {
 8000de4:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <main+0x22c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d148      	bne.n	8000e7e <main+0x1aa>
			sendTwo = 0;
 8000dec:	4b4b      	ldr	r3, [pc, #300]	; (8000f1c <main+0x248>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
			if (sendOne == 0) {
 8000df2:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <main+0x254>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d109      	bne.n	8000e0e <main+0x13a>
				//print("1");
				HAL_UART_Transmit(&huart6, (uint8_t*) "111", 3, 1000);
 8000dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dfe:	2203      	movs	r2, #3
 8000e00:	494a      	ldr	r1, [pc, #296]	; (8000f2c <main+0x258>)
 8000e02:	483c      	ldr	r0, [pc, #240]	; (8000ef4 <main+0x220>)
 8000e04:	f004 ffee 	bl	8005de4 <HAL_UART_Transmit>
				sendOne = 1;
 8000e08:	4b47      	ldr	r3, [pc, #284]	; (8000f28 <main+0x254>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	601a      	str	r2, [r3, #0]
			}
			//send 1
			HAL_TIM_Base_Start_IT(&htim1);
 8000e0e:	4848      	ldr	r0, [pc, #288]	; (8000f30 <main+0x25c>)
 8000e10:	f004 faf2 	bl	80053f8 <HAL_TIM_Base_Start_IT>
			if (isBackgroundFill == 0) {
 8000e14:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <main+0x230>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d106      	bne.n	8000e2a <main+0x156>

				ILI9341_Draw_Image((const char*) image_data_tot,
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	4845      	ldr	r0, [pc, #276]	; (8000f34 <main+0x260>)
 8000e20:	f000 fec0 	bl	8001ba4 <ILI9341_Draw_Image>
						SCREEN_VERTICAL_2);
				isBackgroundFill = 1;
 8000e24:	4b37      	ldr	r3, [pc, #220]	; (8000f04 <main+0x230>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
			}
			displayTime(minuteA, secondA);
 8000e2a:	4b38      	ldr	r3, [pc, #224]	; (8000f0c <main+0x238>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a38      	ldr	r2, [pc, #224]	; (8000f10 <main+0x23c>)
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fed7 	bl	8000be8 <displayTime>
			ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000e3a:	2003      	movs	r0, #3
 8000e3c:	f001 f932 	bl	80020a4 <ILI9341_Set_Rotation>
			ILI9341_Draw_Text(timeString, 40, 140, WHITE, 3, BLACK);
 8000e40:	2300      	movs	r3, #0
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	2303      	movs	r3, #3
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e4c:	228c      	movs	r2, #140	; 0x8c
 8000e4e:	2128      	movs	r1, #40	; 0x28
 8000e50:	4839      	ldr	r0, [pc, #228]	; (8000f38 <main+0x264>)
 8000e52:	f000 fe77 	bl	8001b44 <ILI9341_Draw_Text>
			displayTime(minuteB, secondB);
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <main+0x240>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a2f      	ldr	r2, [pc, #188]	; (8000f18 <main+0x244>)
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fec1 	bl	8000be8 <displayTime>
			ILI9341_Draw_Text(timeString, 180, 140, WHITE, 3, BLACK);
 8000e66:	2300      	movs	r3, #0
 8000e68:	9301      	str	r3, [sp, #4]
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e72:	228c      	movs	r2, #140	; 0x8c
 8000e74:	21b4      	movs	r1, #180	; 0xb4
 8000e76:	4830      	ldr	r0, [pc, #192]	; (8000f38 <main+0x264>)
 8000e78:	f000 fe64 	bl	8001b44 <ILI9341_Draw_Text>
 8000e7c:	e74c      	b.n	8000d18 <main+0x44>
		} else if (state == 2) { //PAUSE
 8000e7e:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <main+0x22c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d118      	bne.n	8000eb8 <main+0x1e4>
			sendOne = 0;
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <main+0x254>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
			if (sendTwo == 0) {
 8000e8c:	4b23      	ldr	r3, [pc, #140]	; (8000f1c <main+0x248>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d109      	bne.n	8000ea8 <main+0x1d4>
							//print("2");
							HAL_UART_Transmit(&huart6, (uint8_t*) "222", 3, 1000);
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	2203      	movs	r2, #3
 8000e9a:	4928      	ldr	r1, [pc, #160]	; (8000f3c <main+0x268>)
 8000e9c:	4815      	ldr	r0, [pc, #84]	; (8000ef4 <main+0x220>)
 8000e9e:	f004 ffa1 	bl	8005de4 <HAL_UART_Transmit>
							sendTwo = 1;
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <main+0x248>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
						}
			HAL_TIM_Base_Stop_IT(&htim1);
 8000ea8:	4821      	ldr	r0, [pc, #132]	; (8000f30 <main+0x25c>)
 8000eaa:	f004 fb1d 	bl	80054e8 <HAL_TIM_Base_Stop_IT>
			ILI9341_Draw_Image((const char*) image_data_pause,
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4823      	ldr	r0, [pc, #140]	; (8000f40 <main+0x26c>)
 8000eb2:	f000 fe77 	bl	8001ba4 <ILI9341_Draw_Image>
 8000eb6:	e72f      	b.n	8000d18 <main+0x44>
			SCREEN_VERTICAL_2);
		} else if (state == 3) {
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <main+0x22c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b03      	cmp	r3, #3
 8000ebe:	f47f af2b 	bne.w	8000d18 <main+0x44>
			//Picture
			if (sendTwo == 0) {
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <main+0x248>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d109      	bne.n	8000ede <main+0x20a>
										//print("2");
										HAL_UART_Transmit(&huart6, (uint8_t*) "222", 3, 1000);
 8000eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ece:	2203      	movs	r2, #3
 8000ed0:	491a      	ldr	r1, [pc, #104]	; (8000f3c <main+0x268>)
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <main+0x220>)
 8000ed4:	f004 ff86 	bl	8005de4 <HAL_UART_Transmit>
										sendTwo = 1;
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <main+0x248>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
									}
			ILI9341_Draw_Image((const char*) image_data_end, SCREEN_VERTICAL_2);
 8000ede:	2102      	movs	r1, #2
 8000ee0:	4818      	ldr	r0, [pc, #96]	; (8000f44 <main+0x270>)
 8000ee2:	f000 fe5f 	bl	8001ba4 <ILI9341_Draw_Image>
	while (1) {
 8000ee6:	e717      	b.n	8000d18 <main+0x44>
 8000ee8:	20000200 	.word	0x20000200
 8000eec:	2000029c 	.word	0x2000029c
 8000ef0:	200002cc 	.word	0x200002cc
 8000ef4:	20000468 	.word	0x20000468
 8000ef8:	200003e0 	.word	0x200003e0
 8000efc:	200002c8 	.word	0x200002c8
 8000f00:	200002b8 	.word	0x200002b8
 8000f04:	200002c9 	.word	0x200002c9
 8000f08:	08054bd8 	.word	0x08054bd8
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	200002a0 	.word	0x200002a0
 8000f14:	20000004 	.word	0x20000004
 8000f18:	200002a8 	.word	0x200002a8
 8000f1c:	200002c4 	.word	0x200002c4
 8000f20:	200002bc 	.word	0x200002bc
 8000f24:	08009bcc 	.word	0x08009bcc
 8000f28:	200002c0 	.word	0x200002c0
 8000f2c:	08009bd0 	.word	0x08009bd0
 8000f30:	20000348 	.word	0x20000348
 8000f34:	08009bd8 	.word	0x08009bd8
 8000f38:	200002ac 	.word	0x200002ac
 8000f3c:	08009bd4 	.word	0x08009bd4
 8000f40:	0802f3d8 	.word	0x0802f3d8
 8000f44:	0807a3d8 	.word	0x0807a3d8

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b094      	sub	sp, #80	; 0x50
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 031c 	add.w	r3, r7, #28
 8000f52:	2234      	movs	r2, #52	; 0x34
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f006 fdab 	bl	8007ab2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f6c:	f002 fd14 	bl	8003998 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <SystemClock_Config+0xd0>)
 8000f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f74:	4a28      	ldr	r2, [pc, #160]	; (8001018 <SystemClock_Config+0xd0>)
 8000f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7c:	4b26      	ldr	r3, [pc, #152]	; (8001018 <SystemClock_Config+0xd0>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <SystemClock_Config+0xd4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f90:	4a22      	ldr	r2, [pc, #136]	; (800101c <SystemClock_Config+0xd4>)
 8000f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b20      	ldr	r3, [pc, #128]	; (800101c <SystemClock_Config+0xd4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fa8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000fbc:	2390      	movs	r3, #144	; 0x90
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000fc4:	2306      	movs	r3, #6
 8000fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fcf1 	bl	80039b8 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fdc:	f000 f820 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000fe8:	2380      	movs	r3, #128	; 0x80
 8000fea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2102      	movs	r1, #2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 ff88 	bl	8003f14 <HAL_RCC_ClockConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800100a:	f000 f809 	bl	8001020 <Error_Handler>
  }
}
 800100e:	bf00      	nop
 8001010:	3750      	adds	r7, #80	; 0x50
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40023800 	.word	0x40023800
 800101c:	40007000 	.word	0x40007000

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x4>
	...

08001028 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_RNG_Init+0x20>)
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <MX_RNG_Init+0x24>)
 8001030:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_RNG_Init+0x20>)
 8001034:	f003 fdbc 	bl	8004bb0 <HAL_RNG_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800103e:	f7ff ffef 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200002d0 	.word	0x200002d0
 800104c:	50060800 	.word	0x50060800

08001050 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b0a8      	sub	sp, #160	; 0xa0
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001058:	f107 0310 	add.w	r3, r7, #16
 800105c:	2290      	movs	r2, #144	; 0x90
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f006 fd26 	bl	8007ab2 <memset>
  if(rngHandle->Instance==RNG)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a11      	ldr	r2, [pc, #68]	; (80010b0 <HAL_RNG_MspInit+0x60>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d11b      	bne.n	80010a8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001070:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001074:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	4618      	mov	r0, r3
 8001082:	f003 f96d 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 800108c:	f7ff ffc8 	bl	8001020 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <HAL_RNG_MspInit+0x64>)
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	4a07      	ldr	r2, [pc, #28]	; (80010b4 <HAL_RNG_MspInit+0x64>)
 8001096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800109a:	6353      	str	r3, [r2, #52]	; 0x34
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_RNG_MspInit+0x64>)
 800109e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80010a8:	bf00      	nop
 80010aa:	37a0      	adds	r7, #160	; 0xa0
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	50060800 	.word	0x50060800
 80010b4:	40023800 	.word	0x40023800

080010b8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <MX_SPI5_Init+0x74>)
 80010be:	4a1c      	ldr	r2, [pc, #112]	; (8001130 <MX_SPI5_Init+0x78>)
 80010c0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	; (800112c <MX_SPI5_Init+0x74>)
 80010c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <MX_SPI5_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d0:	4b16      	ldr	r3, [pc, #88]	; (800112c <MX_SPI5_Init+0x74>)
 80010d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010d6:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d8:	4b14      	ldr	r3, [pc, #80]	; (800112c <MX_SPI5_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <MX_SPI5_Init+0x74>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_SPI5_Init+0x74>)
 80010e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ea:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_SPI5_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_SPI5_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_SPI5_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_SPI5_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_SPI5_Init+0x74>)
 8001106:	2207      	movs	r2, #7
 8001108:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_SPI5_Init+0x74>)
 800110c:	2200      	movs	r2, #0
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_SPI5_Init+0x74>)
 8001112:	2200      	movs	r2, #0
 8001114:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_SPI5_Init+0x74>)
 8001118:	f003 fd74 	bl	8004c04 <HAL_SPI_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001122:	f7ff ff7d 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200002e0 	.word	0x200002e0
 8001130:	40015000 	.word	0x40015000

08001134 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a17      	ldr	r2, [pc, #92]	; (80011b0 <HAL_SPI_MspInit+0x7c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d128      	bne.n	80011a8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_SPI_MspInit+0x80>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <HAL_SPI_MspInit+0x80>)
 800115c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_SPI_MspInit+0x80>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <HAL_SPI_MspInit+0x80>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a10      	ldr	r2, [pc, #64]	; (80011b4 <HAL_SPI_MspInit+0x80>)
 8001174:	f043 0320 	orr.w	r3, r3, #32
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_SPI_MspInit+0x80>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0320 	and.w	r3, r3, #32
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001186:	f44f 7360 	mov.w	r3, #896	; 0x380
 800118a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001194:	2303      	movs	r3, #3
 8001196:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001198:	2305      	movs	r3, #5
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_SPI_MspInit+0x84>)
 80011a4:	f002 f8e6 	bl	8003374 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80011a8:	bf00      	nop
 80011aa:	3728      	adds	r7, #40	; 0x28
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40015000 	.word	0x40015000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40021400 	.word	0x40021400

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <HAL_MspInit+0x44>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <HAL_MspInit+0x44>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_MspInit+0x44>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a08      	ldr	r2, [pc, #32]	; (8001200 <HAL_MspInit+0x44>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <HAL_MspInit+0x44>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80011f2:	2005      	movs	r0, #5
 80011f4:	f001 ffea 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40023800 	.word	0x40023800

08001204 <CountDown>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CountDown(int *playerMinute, int *playerSecond)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	(*playerSecond)--;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	601a      	str	r2, [r3, #0]
	  if(*playerSecond == -1)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001220:	d115      	bne.n	800124e <CountDown+0x4a>
	  {
		  if(*playerMinute == 0)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <CountDown+0x32>
		  {
			  *playerSecond = 0;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
			  state = 3;
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <CountDown+0x58>)
 8001232:	2203      	movs	r2, #3
 8001234:	601a      	str	r2, [r3, #0]
		  }
		  if(*playerMinute != 0)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d007      	beq.n	800124e <CountDown+0x4a>
		  {
			  *playerSecond = 59;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	223b      	movs	r2, #59	; 0x3b
 8001242:	601a      	str	r2, [r3, #0]
			  (*playerMinute)--;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	601a      	str	r2, [r3, #0]
		  }
	  }
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200002b8 	.word	0x200002b8

08001260 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001264:	f001 faa4 	bl	80027b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}

0800126c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001270:	2001      	movs	r0, #1
 8001272:	f002 fa45 	bl	8003700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(state != 3){
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <EXTI0_IRQHandler+0x1c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d002      	beq.n	8001284 <EXTI0_IRQHandler+0x18>

  state = 1;
 800127e:	4b02      	ldr	r3, [pc, #8]	; (8001288 <EXTI0_IRQHandler+0x1c>)
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002b8 	.word	0x200002b8

0800128c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001290:	2002      	movs	r0, #2
 8001292:	f002 fa35 	bl	8003700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  if(state ==1){
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <EXTI1_IRQHandler+0x1c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d102      	bne.n	80012a4 <EXTI1_IRQHandler+0x18>

  state = 2;
 800129e:	4b02      	ldr	r3, [pc, #8]	; (80012a8 <EXTI1_IRQHandler+0x1c>)
 80012a0:	2202      	movs	r2, #2
 80012a2:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END EXTI1_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200002b8 	.word	0x200002b8

080012ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80012b0:	2004      	movs	r0, #4
 80012b2:	f002 fa25 	bl	8003700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  state = 3;
 80012b6:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <EXTI2_IRQHandler+0x14>)
 80012b8:	2203      	movs	r2, #3
 80012ba:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002b8 	.word	0x200002b8

080012c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80012c8:	2008      	movs	r0, #8
 80012ca:	f002 fa19 	bl	8003700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  if (state == 3) {
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <EXTI3_IRQHandler+0x34>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d10e      	bne.n	80012f4 <EXTI3_IRQHandler+0x30>
  				sendZero = 0;
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <EXTI3_IRQHandler+0x38>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
  				sendOne = 0;
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <EXTI3_IRQHandler+0x3c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
  				sendTwo = 0;
 80012e2:	4b08      	ldr	r3, [pc, #32]	; (8001304 <EXTI3_IRQHandler+0x40>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
  				ch1 = '0';
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <EXTI3_IRQHandler+0x44>)
 80012ea:	2230      	movs	r2, #48	; 0x30
 80012ec:	701a      	strb	r2, [r3, #0]
  				state = 0;
 80012ee:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <EXTI3_IRQHandler+0x34>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
  			}
  /* USER CODE END EXTI3_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200002b8 	.word	0x200002b8
 80012fc:	200002bc 	.word	0x200002bc
 8001300:	200002c0 	.word	0x200002c0
 8001304:	200002c4 	.word	0x200002c4
 8001308:	200002cc 	.word	0x200002cc

0800130c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <TIM1_UP_TIM10_IRQHandler+0x30>)
 8001312:	f004 f918 	bl	8005546 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
//  CountDown(minuteA, secondA);
//  CountDown(minuteB, secondB);
//  secondA--;
  if(playerSignal == 0)
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <TIM1_UP_TIM10_IRQHandler+0x34>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d104      	bne.n	8001328 <TIM1_UP_TIM10_IRQHandler+0x1c>
  {
	  CountDown(&minuteA, &secondA);
 800131e:	4909      	ldr	r1, [pc, #36]	; (8001344 <TIM1_UP_TIM10_IRQHandler+0x38>)
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8001322:	f7ff ff6f 	bl	8001204 <CountDown>
  CountDown(&minuteB, &secondB);

  }

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001326:	e007      	b.n	8001338 <TIM1_UP_TIM10_IRQHandler+0x2c>
  else if(playerSignal == 1)
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <TIM1_UP_TIM10_IRQHandler+0x34>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d103      	bne.n	8001338 <TIM1_UP_TIM10_IRQHandler+0x2c>
  CountDown(&minuteB, &secondB);
 8001330:	4906      	ldr	r1, [pc, #24]	; (800134c <TIM1_UP_TIM10_IRQHandler+0x40>)
 8001332:	4807      	ldr	r0, [pc, #28]	; (8001350 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8001334:	f7ff ff66 	bl	8001204 <CountDown>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000348 	.word	0x20000348
 8001340:	200002c8 	.word	0x200002c8
 8001344:	200002a0 	.word	0x200002a0
 8001348:	20000000 	.word	0x20000000
 800134c:	200002a8 	.word	0x200002a8
 8001350:	20000004 	.word	0x20000004

08001354 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <USART6_IRQHandler+0x10>)
 800135a:	f004 fe8b 	bl	8006074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000468 	.word	0x20000468

08001368 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	return 1;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <_kill>:

int _kill(int pid, int sig)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001382:	f006 fbe9 	bl	8007b58 <__errno>
 8001386:	4603      	mov	r3, r0
 8001388:	2216      	movs	r2, #22
 800138a:	601a      	str	r2, [r3, #0]
	return -1;
 800138c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <_exit>:

void _exit (int status)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff ffe7 	bl	8001378 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013aa:	e7fe      	b.n	80013aa <_exit+0x12>

080013ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e00a      	b.n	80013d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013be:	f3af 8000 	nop.w
 80013c2:	4601      	mov	r1, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbf0      	blt.n	80013be <_read+0x12>
	}

return len;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e009      	b.n	800140c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60ba      	str	r2, [r7, #8]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf1      	blt.n	80013f8 <_write+0x12>
	}
	return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_close>:

int _close(int file)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	return -1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr

08001436 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001436:	b480      	push	{r7}
 8001438:	b083      	sub	sp, #12
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001446:	605a      	str	r2, [r3, #4]
	return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_isatty>:

int _isatty(int file)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
	return 1;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
	return 0;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001490:	4a14      	ldr	r2, [pc, #80]	; (80014e4 <_sbrk+0x5c>)
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <_sbrk+0x60>)
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800149c:	4b13      	ldr	r3, [pc, #76]	; (80014ec <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <_sbrk+0x64>)
 80014a6:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <_sbrk+0x68>)
 80014a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <_sbrk+0x64>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d207      	bcs.n	80014c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b8:	f006 fb4e 	bl	8007b58 <__errno>
 80014bc:	4603      	mov	r3, r0
 80014be:	220c      	movs	r2, #12
 80014c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	e009      	b.n	80014dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <_sbrk+0x64>)
 80014d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014da:	68fb      	ldr	r3, [r7, #12]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20080000 	.word	0x20080000
 80014e8:	00000400 	.word	0x00000400
 80014ec:	20000344 	.word	0x20000344
 80014f0:	20000640 	.word	0x20000640

080014f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <SystemInit+0x5c>)
 80014fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fe:	4a14      	ldr	r2, [pc, #80]	; (8001550 <SystemInit+0x5c>)
 8001500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001508:	4b12      	ldr	r3, [pc, #72]	; (8001554 <SystemInit+0x60>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a11      	ldr	r2, [pc, #68]	; (8001554 <SystemInit+0x60>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <SystemInit+0x60>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <SystemInit+0x60>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <SystemInit+0x60>)
 8001520:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <SystemInit+0x64>)
 8001522:	4013      	ands	r3, r2
 8001524:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <SystemInit+0x60>)
 8001528:	4a0c      	ldr	r2, [pc, #48]	; (800155c <SystemInit+0x68>)
 800152a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <SystemInit+0x60>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a08      	ldr	r2, [pc, #32]	; (8001554 <SystemInit+0x60>)
 8001532:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001536:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <SystemInit+0x60>)
 800153a:	2200      	movs	r2, #0
 800153c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SystemInit+0x5c>)
 8001540:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001544:	609a      	str	r2, [r3, #8]
#endif
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00
 8001554:	40023800 	.word	0x40023800
 8001558:	fef6ffff 	.word	0xfef6ffff
 800155c:	24003010 	.word	0x24003010

08001560 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <MX_TIM1_Init+0xa0>)
 8001580:	4a20      	ldr	r2, [pc, #128]	; (8001604 <MX_TIM1_Init+0xa4>)
 8001582:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7200-1;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM1_Init+0xa0>)
 8001586:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800158a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_TIM1_Init+0xa0>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM1_Init+0xa0>)
 8001594:	f242 720f 	movw	r2, #9999	; 0x270f
 8001598:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_TIM1_Init+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ac:	4814      	ldr	r0, [pc, #80]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015ae:	f003 fecb 	bl	8005348 <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80015b8:	f7ff fd32 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4619      	mov	r1, r3
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015ca:	f004 f8db 	bl	8005784 <HAL_TIM_ConfigClockSource>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80015d4:	f7ff fd24 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM1_Init+0xa0>)
 80015ea:	f004 fb01 	bl	8005bf0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80015f4:	f7ff fd14 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20000348 	.word	0x20000348
 8001604:	40010000 	.word	0x40010000

08001608 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001626:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600;
 800162e:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001630:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001634:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000;
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_TIM2_Init+0x98>)
 800163e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001642:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM2_Init+0x98>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001650:	4813      	ldr	r0, [pc, #76]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001652:	f003 fe79 	bl	8005348 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800165c:	f7ff fce0 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_TIM2_Init+0x98>)
 800166e:	f004 f889 	bl	8005784 <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001678:	f7ff fcd2 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_TIM2_Init+0x98>)
 800168a:	f004 fab1 	bl	8005bf0 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001694:	f7ff fcc4 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000394 	.word	0x20000394

080016a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a33      	ldr	r2, [pc, #204]	; (8001790 <HAL_TIM_Base_MspInit+0xec>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d131      	bne.n	800172a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 80016c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ca:	4a32      	ldr	r2, [pc, #200]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6453      	str	r3, [r2, #68]	; 0x44
 80016d2:	4b30      	ldr	r3, [pc, #192]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 80016d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001708:	2301      	movs	r3, #1
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4821      	ldr	r0, [pc, #132]	; (8001798 <HAL_TIM_Base_MspInit+0xf4>)
 8001714:	f001 fe2e 	bl	8003374 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 3, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2103      	movs	r1, #3
 800171c:	2019      	movs	r0, #25
 800171e:	f001 fd60 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001722:	2019      	movs	r0, #25
 8001724:	f001 fd79 	bl	800321a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001728:	e02d      	b.n	8001786 <HAL_TIM_Base_MspInit+0xe2>
  else if(tim_baseHandle->Instance==TIM2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001732:	d128      	bne.n	8001786 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001734:	4b17      	ldr	r3, [pc, #92]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a16      	ldr	r2, [pc, #88]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 800173a:	f043 0301 	orr.w	r3, r3, #1
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a10      	ldr	r2, [pc, #64]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 8001752:	f043 0302 	orr.w	r3, r3, #2
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <HAL_TIM_Base_MspInit+0xf0>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001764:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001776:	2301      	movs	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4806      	ldr	r0, [pc, #24]	; (800179c <HAL_TIM_Base_MspInit+0xf8>)
 8001782:	f001 fdf7 	bl	8003374 <HAL_GPIO_Init>
}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	; 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40010000 	.word	0x40010000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020400 	.word	0x40020400

080017a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017a4:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017a6:	4a15      	ldr	r2, [pc, #84]	; (80017fc <MX_USART3_UART_Init+0x5c>)
 80017a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017aa:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017b2:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017b8:	4b0f      	ldr	r3, [pc, #60]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017be:	4b0e      	ldr	r3, [pc, #56]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017c6:	220c      	movs	r2, #12
 80017c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017d6:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <MX_USART3_UART_Init+0x58>)
 80017e4:	f004 fab0 	bl	8005d48 <HAL_UART_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017ee:	f7ff fc17 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200003e0 	.word	0x200003e0
 80017fc:	40004800 	.word	0x40004800

08001800 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001804:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_USART6_UART_Init+0x58>)
 8001806:	4a15      	ldr	r2, [pc, #84]	; (800185c <MX_USART6_UART_Init+0x5c>)
 8001808:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800180a:	4b13      	ldr	r3, [pc, #76]	; (8001858 <MX_USART6_UART_Init+0x58>)
 800180c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001810:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_USART6_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_USART6_UART_Init+0x58>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_USART6_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_USART6_UART_Init+0x58>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_USART6_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_USART6_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_USART6_UART_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_USART6_UART_Init+0x58>)
 800183e:	2200      	movs	r2, #0
 8001840:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_USART6_UART_Init+0x58>)
 8001844:	f004 fa80 	bl	8005d48 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800184e:	f7ff fbe7 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000468 	.word	0x20000468
 800185c:	40011400 	.word	0x40011400

08001860 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0b0      	sub	sp, #192	; 0xc0
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	2290      	movs	r2, #144	; 0x90
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f006 f916 	bl	8007ab2 <memset>
  if(uartHandle->Instance==USART3)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <HAL_UART_MspInit+0x148>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d13d      	bne.n	800190c <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001894:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001896:	2300      	movs	r3, #0
 8001898:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fd5e 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018aa:	f7ff fbb9 	bl	8001020 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018ae:	4b3f      	ldr	r3, [pc, #252]	; (80019ac <HAL_UART_MspInit+0x14c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a3e      	ldr	r2, [pc, #248]	; (80019ac <HAL_UART_MspInit+0x14c>)
 80018b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b3c      	ldr	r3, [pc, #240]	; (80019ac <HAL_UART_MspInit+0x14c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018c6:	4b39      	ldr	r3, [pc, #228]	; (80019ac <HAL_UART_MspInit+0x14c>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a38      	ldr	r2, [pc, #224]	; (80019ac <HAL_UART_MspInit+0x14c>)
 80018cc:	f043 0308 	orr.w	r3, r3, #8
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b36      	ldr	r3, [pc, #216]	; (80019ac <HAL_UART_MspInit+0x14c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018f8:	2307      	movs	r3, #7
 80018fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001902:	4619      	mov	r1, r3
 8001904:	482a      	ldr	r0, [pc, #168]	; (80019b0 <HAL_UART_MspInit+0x150>)
 8001906:	f001 fd35 	bl	8003374 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800190a:	e048      	b.n	800199e <HAL_UART_MspInit+0x13e>
  else if(uartHandle->Instance==USART6)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a28      	ldr	r2, [pc, #160]	; (80019b4 <HAL_UART_MspInit+0x154>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d143      	bne.n	800199e <HAL_UART_MspInit+0x13e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800191a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800191c:	2300      	movs	r3, #0
 800191e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4618      	mov	r0, r3
 8001926:	f002 fd1b 	bl	8004360 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001930:	f7ff fb76 	bl	8001020 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <HAL_UART_MspInit+0x14c>)
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <HAL_UART_MspInit+0x14c>)
 800193a:	f043 0320 	orr.w	r3, r3, #32
 800193e:	6453      	str	r3, [r2, #68]	; 0x44
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <HAL_UART_MspInit+0x14c>)
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_UART_MspInit+0x14c>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_UART_MspInit+0x14c>)
 8001952:	f043 0304 	orr.w	r3, r3, #4
 8001956:	6313      	str	r3, [r2, #48]	; 0x30
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_UART_MspInit+0x14c>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001964:	23c0      	movs	r3, #192	; 0xc0
 8001966:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800197c:	2308      	movs	r3, #8
 800197e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001982:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001986:	4619      	mov	r1, r3
 8001988:	480b      	ldr	r0, [pc, #44]	; (80019b8 <HAL_UART_MspInit+0x158>)
 800198a:	f001 fcf3 	bl	8003374 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 1, 0);
 800198e:	2200      	movs	r2, #0
 8001990:	2101      	movs	r1, #1
 8001992:	2047      	movs	r0, #71	; 0x47
 8001994:	f001 fc25 	bl	80031e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001998:	2047      	movs	r0, #71	; 0x47
 800199a:	f001 fc3e 	bl	800321a <HAL_NVIC_EnableIRQ>
}
 800199e:	bf00      	nop
 80019a0:	37c0      	adds	r7, #192	; 0xc0
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004800 	.word	0x40004800
 80019ac:	40023800 	.word	0x40023800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40011400 	.word	0x40011400
 80019b8:	40020800 	.word	0x40020800

080019bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019f4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019c2:	e003      	b.n	80019cc <LoopCopyDataInit>

080019c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019ca:	3104      	adds	r1, #4

080019cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019cc:	480b      	ldr	r0, [pc, #44]	; (80019fc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019d4:	d3f6      	bcc.n	80019c4 <CopyDataInit>
  ldr  r2, =_sbss
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019d8:	e002      	b.n	80019e0 <LoopFillZerobss>

080019da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019dc:	f842 3b04 	str.w	r3, [r2], #4

080019e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019e0:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019e4:	d3f9      	bcc.n	80019da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019e6:	f7ff fd85 	bl	80014f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ea:	f006 f8bb 	bl	8007b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ee:	f7ff f971 	bl	8000cd4 <main>
  bx  lr    
 80019f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019f4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80019f8:	080a01b4 	.word	0x080a01b4
  ldr  r0, =_sdata
 80019fc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a00:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8001a04:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8001a08:	20000640 	.word	0x20000640

08001a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a0c:	e7fe      	b.n	8001a0c <ADC_IRQHandler>
	...

08001a10 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001a10:	b590      	push	{r4, r7, lr}
 8001a12:	b089      	sub	sp, #36	; 0x24
 8001a14:	af02      	add	r7, sp, #8
 8001a16:	4604      	mov	r4, r0
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	71fb      	strb	r3, [r7, #7]
 8001a22:	4603      	mov	r3, r0
 8001a24:	71bb      	strb	r3, [r7, #6]
 8001a26:	460b      	mov	r3, r1
 8001a28:	717b      	strb	r3, [r7, #5]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001a32:	7dfb      	ldrb	r3, [r7, #23]
 8001a34:	2b1f      	cmp	r3, #31
 8001a36:	d802      	bhi.n	8001a3e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	e002      	b.n	8001a44 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	3b20      	subs	r3, #32
 8001a42:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	753b      	strb	r3, [r7, #20]
 8001a48:	e012      	b.n	8001a70 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001a4a:	7dfa      	ldrb	r2, [r7, #23]
 8001a4c:	7d38      	ldrb	r0, [r7, #20]
 8001a4e:	7d39      	ldrb	r1, [r7, #20]
 8001a50:	4c3b      	ldr	r4, [pc, #236]	; (8001b40 <ILI9341_Draw_Char+0x130>)
 8001a52:	4613      	mov	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	4413      	add	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4423      	add	r3, r4
 8001a5c:	4403      	add	r3, r0
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	f101 0318 	add.w	r3, r1, #24
 8001a64:	443b      	add	r3, r7
 8001a66:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001a6a:	7d3b      	ldrb	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	753b      	strb	r3, [r7, #20]
 8001a70:	7d3b      	ldrb	r3, [r7, #20]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d9e9      	bls.n	8001a4a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001a76:	79bb      	ldrb	r3, [r7, #6]
 8001a78:	b298      	uxth	r0, r3
 8001a7a:	797b      	ldrb	r3, [r7, #5]
 8001a7c:	b299      	uxth	r1, r3
 8001a7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a80:	461a      	mov	r2, r3
 8001a82:	0052      	lsls	r2, r2, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	b29c      	uxth	r4, r3
 8001a90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4623      	mov	r3, r4
 8001a96:	f000 fde9 	bl	800266c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	757b      	strb	r3, [r7, #21]
 8001a9e:	e047      	b.n	8001b30 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	75bb      	strb	r3, [r7, #22]
 8001aa4:	e03e      	b.n	8001b24 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001aa6:	7d7b      	ldrb	r3, [r7, #21]
 8001aa8:	3318      	adds	r3, #24
 8001aaa:	443b      	add	r3, r7
 8001aac:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	7dbb      	ldrb	r3, [r7, #22]
 8001ab4:	fa42 f303 	asr.w	r3, r2, r3
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d02e      	beq.n	8001b1e <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001ac0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d110      	bne.n	8001ae8 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	7d7b      	ldrb	r3, [r7, #21]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	b298      	uxth	r0, r3
 8001ad2:	797b      	ldrb	r3, [r7, #5]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	7dbb      	ldrb	r3, [r7, #22]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	4413      	add	r3, r2
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	887a      	ldrh	r2, [r7, #2]
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f000 fce9 	bl	80024b8 <ILI9341_Draw_Pixel>
 8001ae6:	e01a      	b.n	8001b1e <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	7d7b      	ldrb	r3, [r7, #21]
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001af2:	fb11 f303 	smulbb	r3, r1, r3
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	4413      	add	r3, r2
 8001afa:	b298      	uxth	r0, r3
 8001afc:	797b      	ldrb	r3, [r7, #5]
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	7dbb      	ldrb	r3, [r7, #22]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001b06:	fb11 f303 	smulbb	r3, r1, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b299      	uxth	r1, r3
 8001b10:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001b12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	4623      	mov	r3, r4
 8001b1a:	f000 fda7 	bl	800266c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001b1e:	7dbb      	ldrb	r3, [r7, #22]
 8001b20:	3301      	adds	r3, #1
 8001b22:	75bb      	strb	r3, [r7, #22]
 8001b24:	7dbb      	ldrb	r3, [r7, #22]
 8001b26:	2b07      	cmp	r3, #7
 8001b28:	d9bd      	bls.n	8001aa6 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001b2a:	7d7b      	ldrb	r3, [r7, #21]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	757b      	strb	r3, [r7, #21]
 8001b30:	7d7b      	ldrb	r3, [r7, #21]
 8001b32:	2b05      	cmp	r3, #5
 8001b34:	d9b4      	bls.n	8001aa0 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001b36:	bf00      	nop
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd90      	pop	{r4, r7, pc}
 8001b40:	0809fbf0 	.word	0x0809fbf0

08001b44 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	4608      	mov	r0, r1
 8001b4e:	4611      	mov	r1, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	4603      	mov	r3, r0
 8001b54:	70fb      	strb	r3, [r7, #3]
 8001b56:	460b      	mov	r3, r1
 8001b58:	70bb      	strb	r3, [r7, #2]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001b5e:	e017      	b.n	8001b90 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	7818      	ldrb	r0, [r3, #0]
 8001b68:	883c      	ldrh	r4, [r7, #0]
 8001b6a:	78ba      	ldrb	r2, [r7, #2]
 8001b6c:	78f9      	ldrb	r1, [r7, #3]
 8001b6e:	8bbb      	ldrh	r3, [r7, #28]
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	8b3b      	ldrh	r3, [r7, #24]
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	4623      	mov	r3, r4
 8001b78:	f7ff ff4a 	bl	8001a10 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001b7c:	8b3b      	ldrh	r3, [r7, #24]
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	0052      	lsls	r2, r2, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	78fb      	ldrb	r3, [r7, #3]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e3      	bne.n	8001b60 <ILI9341_Draw_Text+0x1c>
    }
}
 8001b98:	bf00      	nop
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd90      	pop	{r4, r7, pc}
	...

08001ba4 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bb0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001bb4:	6018      	str	r0, [r3, #0]
 8001bb6:	460a      	mov	r2, r1
 8001bb8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bbc:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001bc0:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 8001bc2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001bc6:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d15e      	bne.n	8001c8e <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	f000 fa67 	bl	80020a4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001bd6:	23f0      	movs	r3, #240	; 0xf0
 8001bd8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 f9f6 	bl	8001fd0 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001be4:	2201      	movs	r2, #1
 8001be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bea:	48c4      	ldr	r0, [pc, #784]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001bec:	f001 fd6e 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bf6:	48c1      	ldr	r0, [pc, #772]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001bf8:	f001 fd68 	bl	80036cc <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001c08:	e035      	b.n	8001c76 <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001c10:	e019      	b.n	8001c46 <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001c12:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8001c16:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001c1a:	4413      	add	r3, r2
 8001c1c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001c20:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	4413      	add	r3, r2
 8001c28:	7819      	ldrb	r1, [r3, #0]
 8001c2a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c2e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001c32:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001c36:	4413      	add	r3, r2
 8001c38:	460a      	mov	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001c3c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001c40:	3301      	adds	r3, #1
 8001c42:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8001c46:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001c4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c4e:	d3e0      	bcc.n	8001c12 <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001c50:	f107 010c 	add.w	r1, r7, #12
 8001c54:	230a      	movs	r3, #10
 8001c56:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c5a:	48a9      	ldr	r0, [pc, #676]	; (8001f00 <ILI9341_Draw_Image+0x35c>)
 8001c5c:	f003 f87d 	bl	8004d5a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001c60:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8001c64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c68:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001c6c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001c70:	3301      	adds	r3, #1
 8001c72:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8001c76:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8001c7a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001c7e:	d9c4      	bls.n	8001c0a <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c86:	489d      	ldr	r0, [pc, #628]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001c88:	f001 fd20 	bl	80036cc <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 8001c8c:	e130      	b.n	8001ef0 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8001c8e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001c92:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d15e      	bne.n	8001d5a <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001c9c:	2003      	movs	r0, #3
 8001c9e:	f000 fa01 	bl	80020a4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 8001ca2:	23f0      	movs	r3, #240	; 0xf0
 8001ca4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2000      	movs	r0, #0
 8001cac:	f000 f990 	bl	8001fd0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001cb6:	4891      	ldr	r0, [pc, #580]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001cb8:	f001 fd08 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001cc2:	488e      	ldr	r0, [pc, #568]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001cc4:	f001 fd02 	bl	80036cc <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001cd4:	e035      	b.n	8001d42 <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001cdc:	e019      	b.n	8001d12 <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001cde:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8001ce2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001ce6:	4413      	add	r3, r2
 8001ce8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001cec:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	7819      	ldrb	r1, [r3, #0]
 8001cf6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001cfa:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001cfe:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d02:	4413      	add	r3, r2
 8001d04:	460a      	mov	r2, r1
 8001d06:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001d08:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001d12:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d1a:	d3e0      	bcc.n	8001cde <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001d1c:	f107 010c 	add.w	r1, r7, #12
 8001d20:	230a      	movs	r3, #10
 8001d22:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001d26:	4876      	ldr	r0, [pc, #472]	; (8001f00 <ILI9341_Draw_Image+0x35c>)
 8001d28:	f003 f817 	bl	8004d5a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001d2c:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8001d30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001d34:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001d38:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8001d42:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8001d46:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001d4a:	d9c4      	bls.n	8001cd6 <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d52:	486a      	ldr	r0, [pc, #424]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001d54:	f001 fcba 	bl	80036cc <HAL_GPIO_WritePin>
}
 8001d58:	e0ca      	b.n	8001ef0 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 8001d5a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001d5e:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d15e      	bne.n	8001e26 <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 8001d68:	2002      	movs	r0, #2
 8001d6a:	f000 f99b 	bl	80020a4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001d6e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d72:	22f0      	movs	r2, #240	; 0xf0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2000      	movs	r0, #0
 8001d78:	f000 f92a 	bl	8001fd0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d82:	485e      	ldr	r0, [pc, #376]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001d84:	f001 fca2 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d8e:	485b      	ldr	r0, [pc, #364]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001d90:	f001 fc9c 	bl	80036cc <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001da0:	e035      	b.n	8001e0e <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001da8:	e019      	b.n	8001dde <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001daa:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001dae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001db2:	4413      	add	r3, r2
 8001db4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001db8:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	7819      	ldrb	r1, [r3, #0]
 8001dc2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001dc6:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001dca:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001dce:	4413      	add	r3, r2
 8001dd0:	460a      	mov	r2, r1
 8001dd2:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001dd4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8001dde:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8001de2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001de6:	d3e0      	bcc.n	8001daa <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001de8:	f107 010c 	add.w	r1, r7, #12
 8001dec:	230a      	movs	r3, #10
 8001dee:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001df2:	4843      	ldr	r0, [pc, #268]	; (8001f00 <ILI9341_Draw_Image+0x35c>)
 8001df4:	f002 ffb1 	bl	8004d5a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001df8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8001dfc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001e00:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001e04:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8001e0e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8001e12:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001e16:	d9c4      	bls.n	8001da2 <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1e:	4837      	ldr	r0, [pc, #220]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001e20:	f001 fc54 	bl	80036cc <HAL_GPIO_WritePin>
}
 8001e24:	e064      	b.n	8001ef0 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 8001e26:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e2a:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d15d      	bne.n	8001ef0 <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 f935 	bl	80020a4 <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 8001e3a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e3e:	22f0      	movs	r2, #240	; 0xf0
 8001e40:	2100      	movs	r1, #0
 8001e42:	2000      	movs	r0, #0
 8001e44:	f000 f8c4 	bl	8001fd0 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e4e:	482b      	ldr	r0, [pc, #172]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001e50:	f001 fc3c 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e54:	2200      	movs	r2, #0
 8001e56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e5a:	4828      	ldr	r0, [pc, #160]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001e5c:	f001 fc36 	bl	80036cc <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001e6c:	e035      	b.n	8001eda <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001e74:	e019      	b.n	8001eaa <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8001e76:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8001e7a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e7e:	4413      	add	r3, r2
 8001e80:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8001e84:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	7819      	ldrb	r1, [r3, #0]
 8001e8e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001e92:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8001e96:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e9a:	4413      	add	r3, r2
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8001ea0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8001eaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eb2:	d3e0      	bcc.n	8001e76 <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8001eb4:	f107 010c 	add.w	r1, r7, #12
 8001eb8:	230a      	movs	r3, #10
 8001eba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ebe:	4810      	ldr	r0, [pc, #64]	; (8001f00 <ILI9341_Draw_Image+0x35c>)
 8001ec0:	f002 ff4b 	bl	8004d5a <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8001ec4:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8001ec8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ecc:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8001ed0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8001eda:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001ede:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8001ee2:	d9c4      	bls.n	8001e6e <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eea:	4804      	ldr	r0, [pc, #16]	; (8001efc <ILI9341_Draw_Image+0x358>)
 8001eec:	f001 fbee 	bl	80036cc <HAL_GPIO_WritePin>
}
 8001ef0:	bf00      	nop
 8001ef2:	f507 770c 	add.w	r7, r7, #560	; 0x230
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40020800 	.word	0x40020800
 8001f00:	200002e0 	.word	0x200002e0

08001f04 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8001f08:	f7ff f8d6 	bl	80010b8 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8001f0c:	f7fe fc00 	bl	8000710 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8001f10:	2200      	movs	r2, #0
 8001f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f16:	4802      	ldr	r0, [pc, #8]	; (8001f20 <ILI9341_SPI_Init+0x1c>)
 8001f18:	f001 fbd8 	bl	80036cc <HAL_GPIO_WritePin>
}
 8001f1c:	bf00      	nop
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40020800 	.word	0x40020800

08001f24 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001f2e:	1df9      	adds	r1, r7, #7
 8001f30:	2301      	movs	r3, #1
 8001f32:	2201      	movs	r2, #1
 8001f34:	4803      	ldr	r0, [pc, #12]	; (8001f44 <ILI9341_SPI_Send+0x20>)
 8001f36:	f002 ff10 	bl	8004d5a <HAL_SPI_Transmit>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200002e0 	.word	0x200002e0

08001f48 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f58:	480b      	ldr	r0, [pc, #44]	; (8001f88 <ILI9341_Write_Command+0x40>)
 8001f5a:	f001 fbb7 	bl	80036cc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f64:	4808      	ldr	r0, [pc, #32]	; (8001f88 <ILI9341_Write_Command+0x40>)
 8001f66:	f001 fbb1 	bl	80036cc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ffd9 	bl	8001f24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f78:	4803      	ldr	r0, [pc, #12]	; (8001f88 <ILI9341_Write_Command+0x40>)
 8001f7a:	f001 fba7 	bl	80036cc <HAL_GPIO_WritePin>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40020800 	.word	0x40020800

08001f8c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <ILI9341_Write_Data+0x40>)
 8001f9e:	f001 fb95 	bl	80036cc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa8:	4808      	ldr	r0, [pc, #32]	; (8001fcc <ILI9341_Write_Data+0x40>)
 8001faa:	f001 fb8f 	bl	80036cc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ffb7 	bl	8001f24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <ILI9341_Write_Data+0x40>)
 8001fbe:	f001 fb85 	bl	80036cc <HAL_GPIO_WritePin>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40020800 	.word	0x40020800

08001fd0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4623      	mov	r3, r4
 8001fe0:	80fb      	strh	r3, [r7, #6]
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	80bb      	strh	r3, [r7, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	807b      	strh	r3, [r7, #2]
 8001fea:	4613      	mov	r3, r2
 8001fec:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001fee:	202a      	movs	r0, #42	; 0x2a
 8001ff0:	f7ff ffaa 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ffc5 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ffc0 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	b29b      	uxth	r3, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ffb9 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ffb4 	bl	8001f8c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8002024:	202b      	movs	r0, #43	; 0x2b
 8002026:	f7ff ff8f 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800202a:	88bb      	ldrh	r3, [r7, #4]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	b29b      	uxth	r3, r3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ffaa 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8002038:	88bb      	ldrh	r3, [r7, #4]
 800203a:	b2db      	uxtb	r3, r3
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff ffa5 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8002042:	883b      	ldrh	r3, [r7, #0]
 8002044:	0a1b      	lsrs	r3, r3, #8
 8002046:	b29b      	uxth	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff ff9e 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8002050:	883b      	ldrh	r3, [r7, #0]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff ff99 	bl	8001f8c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800205a:	202c      	movs	r0, #44	; 0x2c
 800205c:	f7ff ff74 	bl	8001f48 <ILI9341_Write_Command>
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}

08002068 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002072:	480b      	ldr	r0, [pc, #44]	; (80020a0 <ILI9341_Reset+0x38>)
 8002074:	f001 fb2a 	bl	80036cc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002078:	20c8      	movs	r0, #200	; 0xc8
 800207a:	f000 fbb9 	bl	80027f0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800207e:	2200      	movs	r2, #0
 8002080:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002084:	4806      	ldr	r0, [pc, #24]	; (80020a0 <ILI9341_Reset+0x38>)
 8002086:	f001 fb21 	bl	80036cc <HAL_GPIO_WritePin>
HAL_Delay(200);
 800208a:	20c8      	movs	r0, #200	; 0xc8
 800208c:	f000 fbb0 	bl	80027f0 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002090:	2201      	movs	r2, #1
 8002092:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002096:	4802      	ldr	r0, [pc, #8]	; (80020a0 <ILI9341_Reset+0x38>)
 8002098:	f001 fb18 	bl	80036cc <HAL_GPIO_WritePin>
}
 800209c:	bf00      	nop
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	40020800 	.word	0x40020800

080020a4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80020b2:	2036      	movs	r0, #54	; 0x36
 80020b4:	f7ff ff48 	bl	8001f48 <ILI9341_Write_Command>
HAL_Delay(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f000 fb99 	bl	80027f0 <HAL_Delay>
	
switch(screen_rotation) 
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d837      	bhi.n	8002134 <ILI9341_Set_Rotation+0x90>
 80020c4:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <ILI9341_Set_Rotation+0x28>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	080020dd 	.word	0x080020dd
 80020d0:	080020f3 	.word	0x080020f3
 80020d4:	08002109 	.word	0x08002109
 80020d8:	0800211f 	.word	0x0800211f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80020dc:	2048      	movs	r0, #72	; 0x48
 80020de:	f7ff ff55 	bl	8001f8c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <ILI9341_Set_Rotation+0x9c>)
 80020e4:	22f0      	movs	r2, #240	; 0xf0
 80020e6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <ILI9341_Set_Rotation+0xa0>)
 80020ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020ee:	801a      	strh	r2, [r3, #0]
			break;
 80020f0:	e021      	b.n	8002136 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80020f2:	2028      	movs	r0, #40	; 0x28
 80020f4:	f7ff ff4a 	bl	8001f8c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <ILI9341_Set_Rotation+0x9c>)
 80020fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020fe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <ILI9341_Set_Rotation+0xa0>)
 8002102:	22f0      	movs	r2, #240	; 0xf0
 8002104:	801a      	strh	r2, [r3, #0]
			break;
 8002106:	e016      	b.n	8002136 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002108:	2088      	movs	r0, #136	; 0x88
 800210a:	f7ff ff3f 	bl	8001f8c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <ILI9341_Set_Rotation+0x9c>)
 8002110:	22f0      	movs	r2, #240	; 0xf0
 8002112:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <ILI9341_Set_Rotation+0xa0>)
 8002116:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800211a:	801a      	strh	r2, [r3, #0]
			break;
 800211c:	e00b      	b.n	8002136 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800211e:	20e8      	movs	r0, #232	; 0xe8
 8002120:	f7ff ff34 	bl	8001f8c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <ILI9341_Set_Rotation+0x9c>)
 8002126:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800212a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800212c:	4b05      	ldr	r3, [pc, #20]	; (8002144 <ILI9341_Set_Rotation+0xa0>)
 800212e:	22f0      	movs	r2, #240	; 0xf0
 8002130:	801a      	strh	r2, [r3, #0]
			break;
 8002132:	e000      	b.n	8002136 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002134:	bf00      	nop
	}
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000012 	.word	0x20000012
 8002144:	20000010 	.word	0x20000010

08002148 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800214c:	2201      	movs	r2, #1
 800214e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002152:	4802      	ldr	r0, [pc, #8]	; (800215c <ILI9341_Enable+0x14>)
 8002154:	f001 faba 	bl	80036cc <HAL_GPIO_WritePin>
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40020800 	.word	0x40020800

08002160 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002164:	f7ff fff0 	bl	8002148 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002168:	f7ff fecc 	bl	8001f04 <ILI9341_SPI_Init>
ILI9341_Reset();
 800216c:	f7ff ff7c 	bl	8002068 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff fee9 	bl	8001f48 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800217a:	f000 fb39 	bl	80027f0 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800217e:	20cb      	movs	r0, #203	; 0xcb
 8002180:	f7ff fee2 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002184:	2039      	movs	r0, #57	; 0x39
 8002186:	f7ff ff01 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800218a:	202c      	movs	r0, #44	; 0x2c
 800218c:	f7ff fefe 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002190:	2000      	movs	r0, #0
 8002192:	f7ff fefb 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002196:	2034      	movs	r0, #52	; 0x34
 8002198:	f7ff fef8 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800219c:	2002      	movs	r0, #2
 800219e:	f7ff fef5 	bl	8001f8c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80021a2:	20cf      	movs	r0, #207	; 0xcf
 80021a4:	f7ff fed0 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f7ff feef 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80021ae:	20c1      	movs	r0, #193	; 0xc1
 80021b0:	f7ff feec 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80021b4:	2030      	movs	r0, #48	; 0x30
 80021b6:	f7ff fee9 	bl	8001f8c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80021ba:	20e8      	movs	r0, #232	; 0xe8
 80021bc:	f7ff fec4 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80021c0:	2085      	movs	r0, #133	; 0x85
 80021c2:	f7ff fee3 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff fee0 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80021cc:	2078      	movs	r0, #120	; 0x78
 80021ce:	f7ff fedd 	bl	8001f8c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80021d2:	20ea      	movs	r0, #234	; 0xea
 80021d4:	f7ff feb8 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff fed7 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f7ff fed4 	bl	8001f8c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80021e4:	20ed      	movs	r0, #237	; 0xed
 80021e6:	f7ff feaf 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80021ea:	2064      	movs	r0, #100	; 0x64
 80021ec:	f7ff fece 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80021f0:	2003      	movs	r0, #3
 80021f2:	f7ff fecb 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80021f6:	2012      	movs	r0, #18
 80021f8:	f7ff fec8 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80021fc:	2081      	movs	r0, #129	; 0x81
 80021fe:	f7ff fec5 	bl	8001f8c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002202:	20f7      	movs	r0, #247	; 0xf7
 8002204:	f7ff fea0 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002208:	2020      	movs	r0, #32
 800220a:	f7ff febf 	bl	8001f8c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 800220e:	20c0      	movs	r0, #192	; 0xc0
 8002210:	f7ff fe9a 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002214:	2023      	movs	r0, #35	; 0x23
 8002216:	f7ff feb9 	bl	8001f8c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 800221a:	20c1      	movs	r0, #193	; 0xc1
 800221c:	f7ff fe94 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002220:	2010      	movs	r0, #16
 8002222:	f7ff feb3 	bl	8001f8c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002226:	20c5      	movs	r0, #197	; 0xc5
 8002228:	f7ff fe8e 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 800222c:	203e      	movs	r0, #62	; 0x3e
 800222e:	f7ff fead 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002232:	2028      	movs	r0, #40	; 0x28
 8002234:	f7ff feaa 	bl	8001f8c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002238:	20c7      	movs	r0, #199	; 0xc7
 800223a:	f7ff fe85 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800223e:	2086      	movs	r0, #134	; 0x86
 8002240:	f7ff fea4 	bl	8001f8c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002244:	2036      	movs	r0, #54	; 0x36
 8002246:	f7ff fe7f 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800224a:	2048      	movs	r0, #72	; 0x48
 800224c:	f7ff fe9e 	bl	8001f8c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002250:	203a      	movs	r0, #58	; 0x3a
 8002252:	f7ff fe79 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002256:	2055      	movs	r0, #85	; 0x55
 8002258:	f7ff fe98 	bl	8001f8c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800225c:	20b1      	movs	r0, #177	; 0xb1
 800225e:	f7ff fe73 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002262:	2000      	movs	r0, #0
 8002264:	f7ff fe92 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002268:	2018      	movs	r0, #24
 800226a:	f7ff fe8f 	bl	8001f8c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800226e:	20b6      	movs	r0, #182	; 0xb6
 8002270:	f7ff fe6a 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002274:	2008      	movs	r0, #8
 8002276:	f7ff fe89 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800227a:	2082      	movs	r0, #130	; 0x82
 800227c:	f7ff fe86 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002280:	2027      	movs	r0, #39	; 0x27
 8002282:	f7ff fe83 	bl	8001f8c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002286:	20f2      	movs	r0, #242	; 0xf2
 8002288:	f7ff fe5e 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800228c:	2000      	movs	r0, #0
 800228e:	f7ff fe7d 	bl	8001f8c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002292:	2026      	movs	r0, #38	; 0x26
 8002294:	f7ff fe58 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff fe77 	bl	8001f8c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800229e:	20e0      	movs	r0, #224	; 0xe0
 80022a0:	f7ff fe52 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80022a4:	200f      	movs	r0, #15
 80022a6:	f7ff fe71 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80022aa:	2031      	movs	r0, #49	; 0x31
 80022ac:	f7ff fe6e 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80022b0:	202b      	movs	r0, #43	; 0x2b
 80022b2:	f7ff fe6b 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80022b6:	200c      	movs	r0, #12
 80022b8:	f7ff fe68 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80022bc:	200e      	movs	r0, #14
 80022be:	f7ff fe65 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80022c2:	2008      	movs	r0, #8
 80022c4:	f7ff fe62 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80022c8:	204e      	movs	r0, #78	; 0x4e
 80022ca:	f7ff fe5f 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80022ce:	20f1      	movs	r0, #241	; 0xf1
 80022d0:	f7ff fe5c 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80022d4:	2037      	movs	r0, #55	; 0x37
 80022d6:	f7ff fe59 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80022da:	2007      	movs	r0, #7
 80022dc:	f7ff fe56 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80022e0:	2010      	movs	r0, #16
 80022e2:	f7ff fe53 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80022e6:	2003      	movs	r0, #3
 80022e8:	f7ff fe50 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80022ec:	200e      	movs	r0, #14
 80022ee:	f7ff fe4d 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80022f2:	2009      	movs	r0, #9
 80022f4:	f7ff fe4a 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff fe47 	bl	8001f8c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80022fe:	20e1      	movs	r0, #225	; 0xe1
 8002300:	f7ff fe22 	bl	8001f48 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fe41 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800230a:	200e      	movs	r0, #14
 800230c:	f7ff fe3e 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002310:	2014      	movs	r0, #20
 8002312:	f7ff fe3b 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002316:	2003      	movs	r0, #3
 8002318:	f7ff fe38 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 800231c:	2011      	movs	r0, #17
 800231e:	f7ff fe35 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002322:	2007      	movs	r0, #7
 8002324:	f7ff fe32 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002328:	2031      	movs	r0, #49	; 0x31
 800232a:	f7ff fe2f 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800232e:	20c1      	movs	r0, #193	; 0xc1
 8002330:	f7ff fe2c 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002334:	2048      	movs	r0, #72	; 0x48
 8002336:	f7ff fe29 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800233a:	2008      	movs	r0, #8
 800233c:	f7ff fe26 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002340:	200f      	movs	r0, #15
 8002342:	f7ff fe23 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002346:	200c      	movs	r0, #12
 8002348:	f7ff fe20 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800234c:	2031      	movs	r0, #49	; 0x31
 800234e:	f7ff fe1d 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002352:	2036      	movs	r0, #54	; 0x36
 8002354:	f7ff fe1a 	bl	8001f8c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002358:	200f      	movs	r0, #15
 800235a:	f7ff fe17 	bl	8001f8c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800235e:	2011      	movs	r0, #17
 8002360:	f7ff fdf2 	bl	8001f48 <ILI9341_Write_Command>
HAL_Delay(120);
 8002364:	2078      	movs	r0, #120	; 0x78
 8002366:	f000 fa43 	bl	80027f0 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800236a:	2029      	movs	r0, #41	; 0x29
 800236c:	f7ff fdec 	bl	8001f48 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff fe97 	bl	80020a4 <ILI9341_Set_Rotation>
}
 8002376:	bf00      	nop
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800237c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002380:	b08d      	sub	sp, #52	; 0x34
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	6039      	str	r1, [r7, #0]
 8002388:	80fb      	strh	r3, [r7, #6]
 800238a:	466b      	mov	r3, sp
 800238c:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800239a:	d202      	bcs.n	80023a2 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a0:	e002      	b.n	80023a8 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80023a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80023a8:	2201      	movs	r2, #1
 80023aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023ae:	4840      	ldr	r0, [pc, #256]	; (80024b0 <ILI9341_Draw_Colour_Burst+0x134>)
 80023b0:	f001 f98c 	bl	80036cc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80023b4:	2200      	movs	r2, #0
 80023b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ba:	483d      	ldr	r0, [pc, #244]	; (80024b0 <ILI9341_Draw_Colour_Burst+0x134>)
 80023bc:	f001 f986 	bl	80036cc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80023ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023cc:	460b      	mov	r3, r1
 80023ce:	3b01      	subs	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	2300      	movs	r3, #0
 80023d4:	4688      	mov	r8, r1
 80023d6:	4699      	mov	r9, r3
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	f04f 0300 	mov.w	r3, #0
 80023e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ec:	2300      	movs	r3, #0
 80023ee:	460c      	mov	r4, r1
 80023f0:	461d      	mov	r5, r3
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	00eb      	lsls	r3, r5, #3
 80023fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002400:	00e2      	lsls	r2, r4, #3
 8002402:	1dcb      	adds	r3, r1, #7
 8002404:	08db      	lsrs	r3, r3, #3
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	ebad 0d03 	sub.w	sp, sp, r3
 800240c:	466b      	mov	r3, sp
 800240e:	3300      	adds	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002412:	2300      	movs	r3, #0
 8002414:	62bb      	str	r3, [r7, #40]	; 0x28
 8002416:	e00e      	b.n	8002436 <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241c:	4413      	add	r3, r2
 800241e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002422:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	3301      	adds	r3, #1
 8002428:	88fa      	ldrh	r2, [r7, #6]
 800242a:	b2d1      	uxtb	r1, r2
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002432:	3302      	adds	r3, #2
 8002434:	62bb      	str	r3, [r7, #40]	; 0x28
 8002436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	429a      	cmp	r2, r3
 800243c:	d3ec      	bcc.n	8002418 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002452:	fbb3 f2f2 	udiv	r2, r3, r2
 8002456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002458:	fb01 f202 	mul.w	r2, r1, r2
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d010      	beq.n	8002488 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002466:	2300      	movs	r3, #0
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	e009      	b.n	8002480 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	b29a      	uxth	r2, r3
 8002470:	230a      	movs	r3, #10
 8002472:	69b9      	ldr	r1, [r7, #24]
 8002474:	480f      	ldr	r0, [pc, #60]	; (80024b4 <ILI9341_Draw_Colour_Burst+0x138>)
 8002476:	f002 fc70 	bl	8004d5a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	3301      	adds	r3, #1
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
 8002480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	429a      	cmp	r2, r3
 8002486:	d3f1      	bcc.n	800246c <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	b29a      	uxth	r2, r3
 800248c:	230a      	movs	r3, #10
 800248e:	69b9      	ldr	r1, [r7, #24]
 8002490:	4808      	ldr	r0, [pc, #32]	; (80024b4 <ILI9341_Draw_Colour_Burst+0x138>)
 8002492:	f002 fc62 	bl	8004d5a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002496:	2201      	movs	r2, #1
 8002498:	f44f 7180 	mov.w	r1, #256	; 0x100
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <ILI9341_Draw_Colour_Burst+0x134>)
 800249e:	f001 f915 	bl	80036cc <HAL_GPIO_WritePin>
 80024a2:	46b5      	mov	sp, r6
}
 80024a4:	bf00      	nop
 80024a6:	3734      	adds	r7, #52	; 0x34
 80024a8:	46bd      	mov	sp, r7
 80024aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80024ae:	bf00      	nop
 80024b0:	40020800 	.word	0x40020800
 80024b4:	200002e0 	.word	0x200002e0

080024b8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
 80024c2:	460b      	mov	r3, r1
 80024c4:	80bb      	strh	r3, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80024ca:	4b64      	ldr	r3, [pc, #400]	; (800265c <ILI9341_Draw_Pixel+0x1a4>)
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	88fa      	ldrh	r2, [r7, #6]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	f080 80be 	bcs.w	8002654 <ILI9341_Draw_Pixel+0x19c>
 80024d8:	4b61      	ldr	r3, [pc, #388]	; (8002660 <ILI9341_Draw_Pixel+0x1a8>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	88ba      	ldrh	r2, [r7, #4]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	f080 80b7 	bcs.w	8002654 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80024e6:	2200      	movs	r2, #0
 80024e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024ec:	485d      	ldr	r0, [pc, #372]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 80024ee:	f001 f8ed 	bl	80036cc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024f8:	485a      	ldr	r0, [pc, #360]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 80024fa:	f001 f8e7 	bl	80036cc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80024fe:	202a      	movs	r0, #42	; 0x2a
 8002500:	f7ff fd10 	bl	8001f24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002504:	2201      	movs	r2, #1
 8002506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800250a:	4856      	ldr	r0, [pc, #344]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 800250c:	f001 f8de 	bl	80036cc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002510:	2201      	movs	r2, #1
 8002512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002516:	4853      	ldr	r0, [pc, #332]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 8002518:	f001 f8d8 	bl	80036cc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800251c:	2200      	movs	r2, #0
 800251e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002522:	4850      	ldr	r0, [pc, #320]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 8002524:	f001 f8d2 	bl	80036cc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002528:	88fb      	ldrh	r3, [r7, #6]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	b29b      	uxth	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	753b      	strb	r3, [r7, #20]
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	b2db      	uxtb	r3, r3
 8002536:	757b      	strb	r3, [r7, #21]
 8002538:	88fb      	ldrh	r3, [r7, #6]
 800253a:	3301      	adds	r3, #1
 800253c:	121b      	asrs	r3, r3, #8
 800253e:	b2db      	uxtb	r3, r3
 8002540:	75bb      	strb	r3, [r7, #22]
 8002542:	88fb      	ldrh	r3, [r7, #6]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	3301      	adds	r3, #1
 8002548:	b2db      	uxtb	r3, r3
 800254a:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800254c:	f107 0114 	add.w	r1, r7, #20
 8002550:	2301      	movs	r3, #1
 8002552:	2204      	movs	r2, #4
 8002554:	4844      	ldr	r0, [pc, #272]	; (8002668 <ILI9341_Draw_Pixel+0x1b0>)
 8002556:	f002 fc00 	bl	8004d5a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800255a:	2201      	movs	r2, #1
 800255c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002560:	4840      	ldr	r0, [pc, #256]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 8002562:	f001 f8b3 	bl	80036cc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002566:	2200      	movs	r2, #0
 8002568:	f44f 7100 	mov.w	r1, #512	; 0x200
 800256c:	483d      	ldr	r0, [pc, #244]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 800256e:	f001 f8ad 	bl	80036cc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002572:	2200      	movs	r2, #0
 8002574:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002578:	483a      	ldr	r0, [pc, #232]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 800257a:	f001 f8a7 	bl	80036cc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 800257e:	202b      	movs	r0, #43	; 0x2b
 8002580:	f7ff fcd0 	bl	8001f24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002584:	2201      	movs	r2, #1
 8002586:	f44f 7100 	mov.w	r1, #512	; 0x200
 800258a:	4836      	ldr	r0, [pc, #216]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 800258c:	f001 f89e 	bl	80036cc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002590:	2201      	movs	r2, #1
 8002592:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002596:	4833      	ldr	r0, [pc, #204]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 8002598:	f001 f898 	bl	80036cc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800259c:	2200      	movs	r2, #0
 800259e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025a2:	4830      	ldr	r0, [pc, #192]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 80025a4:	f001 f892 	bl	80036cc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80025a8:	88bb      	ldrh	r3, [r7, #4]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	743b      	strb	r3, [r7, #16]
 80025b2:	88bb      	ldrh	r3, [r7, #4]
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	747b      	strb	r3, [r7, #17]
 80025b8:	88bb      	ldrh	r3, [r7, #4]
 80025ba:	3301      	adds	r3, #1
 80025bc:	121b      	asrs	r3, r3, #8
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	74bb      	strb	r3, [r7, #18]
 80025c2:	88bb      	ldrh	r3, [r7, #4]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	3301      	adds	r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80025cc:	f107 0110 	add.w	r1, r7, #16
 80025d0:	2301      	movs	r3, #1
 80025d2:	2204      	movs	r2, #4
 80025d4:	4824      	ldr	r0, [pc, #144]	; (8002668 <ILI9341_Draw_Pixel+0x1b0>)
 80025d6:	f002 fbc0 	bl	8004d5a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025da:	2201      	movs	r2, #1
 80025dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025e0:	4820      	ldr	r0, [pc, #128]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 80025e2:	f001 f873 	bl	80036cc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80025e6:	2200      	movs	r2, #0
 80025e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ec:	481d      	ldr	r0, [pc, #116]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 80025ee:	f001 f86d 	bl	80036cc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80025f2:	2200      	movs	r2, #0
 80025f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025f8:	481a      	ldr	r0, [pc, #104]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 80025fa:	f001 f867 	bl	80036cc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 80025fe:	202c      	movs	r0, #44	; 0x2c
 8002600:	f7ff fc90 	bl	8001f24 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002604:	2201      	movs	r2, #1
 8002606:	f44f 7100 	mov.w	r1, #512	; 0x200
 800260a:	4816      	ldr	r0, [pc, #88]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 800260c:	f001 f85e 	bl	80036cc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002610:	2201      	movs	r2, #1
 8002612:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002616:	4813      	ldr	r0, [pc, #76]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 8002618:	f001 f858 	bl	80036cc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800261c:	2200      	movs	r2, #0
 800261e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002622:	4810      	ldr	r0, [pc, #64]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 8002624:	f001 f852 	bl	80036cc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b29b      	uxth	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	733b      	strb	r3, [r7, #12]
 8002632:	887b      	ldrh	r3, [r7, #2]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002638:	f107 010c 	add.w	r1, r7, #12
 800263c:	2301      	movs	r3, #1
 800263e:	2202      	movs	r2, #2
 8002640:	4809      	ldr	r0, [pc, #36]	; (8002668 <ILI9341_Draw_Pixel+0x1b0>)
 8002642:	f002 fb8a 	bl	8004d5a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002646:	2201      	movs	r2, #1
 8002648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800264c:	4805      	ldr	r0, [pc, #20]	; (8002664 <ILI9341_Draw_Pixel+0x1ac>)
 800264e:	f001 f83d 	bl	80036cc <HAL_GPIO_WritePin>
 8002652:	e000      	b.n	8002656 <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002654:	bf00      	nop
	
}
 8002656:	3718      	adds	r7, #24
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000012 	.word	0x20000012
 8002660:	20000010 	.word	0x20000010
 8002664:	40020800 	.word	0x40020800
 8002668:	200002e0 	.word	0x200002e0

0800266c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	461a      	mov	r2, r3
 800267a:	4623      	mov	r3, r4
 800267c:	80fb      	strh	r3, [r7, #6]
 800267e:	4603      	mov	r3, r0
 8002680:	80bb      	strh	r3, [r7, #4]
 8002682:	460b      	mov	r3, r1
 8002684:	807b      	strh	r3, [r7, #2]
 8002686:	4613      	mov	r3, r2
 8002688:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800268a:	4b24      	ldr	r3, [pc, #144]	; (800271c <ILI9341_Draw_Rectangle+0xb0>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	88fa      	ldrh	r2, [r7, #6]
 8002692:	429a      	cmp	r2, r3
 8002694:	d23d      	bcs.n	8002712 <ILI9341_Draw_Rectangle+0xa6>
 8002696:	4b22      	ldr	r3, [pc, #136]	; (8002720 <ILI9341_Draw_Rectangle+0xb4>)
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	88ba      	ldrh	r2, [r7, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d237      	bcs.n	8002712 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80026a2:	88fa      	ldrh	r2, [r7, #6]
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	4413      	add	r3, r2
 80026a8:	4a1c      	ldr	r2, [pc, #112]	; (800271c <ILI9341_Draw_Rectangle+0xb0>)
 80026aa:	8812      	ldrh	r2, [r2, #0]
 80026ac:	b292      	uxth	r2, r2
 80026ae:	4293      	cmp	r3, r2
 80026b0:	dd05      	ble.n	80026be <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80026b2:	4b1a      	ldr	r3, [pc, #104]	; (800271c <ILI9341_Draw_Rectangle+0xb0>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	88fb      	ldrh	r3, [r7, #6]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80026be:	88ba      	ldrh	r2, [r7, #4]
 80026c0:	883b      	ldrh	r3, [r7, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <ILI9341_Draw_Rectangle+0xb4>)
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	b292      	uxth	r2, r2
 80026ca:	4293      	cmp	r3, r2
 80026cc:	dd05      	ble.n	80026da <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80026ce:	4b14      	ldr	r3, [pc, #80]	; (8002720 <ILI9341_Draw_Rectangle+0xb4>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	88bb      	ldrh	r3, [r7, #4]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80026da:	88fa      	ldrh	r2, [r7, #6]
 80026dc:	887b      	ldrh	r3, [r7, #2]
 80026de:	4413      	add	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	3b01      	subs	r3, #1
 80026e4:	b29c      	uxth	r4, r3
 80026e6:	88ba      	ldrh	r2, [r7, #4]
 80026e8:	883b      	ldrh	r3, [r7, #0]
 80026ea:	4413      	add	r3, r2
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	88b9      	ldrh	r1, [r7, #4]
 80026f4:	88f8      	ldrh	r0, [r7, #6]
 80026f6:	4622      	mov	r2, r4
 80026f8:	f7ff fc6a 	bl	8001fd0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80026fc:	883b      	ldrh	r3, [r7, #0]
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	fb02 f303 	mul.w	r3, r2, r3
 8002704:	461a      	mov	r2, r3
 8002706:	8b3b      	ldrh	r3, [r7, #24]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fe36 	bl	800237c <ILI9341_Draw_Colour_Burst>
 8002710:	e000      	b.n	8002714 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002712:	bf00      	nop
}
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bd90      	pop	{r4, r7, pc}
 800271a:	bf00      	nop
 800271c:	20000012 	.word	0x20000012
 8002720:	20000010 	.word	0x20000010

08002724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_Init+0x28>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <HAL_Init+0x28>)
 800272e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002734:	2003      	movs	r0, #3
 8002736:	f000 fd49 	bl	80031cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800273a:	2000      	movs	r0, #0
 800273c:	f000 f808 	bl	8002750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002740:	f7fe fd3c 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40023c00 	.word	0x40023c00

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x54>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_InitTick+0x58>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002766:	fbb3 f3f1 	udiv	r3, r3, r1
 800276a:	fbb2 f3f3 	udiv	r3, r2, r3
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fd61 	bl	8003236 <HAL_SYSTICK_Config>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e00e      	b.n	800279c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d80a      	bhi.n	800279a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002784:	2200      	movs	r2, #0
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	f04f 30ff 	mov.w	r0, #4294967295
 800278c:	f000 fd29 	bl	80031e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002790:	4a06      	ldr	r2, [pc, #24]	; (80027ac <HAL_InitTick+0x5c>)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
}
 800279c:	4618      	mov	r0, r3
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	2000000c 	.word	0x2000000c
 80027a8:	20000018 	.word	0x20000018
 80027ac:	20000014 	.word	0x20000014

080027b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_IncTick+0x20>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_IncTick+0x24>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4413      	add	r3, r2
 80027c0:	4a04      	ldr	r2, [pc, #16]	; (80027d4 <HAL_IncTick+0x24>)
 80027c2:	6013      	str	r3, [r2, #0]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20000018 	.word	0x20000018
 80027d4:	200004f0 	.word	0x200004f0

080027d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return uwTick;
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_GetTick+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	200004f0 	.word	0x200004f0

080027f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f8:	f7ff ffee 	bl	80027d8 <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d005      	beq.n	8002816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <HAL_Delay+0x44>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4413      	add	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002816:	bf00      	nop
 8002818:	f7ff ffde 	bl	80027d8 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	429a      	cmp	r2, r3
 8002826:	d8f7      	bhi.n	8002818 <HAL_Delay+0x28>
  {
  }
}
 8002828:	bf00      	nop
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20000018 	.word	0x20000018

08002838 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d101      	bne.n	800284e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e031      	b.n	80028b2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7fd ff1a 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d116      	bne.n	80028a4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_ADC_Init+0x84>)
 800287c:	4013      	ands	r3, r2
 800287e:	f043 0202 	orr.w	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 fad6 	bl	8002e38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
 80028a2:	e001      	b.n	80028a8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	ffffeefd 	.word	0xffffeefd

080028c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_ADC_Start+0x1a>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e0ad      	b.n	8002a36 <HAL_ADC_Start+0x176>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d018      	beq.n	8002922 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002900:	4b50      	ldr	r3, [pc, #320]	; (8002a44 <HAL_ADC_Start+0x184>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a50      	ldr	r2, [pc, #320]	; (8002a48 <HAL_ADC_Start+0x188>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0c9a      	lsrs	r2, r3, #18
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8002914:	e002      	b.n	800291c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f9      	bne.n	8002916 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d175      	bne.n	8002a1c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002934:	4b45      	ldr	r3, [pc, #276]	; (8002a4c <HAL_ADC_Start+0x18c>)
 8002936:	4013      	ands	r3, r2
 8002938:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002956:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296a:	d106      	bne.n	800297a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002970:	f023 0206 	bic.w	r2, r3, #6
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	645a      	str	r2, [r3, #68]	; 0x44
 8002978:	e002      	b.n	8002980 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002990:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002992:	4b2f      	ldr	r3, [pc, #188]	; (8002a50 <HAL_ADC_Start+0x190>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10f      	bne.n	80029be <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d143      	bne.n	8002a34 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	e03a      	b.n	8002a34 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a24      	ldr	r2, [pc, #144]	; (8002a54 <HAL_ADC_Start+0x194>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10e      	bne.n	80029e6 <HAL_ADC_Start+0x126>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d107      	bne.n	80029e6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029e4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_ADC_Start+0x190>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d120      	bne.n	8002a34 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_ADC_Start+0x198>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d11b      	bne.n	8002a34 <HAL_ADC_Start+0x174>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d114      	bne.n	8002a34 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	e00b      	b.n	8002a34 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	f043 0210 	orr.w	r2, r3, #16
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	f043 0201 	orr.w	r2, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2000000c 	.word	0x2000000c
 8002a48:	431bde83 	.word	0x431bde83
 8002a4c:	fffff8fe 	.word	0xfffff8fe
 8002a50:	40012300 	.word	0x40012300
 8002a54:	40012000 	.word	0x40012000
 8002a58:	40012200 	.word	0x40012200

08002a5c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a78:	d113      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a88:	d10b      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	f043 0220 	orr.w	r2, r3, #32
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e063      	b.n	8002b6a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002aa2:	f7ff fe99 	bl	80027d8 <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aa8:	e021      	b.n	8002aee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab0:	d01d      	beq.n	8002aee <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d007      	beq.n	8002ac8 <HAL_ADC_PollForConversion+0x6c>
 8002ab8:	f7ff fe8e 	bl	80027d8 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d212      	bcs.n	8002aee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d00b      	beq.n	8002aee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f043 0204 	orr.w	r2, r3, #4
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e03d      	b.n	8002b6a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d1d6      	bne.n	8002aaa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0212 	mvn.w	r2, #18
 8002b04:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d123      	bne.n	8002b68 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d11f      	bne.n	8002b68 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d111      	bne.n	8002b68 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d105      	bne.n	8002b68 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1c>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e136      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x28a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d93a      	bls.n	8002c2e <HAL_ADC_ConfigChannel+0xa2>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bc0:	d035      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68d9      	ldr	r1, [r3, #12]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3b1e      	subs	r3, #30
 8002bd8:	2207      	movs	r2, #7
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	400a      	ands	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a8d      	ldr	r2, [pc, #564]	; (8002e24 <HAL_ADC_ConfigChannel+0x298>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d10a      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68d9      	ldr	r1, [r3, #12]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	061a      	lsls	r2, r3, #24
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c06:	e035      	b.n	8002c74 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68d9      	ldr	r1, [r3, #12]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	4618      	mov	r0, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	4403      	add	r3, r0
 8002c20:	3b1e      	subs	r3, #30
 8002c22:	409a      	lsls	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c2c:	e022      	b.n	8002c74 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6919      	ldr	r1, [r3, #16]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	2207      	movs	r2, #7
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	400a      	ands	r2, r1
 8002c50:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6919      	ldr	r1, [r3, #16]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	4618      	mov	r0, r3
 8002c64:	4603      	mov	r3, r0
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4403      	add	r3, r0
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d824      	bhi.n	8002cc6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3b05      	subs	r3, #5
 8002c8e:	221f      	movs	r2, #31
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43da      	mvns	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	400a      	ands	r2, r1
 8002c9c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b05      	subs	r3, #5
 8002cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc4:	e04c      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d824      	bhi.n	8002d18 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	4413      	add	r3, r2
 8002cde:	3b23      	subs	r3, #35	; 0x23
 8002ce0:	221f      	movs	r2, #31
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	400a      	ands	r2, r1
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	3b23      	subs	r3, #35	; 0x23
 8002d0a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	631a      	str	r2, [r3, #48]	; 0x30
 8002d16:	e023      	b.n	8002d60 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	3b41      	subs	r3, #65	; 0x41
 8002d2a:	221f      	movs	r2, #31
 8002d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d30:	43da      	mvns	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	400a      	ands	r2, r1
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4618      	mov	r0, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	3b41      	subs	r3, #65	; 0x41
 8002d54:	fa00 f203 	lsl.w	r2, r0, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a30      	ldr	r2, [pc, #192]	; (8002e28 <HAL_ADC_ConfigChannel+0x29c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10a      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x1f4>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d72:	d105      	bne.n	8002d80 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002d74:	4b2d      	ldr	r3, [pc, #180]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	4a2c      	ldr	r2, [pc, #176]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002d7a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002d7e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a28      	ldr	r2, [pc, #160]	; (8002e28 <HAL_ADC_ConfigChannel+0x29c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d10f      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x21e>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b12      	cmp	r3, #18
 8002d90:	d10b      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002d92:	4b26      	ldr	r3, [pc, #152]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4a25      	ldr	r2, [pc, #148]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002d98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d9c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002da4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002da8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a1e      	ldr	r2, [pc, #120]	; (8002e28 <HAL_ADC_ConfigChannel+0x29c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d12b      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x280>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1a      	ldr	r2, [pc, #104]	; (8002e24 <HAL_ADC_ConfigChannel+0x298>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <HAL_ADC_ConfigChannel+0x23a>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b11      	cmp	r3, #17
 8002dc4:	d122      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4a18      	ldr	r2, [pc, #96]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002dcc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002dd0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	4a15      	ldr	r2, [pc, #84]	; (8002e2c <HAL_ADC_ConfigChannel+0x2a0>)
 8002dd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ddc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a10      	ldr	r2, [pc, #64]	; (8002e24 <HAL_ADC_ConfigChannel+0x298>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d111      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <HAL_ADC_ConfigChannel+0x2a4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a11      	ldr	r2, [pc, #68]	; (8002e34 <HAL_ADC_ConfigChannel+0x2a8>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0c9a      	lsrs	r2, r3, #18
 8002df4:	4613      	mov	r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	4413      	add	r3, r2
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002dfe:	e002      	b.n	8002e06 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f9      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	10000012 	.word	0x10000012
 8002e28:	40012000 	.word	0x40012000
 8002e2c:	40012300 	.word	0x40012300
 8002e30:	2000000c 	.word	0x2000000c
 8002e34:	431bde83 	.word	0x431bde83

08002e38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e40:	4b78      	ldr	r3, [pc, #480]	; (8003024 <ADC_Init+0x1ec>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	4a77      	ldr	r2, [pc, #476]	; (8003024 <ADC_Init+0x1ec>)
 8002e46:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002e4a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002e4c:	4b75      	ldr	r3, [pc, #468]	; (8003024 <ADC_Init+0x1ec>)
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4973      	ldr	r1, [pc, #460]	; (8003024 <ADC_Init+0x1ec>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6859      	ldr	r1, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	021a      	lsls	r2, r3, #8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6899      	ldr	r1, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	4a58      	ldr	r2, [pc, #352]	; (8003028 <ADC_Init+0x1f0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d022      	beq.n	8002f12 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002eda:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6899      	ldr	r1, [r3, #8]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6899      	ldr	r1, [r3, #8]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	e00f      	b.n	8002f32 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f30:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0202 	bic.w	r2, r2, #2
 8002f40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6899      	ldr	r1, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	005a      	lsls	r2, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01b      	beq.n	8002f98 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	035a      	lsls	r2, r3, #13
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	e007      	b.n	8002fa8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fa6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	051a      	lsls	r2, r3, #20
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6899      	ldr	r1, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002fea:	025a      	lsls	r2, r3, #9
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6899      	ldr	r1, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	029a      	lsls	r2, r3, #10
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40012300 	.word	0x40012300
 8003028:	0f000001 	.word	0x0f000001

0800302c <__NVIC_SetPriorityGrouping>:
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <__NVIC_SetPriorityGrouping+0x40>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003056:	4313      	orrs	r3, r2
 8003058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305a:	4a04      	ldr	r2, [pc, #16]	; (800306c <__NVIC_SetPriorityGrouping+0x40>)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	60d3      	str	r3, [r2, #12]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00
 8003070:	05fa0000 	.word	0x05fa0000

08003074 <__NVIC_GetPriorityGrouping>:
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3b01      	subs	r3, #1
 8003194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003198:	d301      	bcc.n	800319e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800319a:	2301      	movs	r3, #1
 800319c:	e00f      	b.n	80031be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800319e:	4a0a      	ldr	r2, [pc, #40]	; (80031c8 <SysTick_Config+0x40>)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031a6:	210f      	movs	r1, #15
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295
 80031ac:	f7ff ff8e 	bl	80030cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <SysTick_Config+0x40>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <SysTick_Config+0x40>)
 80031b8:	2207      	movs	r2, #7
 80031ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3708      	adds	r7, #8
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	e000e010 	.word	0xe000e010

080031cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff29 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
 80031ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031f4:	f7ff ff3e 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6978      	ldr	r0, [r7, #20]
 8003200:	f7ff ff8e 	bl	8003120 <NVIC_EncodePriority>
 8003204:	4602      	mov	r2, r0
 8003206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800320a:	4611      	mov	r1, r2
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff5d 	bl	80030cc <__NVIC_SetPriority>
}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	4603      	mov	r3, r0
 8003222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff31 	bl	8003090 <__NVIC_EnableIRQ>
}
 800322e:	bf00      	nop
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ffa2 	bl	8003188 <SysTick_Config>
 8003244:	4603      	mov	r3, r0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b084      	sub	sp, #16
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800325c:	f7ff fabc 	bl	80027d8 <HAL_GetTick>
 8003260:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d008      	beq.n	8003280 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2280      	movs	r2, #128	; 0x80
 8003272:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e052      	b.n	8003326 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0216 	bic.w	r2, r2, #22
 800328e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800329e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d103      	bne.n	80032b0 <HAL_DMA_Abort+0x62>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0208 	bic.w	r2, r2, #8
 80032be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d0:	e013      	b.n	80032fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032d2:	f7ff fa81 	bl	80027d8 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d90c      	bls.n	80032fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2220      	movs	r2, #32
 80032e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2203      	movs	r2, #3
 80032ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e015      	b.n	8003326 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e4      	bne.n	80032d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800330c:	223f      	movs	r2, #63	; 0x3f
 800330e:	409a      	lsls	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d004      	beq.n	800334c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2280      	movs	r2, #128	; 0x80
 8003346:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e00c      	b.n	8003366 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2205      	movs	r2, #5
 8003350:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003374:	b480      	push	{r7}
 8003376:	b089      	sub	sp, #36	; 0x24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800338a:	2300      	movs	r3, #0
 800338c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800338e:	2300      	movs	r3, #0
 8003390:	61fb      	str	r3, [r7, #28]
 8003392:	e175      	b.n	8003680 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003394:	2201      	movs	r2, #1
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4013      	ands	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	f040 8164 	bne.w	800367a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d005      	beq.n	80033ca <HAL_GPIO_Init+0x56>
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d130      	bne.n	800342c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003400:	2201      	movs	r2, #1
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	f003 0201 	and.w	r2, r3, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b03      	cmp	r3, #3
 8003436:	d017      	beq.n	8003468 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	2203      	movs	r2, #3
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	43db      	mvns	r3, r3
 800344a:	69ba      	ldr	r2, [r7, #24]
 800344c:	4013      	ands	r3, r2
 800344e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d123      	bne.n	80034bc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	08da      	lsrs	r2, r3, #3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3208      	adds	r2, #8
 800347c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	220f      	movs	r2, #15
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	691a      	ldr	r2, [r3, #16]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	08da      	lsrs	r2, r3, #3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	3208      	adds	r2, #8
 80034b6:	69b9      	ldr	r1, [r7, #24]
 80034b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 0203 	and.w	r2, r3, #3
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80be 	beq.w	800367a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034fe:	4b66      	ldr	r3, [pc, #408]	; (8003698 <HAL_GPIO_Init+0x324>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	4a65      	ldr	r2, [pc, #404]	; (8003698 <HAL_GPIO_Init+0x324>)
 8003504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003508:	6453      	str	r3, [r2, #68]	; 0x44
 800350a:	4b63      	ldr	r3, [pc, #396]	; (8003698 <HAL_GPIO_Init+0x324>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003516:	4a61      	ldr	r2, [pc, #388]	; (800369c <HAL_GPIO_Init+0x328>)
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	089b      	lsrs	r3, r3, #2
 800351c:	3302      	adds	r3, #2
 800351e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0303 	and.w	r3, r3, #3
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	220f      	movs	r2, #15
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a58      	ldr	r2, [pc, #352]	; (80036a0 <HAL_GPIO_Init+0x32c>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d037      	beq.n	80035b2 <HAL_GPIO_Init+0x23e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a57      	ldr	r2, [pc, #348]	; (80036a4 <HAL_GPIO_Init+0x330>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d031      	beq.n	80035ae <HAL_GPIO_Init+0x23a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a56      	ldr	r2, [pc, #344]	; (80036a8 <HAL_GPIO_Init+0x334>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d02b      	beq.n	80035aa <HAL_GPIO_Init+0x236>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a55      	ldr	r2, [pc, #340]	; (80036ac <HAL_GPIO_Init+0x338>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d025      	beq.n	80035a6 <HAL_GPIO_Init+0x232>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a54      	ldr	r2, [pc, #336]	; (80036b0 <HAL_GPIO_Init+0x33c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01f      	beq.n	80035a2 <HAL_GPIO_Init+0x22e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a53      	ldr	r2, [pc, #332]	; (80036b4 <HAL_GPIO_Init+0x340>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d019      	beq.n	800359e <HAL_GPIO_Init+0x22a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a52      	ldr	r2, [pc, #328]	; (80036b8 <HAL_GPIO_Init+0x344>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_GPIO_Init+0x226>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a51      	ldr	r2, [pc, #324]	; (80036bc <HAL_GPIO_Init+0x348>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00d      	beq.n	8003596 <HAL_GPIO_Init+0x222>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a50      	ldr	r2, [pc, #320]	; (80036c0 <HAL_GPIO_Init+0x34c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d007      	beq.n	8003592 <HAL_GPIO_Init+0x21e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a4f      	ldr	r2, [pc, #316]	; (80036c4 <HAL_GPIO_Init+0x350>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d101      	bne.n	800358e <HAL_GPIO_Init+0x21a>
 800358a:	2309      	movs	r3, #9
 800358c:	e012      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 800358e:	230a      	movs	r3, #10
 8003590:	e010      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 8003592:	2308      	movs	r3, #8
 8003594:	e00e      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 8003596:	2307      	movs	r3, #7
 8003598:	e00c      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 800359a:	2306      	movs	r3, #6
 800359c:	e00a      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 800359e:	2305      	movs	r3, #5
 80035a0:	e008      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035a2:	2304      	movs	r3, #4
 80035a4:	e006      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035a6:	2303      	movs	r3, #3
 80035a8:	e004      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e002      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <HAL_GPIO_Init+0x240>
 80035b2:	2300      	movs	r3, #0
 80035b4:	69fa      	ldr	r2, [r7, #28]
 80035b6:	f002 0203 	and.w	r2, r2, #3
 80035ba:	0092      	lsls	r2, r2, #2
 80035bc:	4093      	lsls	r3, r2
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035c4:	4935      	ldr	r1, [pc, #212]	; (800369c <HAL_GPIO_Init+0x328>)
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	089b      	lsrs	r3, r3, #2
 80035ca:	3302      	adds	r3, #2
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d2:	4b3d      	ldr	r3, [pc, #244]	; (80036c8 <HAL_GPIO_Init+0x354>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035f6:	4a34      	ldr	r2, [pc, #208]	; (80036c8 <HAL_GPIO_Init+0x354>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035fc:	4b32      	ldr	r3, [pc, #200]	; (80036c8 <HAL_GPIO_Init+0x354>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003620:	4a29      	ldr	r2, [pc, #164]	; (80036c8 <HAL_GPIO_Init+0x354>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003626:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <HAL_GPIO_Init+0x354>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800364a:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <HAL_GPIO_Init+0x354>)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003650:	4b1d      	ldr	r3, [pc, #116]	; (80036c8 <HAL_GPIO_Init+0x354>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	43db      	mvns	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4013      	ands	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d003      	beq.n	8003674 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003674:	4a14      	ldr	r2, [pc, #80]	; (80036c8 <HAL_GPIO_Init+0x354>)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	3301      	adds	r3, #1
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b0f      	cmp	r3, #15
 8003684:	f67f ae86 	bls.w	8003394 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3724      	adds	r7, #36	; 0x24
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40013800 	.word	0x40013800
 80036a0:	40020000 	.word	0x40020000
 80036a4:	40020400 	.word	0x40020400
 80036a8:	40020800 	.word	0x40020800
 80036ac:	40020c00 	.word	0x40020c00
 80036b0:	40021000 	.word	0x40021000
 80036b4:	40021400 	.word	0x40021400
 80036b8:	40021800 	.word	0x40021800
 80036bc:	40021c00 	.word	0x40021c00
 80036c0:	40022000 	.word	0x40022000
 80036c4:	40022400 	.word	0x40022400
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036e8:	e003      	b.n	80036f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	041a      	lsls	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	619a      	str	r2, [r3, #24]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	4603      	mov	r3, r0
 8003708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	88fb      	ldrh	r3, [r7, #6]
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d006      	beq.n	8003724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003716:	4a05      	ldr	r2, [pc, #20]	; (800372c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800371c:	88fb      	ldrh	r3, [r7, #6]
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f806 	bl	8003730 <HAL_GPIO_EXTI_Callback>
  }
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	40013c00 	.word	0x40013c00

08003730 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
	...

08003748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e07f      	b.n	800385a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7fd f970 	bl	8000a54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2224      	movs	r2, #36	; 0x24
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003798:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d107      	bne.n	80037c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	e006      	b.n	80037d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d104      	bne.n	80037e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_I2C_Init+0x11c>)
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003800:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691a      	ldr	r2, [r3, #16]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	69d9      	ldr	r1, [r3, #28]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1a      	ldr	r2, [r3, #32]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f042 0201 	orr.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	02008000 	.word	0x02008000

08003868 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	d138      	bne.n	80038f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003888:	2302      	movs	r3, #2
 800388a:	e032      	b.n	80038f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2224      	movs	r2, #36	; 0x24
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0201 	bic.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	e000      	b.n	80038f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
  }
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038fe:	b480      	push	{r7}
 8003900:	b085      	sub	sp, #20
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
 8003906:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800390e:	b2db      	uxtb	r3, r3
 8003910:	2b20      	cmp	r3, #32
 8003912:	d139      	bne.n	8003988 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800391a:	2b01      	cmp	r3, #1
 800391c:	d101      	bne.n	8003922 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800391e:	2302      	movs	r3, #2
 8003920:	e033      	b.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2224      	movs	r2, #36	; 0x24
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0201 	bic.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003950:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800399c:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a04      	ldr	r2, [pc, #16]	; (80039b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a6:	6013      	str	r3, [r2, #0]
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40007000 	.word	0x40007000

080039b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039c0:	2300      	movs	r3, #0
 80039c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e29b      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8087 	beq.w	8003aea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039dc:	4b96      	ldr	r3, [pc, #600]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d00c      	beq.n	8003a02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039e8:	4b93      	ldr	r3, [pc, #588]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 030c 	and.w	r3, r3, #12
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d112      	bne.n	8003a1a <HAL_RCC_OscConfig+0x62>
 80039f4:	4b90      	ldr	r3, [pc, #576]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a00:	d10b      	bne.n	8003a1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a02:	4b8d      	ldr	r3, [pc, #564]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d06c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x130>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d168      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e275      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_OscConfig+0x7a>
 8003a24:	4b84      	ldr	r3, [pc, #528]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a83      	ldr	r2, [pc, #524]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e02e      	b.n	8003a90 <HAL_RCC_OscConfig+0xd8>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x9c>
 8003a3a:	4b7f      	ldr	r3, [pc, #508]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7e      	ldr	r2, [pc, #504]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	4b7c      	ldr	r3, [pc, #496]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a7b      	ldr	r2, [pc, #492]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e01d      	b.n	8003a90 <HAL_RCC_OscConfig+0xd8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0xc0>
 8003a5e:	4b76      	ldr	r3, [pc, #472]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a75      	ldr	r2, [pc, #468]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b73      	ldr	r3, [pc, #460]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a72      	ldr	r2, [pc, #456]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0xd8>
 8003a78:	4b6f      	ldr	r3, [pc, #444]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a6e      	ldr	r2, [pc, #440]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b6c      	ldr	r3, [pc, #432]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a6b      	ldr	r2, [pc, #428]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d013      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe fe9e 	bl	80027d8 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fe9a 	bl	80027d8 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e229      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b61      	ldr	r3, [pc, #388]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xe8>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac0:	f7fe fe8a 	bl	80027d8 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fe fe86 	bl	80027d8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e215      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	4b57      	ldr	r3, [pc, #348]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x110>
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d069      	beq.n	8003bca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003af6:	4b50      	ldr	r3, [pc, #320]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b02:	4b4d      	ldr	r3, [pc, #308]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x190>
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d116      	bne.n	8003b48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	4b47      	ldr	r3, [pc, #284]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_RCC_OscConfig+0x17a>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1e9      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b32:	4b41      	ldr	r3, [pc, #260]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	493d      	ldr	r1, [pc, #244]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	e040      	b.n	8003bca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d023      	beq.n	8003b98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b50:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a38      	ldr	r2, [pc, #224]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5c:	f7fe fe3c 	bl	80027d8 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b64:	f7fe fe38 	bl	80027d8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e1c7      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b76:	4b30      	ldr	r3, [pc, #192]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b82:	4b2d      	ldr	r3, [pc, #180]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	4929      	ldr	r1, [pc, #164]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	600b      	str	r3, [r1, #0]
 8003b96:	e018      	b.n	8003bca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b98:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a26      	ldr	r2, [pc, #152]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fe18 	bl	80027d8 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bac:	f7fe fe14 	bl	80027d8 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e1a3      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4b1e      	ldr	r3, [pc, #120]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1f0      	bne.n	8003bac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d038      	beq.n	8003c48 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d019      	beq.n	8003c12 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bde:	4b16      	ldr	r3, [pc, #88]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003be2:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bea:	f7fe fdf5 	bl	80027d8 <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bf2:	f7fe fdf1 	bl	80027d8 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e180      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x23a>
 8003c10:	e01a      	b.n	8003c48 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c12:	4b09      	ldr	r3, [pc, #36]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c16:	4a08      	ldr	r2, [pc, #32]	; (8003c38 <HAL_RCC_OscConfig+0x280>)
 8003c18:	f023 0301 	bic.w	r3, r3, #1
 8003c1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fddb 	bl	80027d8 <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c24:	e00a      	b.n	8003c3c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c26:	f7fe fdd7 	bl	80027d8 <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d903      	bls.n	8003c3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e166      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
 8003c38:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c3c:	4b92      	ldr	r3, [pc, #584]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1ee      	bne.n	8003c26 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 80a4 	beq.w	8003d9e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c56:	4b8c      	ldr	r3, [pc, #560]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10d      	bne.n	8003c7e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c62:	4b89      	ldr	r3, [pc, #548]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	4a88      	ldr	r2, [pc, #544]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6e:	4b86      	ldr	r3, [pc, #536]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c7e:	4b83      	ldr	r3, [pc, #524]	; (8003e8c <HAL_RCC_OscConfig+0x4d4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d118      	bne.n	8003cbc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c8a:	4b80      	ldr	r3, [pc, #512]	; (8003e8c <HAL_RCC_OscConfig+0x4d4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a7f      	ldr	r2, [pc, #508]	; (8003e8c <HAL_RCC_OscConfig+0x4d4>)
 8003c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c96:	f7fe fd9f 	bl	80027d8 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c9e:	f7fe fd9b 	bl	80027d8 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b64      	cmp	r3, #100	; 0x64
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e12a      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cb0:	4b76      	ldr	r3, [pc, #472]	; (8003e8c <HAL_RCC_OscConfig+0x4d4>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x31a>
 8003cc4:	4b70      	ldr	r3, [pc, #448]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc8:	4a6f      	ldr	r2, [pc, #444]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cca:	f043 0301 	orr.w	r3, r3, #1
 8003cce:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd0:	e02d      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x33c>
 8003cda:	4b6b      	ldr	r3, [pc, #428]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cde:	4a6a      	ldr	r2, [pc, #424]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003ce0:	f023 0301 	bic.w	r3, r3, #1
 8003ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ce6:	4b68      	ldr	r3, [pc, #416]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cea:	4a67      	ldr	r2, [pc, #412]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cec:	f023 0304 	bic.w	r3, r3, #4
 8003cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf2:	e01c      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2b05      	cmp	r3, #5
 8003cfa:	d10c      	bne.n	8003d16 <HAL_RCC_OscConfig+0x35e>
 8003cfc:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d00:	4a61      	ldr	r2, [pc, #388]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d02:	f043 0304 	orr.w	r3, r3, #4
 8003d06:	6713      	str	r3, [r2, #112]	; 0x70
 8003d08:	4b5f      	ldr	r3, [pc, #380]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	4a5e      	ldr	r2, [pc, #376]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d0e:	f043 0301 	orr.w	r3, r3, #1
 8003d12:	6713      	str	r3, [r2, #112]	; 0x70
 8003d14:	e00b      	b.n	8003d2e <HAL_RCC_OscConfig+0x376>
 8003d16:	4b5c      	ldr	r3, [pc, #368]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a5b      	ldr	r2, [pc, #364]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	4b59      	ldr	r3, [pc, #356]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d26:	4a58      	ldr	r2, [pc, #352]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d28:	f023 0304 	bic.w	r3, r3, #4
 8003d2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d015      	beq.n	8003d62 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d36:	f7fe fd4f 	bl	80027d8 <HAL_GetTick>
 8003d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d3c:	e00a      	b.n	8003d54 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d3e:	f7fe fd4b 	bl	80027d8 <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e0d8      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d54:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0ee      	beq.n	8003d3e <HAL_RCC_OscConfig+0x386>
 8003d60:	e014      	b.n	8003d8c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d62:	f7fe fd39 	bl	80027d8 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d68:	e00a      	b.n	8003d80 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6a:	f7fe fd35 	bl	80027d8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e0c2      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d80:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	f003 0302 	and.w	r3, r3, #2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ee      	bne.n	8003d6a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d105      	bne.n	8003d9e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d92:	4b3d      	ldr	r3, [pc, #244]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 80ae 	beq.w	8003f04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003da8:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d06d      	beq.n	8003e90 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d14b      	bne.n	8003e54 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbc:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a31      	ldr	r2, [pc, #196]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe fd06 	bl	80027d8 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dd0:	f7fe fd02 	bl	80027d8 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e091      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003de2:	4b29      	ldr	r3, [pc, #164]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f0      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69da      	ldr	r2, [r3, #28]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	431a      	orrs	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	019b      	lsls	r3, r3, #6
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e04:	085b      	lsrs	r3, r3, #1
 8003e06:	3b01      	subs	r3, #1
 8003e08:	041b      	lsls	r3, r3, #16
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e10:	061b      	lsls	r3, r3, #24
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	071b      	lsls	r3, r3, #28
 8003e1a:	491b      	ldr	r1, [pc, #108]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e20:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a18      	ldr	r2, [pc, #96]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fcd4 	bl	80027d8 <HAL_GetTick>
 8003e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e32:	e008      	b.n	8003e46 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fe fcd0 	bl	80027d8 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e05f      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x47c>
 8003e52:	e057      	b.n	8003f04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a0b      	ldr	r2, [pc, #44]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe fcba 	bl	80027d8 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe fcb6 	bl	80027d8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e045      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <HAL_RCC_OscConfig+0x4d0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x4b0>
 8003e86:	e03d      	b.n	8003f04 <HAL_RCC_OscConfig+0x54c>
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e90:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <HAL_RCC_OscConfig+0x558>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d030      	beq.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d129      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d122      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ec6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d119      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed6:	085b      	lsrs	r3, r3, #1
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d10f      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e000      	b.n	8003f06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800

08003f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0d0      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f2c:	4b6a      	ldr	r3, [pc, #424]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 030f 	and.w	r3, r3, #15
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d910      	bls.n	8003f5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f3a:	4b67      	ldr	r3, [pc, #412]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f023 020f 	bic.w	r2, r3, #15
 8003f42:	4965      	ldr	r1, [pc, #404]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	4b63      	ldr	r3, [pc, #396]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d001      	beq.n	8003f5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0b8      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d020      	beq.n	8003faa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d005      	beq.n	8003f80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f74:	4b59      	ldr	r3, [pc, #356]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4a58      	ldr	r2, [pc, #352]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0308 	and.w	r3, r3, #8
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f8c:	4b53      	ldr	r3, [pc, #332]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	4a52      	ldr	r2, [pc, #328]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f98:	4b50      	ldr	r3, [pc, #320]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	494d      	ldr	r1, [pc, #308]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d040      	beq.n	8004038 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d107      	bne.n	8003fce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbe:	4b47      	ldr	r3, [pc, #284]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d115      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e07f      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd6:	4b41      	ldr	r3, [pc, #260]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e073      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe6:	4b3d      	ldr	r3, [pc, #244]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e06b      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ff6:	4b39      	ldr	r3, [pc, #228]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f023 0203 	bic.w	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	4936      	ldr	r1, [pc, #216]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004008:	f7fe fbe6 	bl	80027d8 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800400e:	e00a      	b.n	8004026 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004010:	f7fe fbe2 	bl	80027d8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e053      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004026:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 020c 	and.w	r2, r3, #12
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	429a      	cmp	r2, r3
 8004036:	d1eb      	bne.n	8004010 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004038:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 030f 	and.w	r3, r3, #15
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d210      	bcs.n	8004068 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 020f 	bic.w	r2, r3, #15
 800404e:	4922      	ldr	r1, [pc, #136]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4313      	orrs	r3, r2
 8004054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b20      	ldr	r3, [pc, #128]	; (80040d8 <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e032      	b.n	80040ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0304 	and.w	r3, r3, #4
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004074:	4b19      	ldr	r3, [pc, #100]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	4916      	ldr	r1, [pc, #88]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0308 	and.w	r3, r3, #8
 800408e:	2b00      	cmp	r3, #0
 8004090:	d009      	beq.n	80040a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004092:	4b12      	ldr	r3, [pc, #72]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	490e      	ldr	r1, [pc, #56]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040a6:	f000 f821 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 80040aa:	4602      	mov	r2, r0
 80040ac:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <HAL_RCC_ClockConfig+0x1c8>)
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	091b      	lsrs	r3, r3, #4
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	490a      	ldr	r1, [pc, #40]	; (80040e0 <HAL_RCC_ClockConfig+0x1cc>)
 80040b8:	5ccb      	ldrb	r3, [r1, r3]
 80040ba:	fa22 f303 	lsr.w	r3, r2, r3
 80040be:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <HAL_RCC_ClockConfig+0x1d0>)
 80040c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040c2:	4b09      	ldr	r3, [pc, #36]	; (80040e8 <HAL_RCC_ClockConfig+0x1d4>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fb42 	bl	8002750 <HAL_InitTick>

  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40023c00 	.word	0x40023c00
 80040dc:	40023800 	.word	0x40023800
 80040e0:	0809fbd8 	.word	0x0809fbd8
 80040e4:	2000000c 	.word	0x2000000c
 80040e8:	20000014 	.word	0x20000014

080040ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f0:	b094      	sub	sp, #80	; 0x50
 80040f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	647b      	str	r3, [r7, #68]	; 0x44
 80040f8:	2300      	movs	r3, #0
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040fc:	2300      	movs	r3, #0
 80040fe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004104:	4b79      	ldr	r3, [pc, #484]	; (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 030c 	and.w	r3, r3, #12
 800410c:	2b08      	cmp	r3, #8
 800410e:	d00d      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0x40>
 8004110:	2b08      	cmp	r3, #8
 8004112:	f200 80e1 	bhi.w	80042d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <HAL_RCC_GetSysClockFreq+0x34>
 800411a:	2b04      	cmp	r3, #4
 800411c:	d003      	beq.n	8004126 <HAL_RCC_GetSysClockFreq+0x3a>
 800411e:	e0db      	b.n	80042d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004120:	4b73      	ldr	r3, [pc, #460]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004124:	e0db      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004126:	4b73      	ldr	r3, [pc, #460]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004128:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800412a:	e0d8      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800412c:	4b6f      	ldr	r3, [pc, #444]	; (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004134:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004136:	4b6d      	ldr	r3, [pc, #436]	; (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d063      	beq.n	800420a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004142:	4b6a      	ldr	r3, [pc, #424]	; (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	099b      	lsrs	r3, r3, #6
 8004148:	2200      	movs	r2, #0
 800414a:	63bb      	str	r3, [r7, #56]	; 0x38
 800414c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004154:	633b      	str	r3, [r7, #48]	; 0x30
 8004156:	2300      	movs	r3, #0
 8004158:	637b      	str	r3, [r7, #52]	; 0x34
 800415a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800415e:	4622      	mov	r2, r4
 8004160:	462b      	mov	r3, r5
 8004162:	f04f 0000 	mov.w	r0, #0
 8004166:	f04f 0100 	mov.w	r1, #0
 800416a:	0159      	lsls	r1, r3, #5
 800416c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004170:	0150      	lsls	r0, r2, #5
 8004172:	4602      	mov	r2, r0
 8004174:	460b      	mov	r3, r1
 8004176:	4621      	mov	r1, r4
 8004178:	1a51      	subs	r1, r2, r1
 800417a:	6139      	str	r1, [r7, #16]
 800417c:	4629      	mov	r1, r5
 800417e:	eb63 0301 	sbc.w	r3, r3, r1
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f04f 0300 	mov.w	r3, #0
 800418c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004190:	4659      	mov	r1, fp
 8004192:	018b      	lsls	r3, r1, #6
 8004194:	4651      	mov	r1, sl
 8004196:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800419a:	4651      	mov	r1, sl
 800419c:	018a      	lsls	r2, r1, #6
 800419e:	4651      	mov	r1, sl
 80041a0:	ebb2 0801 	subs.w	r8, r2, r1
 80041a4:	4659      	mov	r1, fp
 80041a6:	eb63 0901 	sbc.w	r9, r3, r1
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80041b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80041ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80041be:	4690      	mov	r8, r2
 80041c0:	4699      	mov	r9, r3
 80041c2:	4623      	mov	r3, r4
 80041c4:	eb18 0303 	adds.w	r3, r8, r3
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	462b      	mov	r3, r5
 80041cc:	eb49 0303 	adc.w	r3, r9, r3
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80041de:	4629      	mov	r1, r5
 80041e0:	024b      	lsls	r3, r1, #9
 80041e2:	4621      	mov	r1, r4
 80041e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80041e8:	4621      	mov	r1, r4
 80041ea:	024a      	lsls	r2, r1, #9
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f2:	2200      	movs	r2, #0
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80041f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041fc:	f7fc f878 	bl	80002f0 <__aeabi_uldivmod>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4613      	mov	r3, r2
 8004206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004208:	e058      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800420a:	4b38      	ldr	r3, [pc, #224]	; (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	099b      	lsrs	r3, r3, #6
 8004210:	2200      	movs	r2, #0
 8004212:	4618      	mov	r0, r3
 8004214:	4611      	mov	r1, r2
 8004216:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800421a:	623b      	str	r3, [r7, #32]
 800421c:	2300      	movs	r3, #0
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
 8004220:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004224:	4642      	mov	r2, r8
 8004226:	464b      	mov	r3, r9
 8004228:	f04f 0000 	mov.w	r0, #0
 800422c:	f04f 0100 	mov.w	r1, #0
 8004230:	0159      	lsls	r1, r3, #5
 8004232:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004236:	0150      	lsls	r0, r2, #5
 8004238:	4602      	mov	r2, r0
 800423a:	460b      	mov	r3, r1
 800423c:	4641      	mov	r1, r8
 800423e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004242:	4649      	mov	r1, r9
 8004244:	eb63 0b01 	sbc.w	fp, r3, r1
 8004248:	f04f 0200 	mov.w	r2, #0
 800424c:	f04f 0300 	mov.w	r3, #0
 8004250:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004254:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004258:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800425c:	ebb2 040a 	subs.w	r4, r2, sl
 8004260:	eb63 050b 	sbc.w	r5, r3, fp
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	00eb      	lsls	r3, r5, #3
 800426e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004272:	00e2      	lsls	r2, r4, #3
 8004274:	4614      	mov	r4, r2
 8004276:	461d      	mov	r5, r3
 8004278:	4643      	mov	r3, r8
 800427a:	18e3      	adds	r3, r4, r3
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	464b      	mov	r3, r9
 8004280:	eb45 0303 	adc.w	r3, r5, r3
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	f04f 0300 	mov.w	r3, #0
 800428e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004292:	4629      	mov	r1, r5
 8004294:	028b      	lsls	r3, r1, #10
 8004296:	4621      	mov	r1, r4
 8004298:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800429c:	4621      	mov	r1, r4
 800429e:	028a      	lsls	r2, r1, #10
 80042a0:	4610      	mov	r0, r2
 80042a2:	4619      	mov	r1, r3
 80042a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a6:	2200      	movs	r2, #0
 80042a8:	61bb      	str	r3, [r7, #24]
 80042aa:	61fa      	str	r2, [r7, #28]
 80042ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042b0:	f7fc f81e 	bl	80002f0 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4613      	mov	r3, r2
 80042ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042bc:	4b0b      	ldr	r3, [pc, #44]	; (80042ec <HAL_RCC_GetSysClockFreq+0x200>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	3301      	adds	r3, #1
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80042cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d6:	e002      	b.n	80042de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80042da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3750      	adds	r7, #80	; 0x50
 80042e4:	46bd      	mov	sp, r7
 80042e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042ea:	bf00      	nop
 80042ec:	40023800 	.word	0x40023800
 80042f0:	00f42400 	.word	0x00f42400
 80042f4:	007a1200 	.word	0x007a1200

080042f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <HAL_RCC_GetHCLKFreq+0x14>)
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	2000000c 	.word	0x2000000c

08004310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004314:	f7ff fff0 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004318:	4602      	mov	r2, r0
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <HAL_RCC_GetPCLK1Freq+0x20>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	0a9b      	lsrs	r3, r3, #10
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	4903      	ldr	r1, [pc, #12]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004326:	5ccb      	ldrb	r3, [r1, r3]
 8004328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800432c:	4618      	mov	r0, r3
 800432e:	bd80      	pop	{r7, pc}
 8004330:	40023800 	.word	0x40023800
 8004334:	0809fbe8 	.word	0x0809fbe8

08004338 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800433c:	f7ff ffdc 	bl	80042f8 <HAL_RCC_GetHCLKFreq>
 8004340:	4602      	mov	r2, r0
 8004342:	4b05      	ldr	r3, [pc, #20]	; (8004358 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	0b5b      	lsrs	r3, r3, #13
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	4903      	ldr	r1, [pc, #12]	; (800435c <HAL_RCC_GetPCLK2Freq+0x24>)
 800434e:	5ccb      	ldrb	r3, [r1, r3]
 8004350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004354:	4618      	mov	r0, r3
 8004356:	bd80      	pop	{r7, pc}
 8004358:	40023800 	.word	0x40023800
 800435c:	0809fbe8 	.word	0x0809fbe8

08004360 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d012      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004388:	4b69      	ldr	r3, [pc, #420]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a68      	ldr	r2, [pc, #416]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004392:	6093      	str	r3, [r2, #8]
 8004394:	4b66      	ldr	r3, [pc, #408]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439c:	4964      	ldr	r1, [pc, #400]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d017      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043ba:	4b5d      	ldr	r3, [pc, #372]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043c8:	4959      	ldr	r1, [pc, #356]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d8:	d101      	bne.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043da:	2301      	movs	r3, #1
 80043dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80043e6:	2301      	movs	r3, #1
 80043e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d017      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043f6:	4b4e      	ldr	r3, [pc, #312]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004404:	494a      	ldr	r1, [pc, #296]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004406:	4313      	orrs	r3, r2
 8004408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004414:	d101      	bne.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004416:	2301      	movs	r3, #1
 8004418:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004422:	2301      	movs	r3, #1
 8004424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d001      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004432:	2301      	movs	r3, #1
 8004434:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 808b 	beq.w	800455a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004444:	4b3a      	ldr	r3, [pc, #232]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004448:	4a39      	ldr	r2, [pc, #228]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444e:	6413      	str	r3, [r2, #64]	; 0x40
 8004450:	4b37      	ldr	r3, [pc, #220]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a34      	ldr	r2, [pc, #208]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004468:	f7fe f9b6 	bl	80027d8 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004470:	f7fe f9b2 	bl	80027d8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b64      	cmp	r3, #100	; 0x64
 800447c:	d901      	bls.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e38f      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004482:	4b2c      	ldr	r3, [pc, #176]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800448e:	4b28      	ldr	r3, [pc, #160]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d035      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d02e      	beq.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044ac:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044b6:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a1d      	ldr	r2, [pc, #116]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ce:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044d4:	4b16      	ldr	r3, [pc, #88]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d114      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fe f97a 	bl	80027d8 <HAL_GetTick>
 80044e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044e6:	e00a      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e8:	f7fe f976 	bl	80027d8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e351      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0ee      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004516:	d111      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004526:	400b      	ands	r3, r1
 8004528:	4901      	ldr	r1, [pc, #4]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
 800452e:	e00b      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004530:	40023800 	.word	0x40023800
 8004534:	40007000 	.word	0x40007000
 8004538:	0ffffcff 	.word	0x0ffffcff
 800453c:	4bac      	ldr	r3, [pc, #688]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	4aab      	ldr	r2, [pc, #684]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004542:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004546:	6093      	str	r3, [r2, #8]
 8004548:	4ba9      	ldr	r3, [pc, #676]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800454a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004554:	49a6      	ldr	r1, [pc, #664]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004556:	4313      	orrs	r3, r2
 8004558:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b00      	cmp	r3, #0
 8004564:	d010      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004566:	4ba2      	ldr	r3, [pc, #648]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456c:	4aa0      	ldr	r2, [pc, #640]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800456e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004572:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004576:	4b9e      	ldr	r3, [pc, #632]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004578:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	499b      	ldr	r1, [pc, #620]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004594:	4b96      	ldr	r3, [pc, #600]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a2:	4993      	ldr	r1, [pc, #588]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00a      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045b6:	4b8e      	ldr	r3, [pc, #568]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045c4:	498a      	ldr	r1, [pc, #552]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045d8:	4b85      	ldr	r3, [pc, #532]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	4982      	ldr	r1, [pc, #520]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00a      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80045fa:	4b7d      	ldr	r3, [pc, #500]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004600:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	4979      	ldr	r1, [pc, #484]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00a      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800461c:	4b74      	ldr	r3, [pc, #464]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800461e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462a:	4971      	ldr	r1, [pc, #452]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800463e:	4b6c      	ldr	r3, [pc, #432]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004644:	f023 020c 	bic.w	r2, r3, #12
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464c:	4968      	ldr	r1, [pc, #416]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800464e:	4313      	orrs	r3, r2
 8004650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00a      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004660:	4b63      	ldr	r3, [pc, #396]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004666:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800466e:	4960      	ldr	r1, [pc, #384]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004682:	4b5b      	ldr	r3, [pc, #364]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004690:	4957      	ldr	r1, [pc, #348]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00a      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046a4:	4b52      	ldr	r3, [pc, #328]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	494f      	ldr	r1, [pc, #316]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046c6:	4b4a      	ldr	r3, [pc, #296]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d4:	4946      	ldr	r1, [pc, #280]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80046e8:	4b41      	ldr	r3, [pc, #260]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f6:	493e      	ldr	r1, [pc, #248]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800470a:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004718:	4935      	ldr	r1, [pc, #212]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00a      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800472c:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800473a:	492d      	ldr	r1, [pc, #180]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800473c:	4313      	orrs	r3, r2
 800473e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d011      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800474e:	4b28      	ldr	r3, [pc, #160]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004754:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800475c:	4924      	ldr	r1, [pc, #144]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475e:	4313      	orrs	r3, r2
 8004760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800476c:	d101      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800479c:	4914      	ldr	r1, [pc, #80]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00b      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047b0:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c0:	490b      	ldr	r1, [pc, #44]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00f      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	4902      	ldr	r1, [pc, #8]	; (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ec:	e002      	b.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00b      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004800:	4b8a      	ldr	r3, [pc, #552]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004806:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	4986      	ldr	r1, [pc, #536]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004824:	4b81      	ldr	r3, [pc, #516]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800482a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004834:	497d      	ldr	r1, [pc, #500]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d006      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 80d6 	beq.w	80049fc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004850:	4b76      	ldr	r3, [pc, #472]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a75      	ldr	r2, [pc, #468]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004856:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800485a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485c:	f7fd ffbc 	bl	80027d8 <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004864:	f7fd ffb8 	bl	80027d8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e195      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004876:	4b6d      	ldr	r3, [pc, #436]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d021      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004892:	2b00      	cmp	r3, #0
 8004894:	d11d      	bne.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004896:	4b65      	ldr	r3, [pc, #404]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800489c:	0c1b      	lsrs	r3, r3, #16
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048a4:	4b61      	ldr	r3, [pc, #388]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048aa:	0e1b      	lsrs	r3, r3, #24
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	019a      	lsls	r2, r3, #6
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	431a      	orrs	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	061b      	lsls	r3, r3, #24
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	071b      	lsls	r3, r3, #28
 80048ca:	4958      	ldr	r1, [pc, #352]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d004      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d02e      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048fc:	d129      	bne.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048fe:	4b4b      	ldr	r3, [pc, #300]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800490c:	4b47      	ldr	r3, [pc, #284]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800490e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004912:	0f1b      	lsrs	r3, r3, #28
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	019a      	lsls	r2, r3, #6
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	041b      	lsls	r3, r3, #16
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	061b      	lsls	r3, r3, #24
 800492c:	431a      	orrs	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	071b      	lsls	r3, r3, #28
 8004932:	493e      	ldr	r1, [pc, #248]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800493a:	4b3c      	ldr	r3, [pc, #240]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800493c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004940:	f023 021f 	bic.w	r2, r3, #31
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004948:	3b01      	subs	r3, #1
 800494a:	4938      	ldr	r1, [pc, #224]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d01d      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800495e:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004964:	0e1b      	lsrs	r3, r3, #24
 8004966:	f003 030f 	and.w	r3, r3, #15
 800496a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800496c:	4b2f      	ldr	r3, [pc, #188]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004972:	0f1b      	lsrs	r3, r3, #28
 8004974:	f003 0307 	and.w	r3, r3, #7
 8004978:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	019a      	lsls	r2, r3, #6
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	041b      	lsls	r3, r3, #16
 8004986:	431a      	orrs	r2, r3
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	061b      	lsls	r3, r3, #24
 800498c:	431a      	orrs	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	071b      	lsls	r3, r3, #28
 8004992:	4926      	ldr	r1, [pc, #152]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d011      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	019a      	lsls	r2, r3, #6
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	041b      	lsls	r3, r3, #16
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	061b      	lsls	r3, r3, #24
 80049ba:	431a      	orrs	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	071b      	lsls	r3, r3, #28
 80049c2:	491a      	ldr	r1, [pc, #104]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049ca:	4b18      	ldr	r3, [pc, #96]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d6:	f7fd feff 	bl	80027d8 <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049dc:	e008      	b.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049de:	f7fd fefb 	bl	80027d8 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	2b64      	cmp	r3, #100	; 0x64
 80049ea:	d901      	bls.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e0d8      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049f0:	4b0e      	ldr	r3, [pc, #56]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0f0      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	f040 80ce 	bne.w	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a10:	f7fd fee2 	bl	80027d8 <HAL_GetTick>
 8004a14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a16:	e00b      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a18:	f7fd fede 	bl	80027d8 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b64      	cmp	r3, #100	; 0x64
 8004a24:	d904      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e0bb      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a2a:	bf00      	nop
 8004a2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a30:	4b5e      	ldr	r3, [pc, #376]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3c:	d0ec      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d02e      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d12a      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a66:	4b51      	ldr	r3, [pc, #324]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6c:	0c1b      	lsrs	r3, r3, #16
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a74:	4b4d      	ldr	r3, [pc, #308]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7a:	0f1b      	lsrs	r3, r3, #28
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	019a      	lsls	r2, r3, #6
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	041b      	lsls	r3, r3, #16
 8004a8c:	431a      	orrs	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	061b      	lsls	r3, r3, #24
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	071b      	lsls	r3, r3, #28
 8004a9a:	4944      	ldr	r1, [pc, #272]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004aa2:	4b42      	ldr	r3, [pc, #264]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aa8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	493d      	ldr	r1, [pc, #244]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d022      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad0:	d11d      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ad2:	4b36      	ldr	r3, [pc, #216]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad8:	0e1b      	lsrs	r3, r3, #24
 8004ada:	f003 030f 	and.w	r3, r3, #15
 8004ade:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ae0:	4b32      	ldr	r3, [pc, #200]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	0f1b      	lsrs	r3, r3, #28
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	019a      	lsls	r2, r3, #6
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	431a      	orrs	r2, r3
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	061b      	lsls	r3, r3, #24
 8004b00:	431a      	orrs	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	071b      	lsls	r3, r3, #28
 8004b06:	4929      	ldr	r1, [pc, #164]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d028      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b1a:	4b24      	ldr	r3, [pc, #144]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	0e1b      	lsrs	r3, r3, #24
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b28:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	0c1b      	lsrs	r3, r3, #16
 8004b30:	f003 0303 	and.w	r3, r3, #3
 8004b34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	019a      	lsls	r2, r3, #6
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	431a      	orrs	r2, r3
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	69db      	ldr	r3, [r3, #28]
 8004b4c:	071b      	lsls	r3, r3, #28
 8004b4e:	4917      	ldr	r1, [pc, #92]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b64:	4911      	ldr	r1, [pc, #68]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fd fe2e 	bl	80027d8 <HAL_GetTick>
 8004b7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b80:	f7fd fe2a 	bl	80027d8 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	; 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e007      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b92:	4b06      	ldr	r3, [pc, #24]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b9e:	d1ef      	bne.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023800 	.word	0x40023800

08004bb0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e01c      	b.n	8004bfc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	795b      	ldrb	r3, [r3, #5]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d105      	bne.n	8004bd8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fa3c 	bl	8001050 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f042 0204 	orr.w	r2, r2, #4
 8004bec:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e09d      	b.n	8004d52 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c26:	d009      	beq.n	8004c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	61da      	str	r2, [r3, #28]
 8004c2e:	e005      	b.n	8004c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc fa6c 	bl	8001134 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c7c:	d902      	bls.n	8004c84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	e002      	b.n	8004c8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c9c:	d002      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	f003 0204 	and.w	r2, r3, #4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d20:	ea42 0103 	orr.w	r1, r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_SPI_Transmit+0x22>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e158      	b.n	800502e <HAL_SPI_Transmit+0x2d4>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d84:	f7fd fd28 	bl	80027d8 <HAL_GetTick>
 8004d88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d002      	beq.n	8004da0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d9e:	e13d      	b.n	800501c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_SPI_Transmit+0x52>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004db0:	e134      	b.n	800501c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dfc:	d10f      	bne.n	8004e1e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e1c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b40      	cmp	r3, #64	; 0x40
 8004e2a:	d007      	beq.n	8004e3c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e3a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e44:	d94b      	bls.n	8004ede <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <HAL_SPI_Transmit+0xfa>
 8004e4e:	8afb      	ldrh	r3, [r7, #22]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d13e      	bne.n	8004ed2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	881a      	ldrh	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e78:	e02b      	b.n	8004ed2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d112      	bne.n	8004eae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	1c9a      	adds	r2, r3, #2
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004eac:	e011      	b.n	8004ed2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eae:	f7fd fc93 	bl	80027d8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d803      	bhi.n	8004ec6 <HAL_SPI_Transmit+0x16c>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec4:	d102      	bne.n	8004ecc <HAL_SPI_Transmit+0x172>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d102      	bne.n	8004ed2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004ecc:	2303      	movs	r3, #3
 8004ece:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004ed0:	e0a4      	b.n	800501c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1ce      	bne.n	8004e7a <HAL_SPI_Transmit+0x120>
 8004edc:	e07c      	b.n	8004fd8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Transmit+0x192>
 8004ee6:	8afb      	ldrh	r3, [r7, #22]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d170      	bne.n	8004fce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d912      	bls.n	8004f1c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	881a      	ldrh	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	1c9a      	adds	r2, r3, #2
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b02      	subs	r3, #2
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f1a:	e058      	b.n	8004fce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	330c      	adds	r3, #12
 8004f26:	7812      	ldrb	r2, [r2, #0]
 8004f28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004f42:	e044      	b.n	8004fce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d12b      	bne.n	8004faa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d912      	bls.n	8004f82 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	881a      	ldrh	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	1c9a      	adds	r2, r3, #2
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b02      	subs	r3, #2
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f80:	e025      	b.n	8004fce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	7812      	ldrb	r2, [r2, #0]
 8004f8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fa8:	e011      	b.n	8004fce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004faa:	f7fd fc15 	bl	80027d8 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d803      	bhi.n	8004fc2 <HAL_SPI_Transmit+0x268>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc0:	d102      	bne.n	8004fc8 <HAL_SPI_Transmit+0x26e>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004fcc:	e026      	b.n	800501c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1b5      	bne.n	8004f44 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	6839      	ldr	r1, [r7, #0]
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f000 f949 	bl	8005274 <SPI_EndRxTxTransaction>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2220      	movs	r2, #32
 8004fec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	613b      	str	r3, [r7, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	613b      	str	r3, [r7, #16]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	613b      	str	r3, [r7, #16]
 800500a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e000      	b.n	800501c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800501a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800502c:	7ffb      	ldrb	r3, [r7, #31]
}
 800502e:	4618      	mov	r0, r3
 8005030:	3720      	adds	r7, #32
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
	...

08005038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005048:	f7fd fbc6 	bl	80027d8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005050:	1a9b      	subs	r3, r3, r2
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	4413      	add	r3, r2
 8005056:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005058:	f7fd fbbe 	bl	80027d8 <HAL_GetTick>
 800505c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800505e:	4b39      	ldr	r3, [pc, #228]	; (8005144 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	015b      	lsls	r3, r3, #5
 8005064:	0d1b      	lsrs	r3, r3, #20
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800506e:	e054      	b.n	800511a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005076:	d050      	beq.n	800511a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005078:	f7fd fbae 	bl	80027d8 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	429a      	cmp	r2, r3
 8005086:	d902      	bls.n	800508e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d13d      	bne.n	800510a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800509c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a6:	d111      	bne.n	80050cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b0:	d004      	beq.n	80050bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050ba:	d107      	bne.n	80050cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d4:	d10f      	bne.n	80050f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e017      	b.n	800513a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	3b01      	subs	r3, #1
 8005118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	4013      	ands	r3, r2
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	429a      	cmp	r2, r3
 8005128:	bf0c      	ite	eq
 800512a:	2301      	moveq	r3, #1
 800512c:	2300      	movne	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	461a      	mov	r2, r3
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	429a      	cmp	r2, r3
 8005136:	d19b      	bne.n	8005070 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	2000000c 	.word	0x2000000c

08005148 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
 8005154:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800515a:	f7fd fb3d 	bl	80027d8 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	1a9b      	subs	r3, r3, r2
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	4413      	add	r3, r2
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800516a:	f7fd fb35 	bl	80027d8 <HAL_GetTick>
 800516e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	330c      	adds	r3, #12
 8005176:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005178:	4b3d      	ldr	r3, [pc, #244]	; (8005270 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	00da      	lsls	r2, r3, #3
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	0d1b      	lsrs	r3, r3, #20
 8005188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005190:	e060      	b.n	8005254 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005198:	d107      	bne.n	80051aa <SPI_WaitFifoStateUntilTimeout+0x62>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d104      	bne.n	80051aa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d050      	beq.n	8005254 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b2:	f7fd fb11 	bl	80027d8 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	6a3b      	ldr	r3, [r7, #32]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051be:	429a      	cmp	r2, r3
 80051c0:	d902      	bls.n	80051c8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d13d      	bne.n	8005244 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051d6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051e0:	d111      	bne.n	8005206 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ea:	d004      	beq.n	80051f6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f4:	d107      	bne.n	8005206 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005204:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520e:	d10f      	bne.n	8005230 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800522e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e010      	b.n	8005266 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800524a:	2300      	movs	r3, #0
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	3b01      	subs	r3, #1
 8005252:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689a      	ldr	r2, [r3, #8]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4013      	ands	r3, r2
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	d196      	bne.n	8005192 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3728      	adds	r7, #40	; 0x28
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	2000000c 	.word	0x2000000c

08005274 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b088      	sub	sp, #32
 8005278:	af02      	add	r7, sp, #8
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2200      	movs	r2, #0
 8005288:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff ff5b 	bl	8005148 <SPI_WaitFifoStateUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529c:	f043 0220 	orr.w	r2, r3, #32
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e046      	b.n	8005336 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052a8:	4b25      	ldr	r3, [pc, #148]	; (8005340 <SPI_EndRxTxTransaction+0xcc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a25      	ldr	r2, [pc, #148]	; (8005344 <SPI_EndRxTxTransaction+0xd0>)
 80052ae:	fba2 2303 	umull	r2, r3, r2, r3
 80052b2:	0d5b      	lsrs	r3, r3, #21
 80052b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052b8:	fb02 f303 	mul.w	r3, r2, r3
 80052bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c6:	d112      	bne.n	80052ee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff feb0 	bl	8005038 <SPI_WaitFlagStateUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d016      	beq.n	800530c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e023      	b.n	8005336 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005304:	2b80      	cmp	r3, #128	; 0x80
 8005306:	d0f2      	beq.n	80052ee <SPI_EndRxTxTransaction+0x7a>
 8005308:	e000      	b.n	800530c <SPI_EndRxTxTransaction+0x98>
        break;
 800530a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2200      	movs	r2, #0
 8005314:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff ff15 	bl	8005148 <SPI_WaitFifoStateUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e000      	b.n	8005336 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	2000000c 	.word	0x2000000c
 8005344:	165e9f81 	.word	0x165e9f81

08005348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e049      	b.n	80053ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fc f998 	bl	80016a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f000 faf8 	bl	800597c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3708      	adds	r7, #8
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	d001      	beq.n	8005410 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e054      	b.n	80054ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0201 	orr.w	r2, r2, #1
 8005426:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a26      	ldr	r2, [pc, #152]	; (80054c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d022      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d01d      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a22      	ldr	r2, [pc, #136]	; (80054cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1c      	ldr	r2, [pc, #112]	; (80054dc <HAL_TIM_Base_Start_IT+0xe4>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_TIM_Base_Start_IT+0x80>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d115      	bne.n	80054a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689a      	ldr	r2, [r3, #8]
 800547e:	4b19      	ldr	r3, [pc, #100]	; (80054e4 <HAL_TIM_Base_Start_IT+0xec>)
 8005480:	4013      	ands	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b06      	cmp	r3, #6
 8005488:	d015      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0xbe>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005490:	d011      	beq.n	80054b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0201 	orr.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a2:	e008      	b.n	80054b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e000      	b.n	80054b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	40010000 	.word	0x40010000
 80054cc:	40000400 	.word	0x40000400
 80054d0:	40000800 	.word	0x40000800
 80054d4:	40000c00 	.word	0x40000c00
 80054d8:	40010400 	.word	0x40010400
 80054dc:	40014000 	.word	0x40014000
 80054e0:	40001800 	.word	0x40001800
 80054e4:	00010007 	.word	0x00010007

080054e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6a1a      	ldr	r2, [r3, #32]
 8005506:	f241 1311 	movw	r3, #4369	; 0x1111
 800550a:	4013      	ands	r3, r2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10f      	bne.n	8005530 <HAL_TIM_Base_Stop_IT+0x48>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a1a      	ldr	r2, [r3, #32]
 8005516:	f240 4344 	movw	r3, #1092	; 0x444
 800551a:	4013      	ands	r3, r2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d107      	bne.n	8005530 <HAL_TIM_Base_Stop_IT+0x48>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	370c      	adds	r7, #12
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr

08005546 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b02      	cmp	r3, #2
 800555a:	d122      	bne.n	80055a2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d11b      	bne.n	80055a2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f06f 0202 	mvn.w	r2, #2
 8005572:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f9d9 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 800558e:	e005      	b.n	800559c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f9cb 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9dc 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	f003 0304 	and.w	r3, r3, #4
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d122      	bne.n	80055f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d11b      	bne.n	80055f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f06f 0204 	mvn.w	r2, #4
 80055c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f9af 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 80055e2:	e005      	b.n	80055f0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f9a1 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f9b2 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b08      	cmp	r3, #8
 8005602:	d122      	bne.n	800564a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b08      	cmp	r3, #8
 8005610:	d11b      	bne.n	800564a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f06f 0208 	mvn.w	r2, #8
 800561a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2204      	movs	r2, #4
 8005620:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	2b00      	cmp	r3, #0
 800562e:	d003      	beq.n	8005638 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f985 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 8005636:	e005      	b.n	8005644 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 f977 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f988 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b10      	cmp	r3, #16
 8005656:	d122      	bne.n	800569e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b10      	cmp	r3, #16
 8005664:	d11b      	bne.n	800569e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f06f 0210 	mvn.w	r2, #16
 800566e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2208      	movs	r2, #8
 8005674:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f95b 	bl	8005940 <HAL_TIM_IC_CaptureCallback>
 800568a:	e005      	b.n	8005698 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f94d 	bl	800592c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f95e 	bl	8005954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0301 	and.w	r3, r3, #1
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d10e      	bne.n	80056ca <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d107      	bne.n	80056ca <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f06f 0201 	mvn.w	r2, #1
 80056c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056c4:	6878      	ldr	r0, [r7, #4]
 80056c6:	f000 f927 	bl	8005918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d4:	2b80      	cmp	r3, #128	; 0x80
 80056d6:	d10e      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d107      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 fb15 	bl	8005d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005704:	d10e      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005710:	2b80      	cmp	r3, #128	; 0x80
 8005712:	d107      	bne.n	8005724 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800571c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fb08 	bl	8005d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800572e:	2b40      	cmp	r3, #64	; 0x40
 8005730:	d10e      	bne.n	8005750 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d107      	bne.n	8005750 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f90c 	bl	8005968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0320 	and.w	r3, r3, #32
 800575a:	2b20      	cmp	r3, #32
 800575c:	d10e      	bne.n	800577c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0320 	and.w	r3, r3, #32
 8005768:	2b20      	cmp	r3, #32
 800576a:	d107      	bne.n	800577c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0220 	mvn.w	r2, #32
 8005774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fac8 	bl	8005d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800577c:	bf00      	nop
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800578e:	2300      	movs	r3, #0
 8005790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_ConfigClockSource+0x1c>
 800579c:	2302      	movs	r3, #2
 800579e:	e0b4      	b.n	800590a <HAL_TIM_ConfigClockSource+0x186>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	4b56      	ldr	r3, [pc, #344]	; (8005914 <HAL_TIM_ConfigClockSource+0x190>)
 80057bc:	4013      	ands	r3, r2
 80057be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d8:	d03e      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0xd4>
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057de:	f200 8087 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	f000 8086 	beq.w	80058f6 <HAL_TIM_ConfigClockSource+0x172>
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d87f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b70      	cmp	r3, #112	; 0x70
 80057f2:	d01a      	beq.n	800582a <HAL_TIM_ConfigClockSource+0xa6>
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d87b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b60      	cmp	r3, #96	; 0x60
 80057fa:	d050      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x11a>
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d877      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b50      	cmp	r3, #80	; 0x50
 8005802:	d03c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0xfa>
 8005804:	2b50      	cmp	r3, #80	; 0x50
 8005806:	d873      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d058      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x13a>
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d86f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005810:	2b30      	cmp	r3, #48	; 0x30
 8005812:	d064      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x15a>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d86b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005818:	2b20      	cmp	r3, #32
 800581a:	d060      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x15a>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d867      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d05c      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x15a>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d05a      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x15a>
 8005828:	e062      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800583a:	f000 f9b9 	bl	8005bb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800584c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	609a      	str	r2, [r3, #8]
      break;
 8005856:	e04f      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005868:	f000 f9a2 	bl	8005bb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800587a:	609a      	str	r2, [r3, #8]
      break;
 800587c:	e03c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588a:	461a      	mov	r2, r3
 800588c:	f000 f916 	bl	8005abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2150      	movs	r1, #80	; 0x50
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f96f 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 800589c:	e02c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 f935 	bl	8005b1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2160      	movs	r1, #96	; 0x60
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 f95f 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 80058bc:	e01c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 f8f6 	bl	8005abc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2140      	movs	r1, #64	; 0x40
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 f94f 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 80058dc:	e00c      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f000 f946 	bl	8005b7a <TIM_ITRx_SetConfig>
      break;
 80058ee:	e003      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	73fb      	strb	r3, [r7, #15]
      break;
 80058f4:	e000      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005908:	7bfb      	ldrb	r3, [r7, #15]
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	fffeff88 	.word	0xfffeff88

08005918 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800592c:	b480      	push	{r7}
 800592e:	b083      	sub	sp, #12
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a40      	ldr	r2, [pc, #256]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d013      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599a:	d00f      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a3d      	ldr	r2, [pc, #244]	; (8005a94 <TIM_Base_SetConfig+0x118>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d00b      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a3c      	ldr	r2, [pc, #240]	; (8005a98 <TIM_Base_SetConfig+0x11c>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d007      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a3b      	ldr	r2, [pc, #236]	; (8005a9c <TIM_Base_SetConfig+0x120>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d003      	beq.n	80059bc <TIM_Base_SetConfig+0x40>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a3a      	ldr	r2, [pc, #232]	; (8005aa0 <TIM_Base_SetConfig+0x124>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d108      	bne.n	80059ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a2f      	ldr	r2, [pc, #188]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d02b      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059dc:	d027      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a2c      	ldr	r2, [pc, #176]	; (8005a94 <TIM_Base_SetConfig+0x118>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d023      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a2b      	ldr	r2, [pc, #172]	; (8005a98 <TIM_Base_SetConfig+0x11c>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d01f      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	4a2a      	ldr	r2, [pc, #168]	; (8005a9c <TIM_Base_SetConfig+0x120>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01b      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	4a29      	ldr	r2, [pc, #164]	; (8005aa0 <TIM_Base_SetConfig+0x124>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d017      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a28      	ldr	r2, [pc, #160]	; (8005aa4 <TIM_Base_SetConfig+0x128>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a27      	ldr	r2, [pc, #156]	; (8005aa8 <TIM_Base_SetConfig+0x12c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d00f      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a26      	ldr	r2, [pc, #152]	; (8005aac <TIM_Base_SetConfig+0x130>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00b      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a25      	ldr	r2, [pc, #148]	; (8005ab0 <TIM_Base_SetConfig+0x134>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d007      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a24      	ldr	r2, [pc, #144]	; (8005ab4 <TIM_Base_SetConfig+0x138>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d003      	beq.n	8005a2e <TIM_Base_SetConfig+0xb2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	4a23      	ldr	r2, [pc, #140]	; (8005ab8 <TIM_Base_SetConfig+0x13c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d108      	bne.n	8005a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	68fa      	ldr	r2, [r7, #12]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <TIM_Base_SetConfig+0x114>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d003      	beq.n	8005a74 <TIM_Base_SetConfig+0xf8>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a0c      	ldr	r2, [pc, #48]	; (8005aa0 <TIM_Base_SetConfig+0x124>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d103      	bne.n	8005a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	615a      	str	r2, [r3, #20]
}
 8005a82:	bf00      	nop
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40000400 	.word	0x40000400
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40000c00 	.word	0x40000c00
 8005aa0:	40010400 	.word	0x40010400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800
 8005ab0:	40001800 	.word	0x40001800
 8005ab4:	40001c00 	.word	0x40001c00
 8005ab8:	40002000 	.word	0x40002000

08005abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b087      	sub	sp, #28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f023 0201 	bic.w	r2, r3, #1
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f023 030a 	bic.w	r3, r3, #10
 8005af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	621a      	str	r2, [r3, #32]
}
 8005b0e:	bf00      	nop
 8005b10:	371c      	adds	r7, #28
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b087      	sub	sp, #28
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0210 	bic.w	r2, r3, #16
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	031b      	lsls	r3, r3, #12
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	621a      	str	r2, [r3, #32]
}
 8005b6e:	bf00      	nop
 8005b70:	371c      	adds	r7, #28
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	b085      	sub	sp, #20
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	f043 0307 	orr.w	r3, r3, #7
 8005b9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	609a      	str	r2, [r3, #8]
}
 8005ba4:	bf00      	nop
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr

08005bb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b087      	sub	sp, #28
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
 8005bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	021a      	lsls	r2, r3, #8
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	609a      	str	r2, [r3, #8]
}
 8005be4:	bf00      	nop
 8005be6:	371c      	adds	r7, #28
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e06d      	b.n	8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2202      	movs	r2, #2
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a30      	ldr	r2, [pc, #192]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a2f      	ldr	r2, [pc, #188]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d108      	bne.n	8005c4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a20      	ldr	r2, [pc, #128]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d022      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7a:	d01d      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a1d      	ldr	r2, [pc, #116]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d018      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1c      	ldr	r2, [pc, #112]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d013      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1a      	ldr	r2, [pc, #104]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d00e      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a15      	ldr	r2, [pc, #84]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d009      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d004      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d10c      	bne.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40010400 	.word	0x40010400
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40000c00 	.word	0x40000c00
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40001800 	.word	0x40001800

08005d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d101      	bne.n	8005d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e040      	b.n	8005ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fb fd78 	bl	8001860 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2224      	movs	r2, #36	; 0x24
 8005d74:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fc86 	bl	8006698 <UART_SetConfig>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d101      	bne.n	8005d96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e022      	b.n	8005ddc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fede 	bl	8006b60 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f042 0201 	orr.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 ff65 	bl	8006ca4 <UART_CheckIdleState>
 8005dda:	4603      	mov	r3, r0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	; 0x28
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005df8:	2b20      	cmp	r3, #32
 8005dfa:	d171      	bne.n	8005ee0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_UART_Transmit+0x24>
 8005e02:	88fb      	ldrh	r3, [r7, #6]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e06a      	b.n	8005ee2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2221      	movs	r2, #33	; 0x21
 8005e18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e1a:	f7fc fcdd 	bl	80027d8 <HAL_GetTick>
 8005e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e38:	d108      	bne.n	8005e4c <HAL_UART_Transmit+0x68>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d104      	bne.n	8005e4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	e003      	b.n	8005e54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e54:	e02c      	b.n	8005eb0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2180      	movs	r1, #128	; 0x80
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 ff6c 	bl	8006d3e <UART_WaitOnFlagUntilTimeout>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e038      	b.n	8005ee2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10b      	bne.n	8005e8e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	3302      	adds	r3, #2
 8005e8a:	61bb      	str	r3, [r7, #24]
 8005e8c:	e007      	b.n	8005e9e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	781a      	ldrb	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	b29a      	uxth	r2, r3
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1cc      	bne.n	8005e56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2140      	movs	r1, #64	; 0x40
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 ff39 	bl	8006d3e <UART_WaitOnFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e005      	b.n	8005ee2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e000      	b.n	8005ee2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005ee0:	2302      	movs	r3, #2
  }
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b08a      	sub	sp, #40	; 0x28
 8005eee:	af02      	add	r7, sp, #8
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	603b      	str	r3, [r7, #0]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	f040 80b1 	bne.w	8006068 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_UART_Receive+0x28>
 8005f0c:	88fb      	ldrh	r3, [r7, #6]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0a9      	b.n	800606a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2222      	movs	r2, #34	; 0x22
 8005f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f2c:	f7fc fc54 	bl	80027d8 <HAL_GetTick>
 8005f30:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	88fa      	ldrh	r2, [r7, #6]
 8005f36:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	88fa      	ldrh	r2, [r7, #6]
 8005f3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4a:	d10e      	bne.n	8005f6a <HAL_UART_Receive+0x80>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d105      	bne.n	8005f60 <HAL_UART_Receive+0x76>
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005f5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f5e:	e02d      	b.n	8005fbc <HAL_UART_Receive+0xd2>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	22ff      	movs	r2, #255	; 0xff
 8005f64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f68:	e028      	b.n	8005fbc <HAL_UART_Receive+0xd2>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10d      	bne.n	8005f8e <HAL_UART_Receive+0xa4>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d104      	bne.n	8005f84 <HAL_UART_Receive+0x9a>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	22ff      	movs	r2, #255	; 0xff
 8005f7e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f82:	e01b      	b.n	8005fbc <HAL_UART_Receive+0xd2>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	227f      	movs	r2, #127	; 0x7f
 8005f88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005f8c:	e016      	b.n	8005fbc <HAL_UART_Receive+0xd2>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f96:	d10d      	bne.n	8005fb4 <HAL_UART_Receive+0xca>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d104      	bne.n	8005faa <HAL_UART_Receive+0xc0>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	227f      	movs	r2, #127	; 0x7f
 8005fa4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fa8:	e008      	b.n	8005fbc <HAL_UART_Receive+0xd2>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	223f      	movs	r2, #63	; 0x3f
 8005fae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005fb2:	e003      	b.n	8005fbc <HAL_UART_Receive+0xd2>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fc2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fcc:	d108      	bne.n	8005fe0 <HAL_UART_Receive+0xf6>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d104      	bne.n	8005fe0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	61bb      	str	r3, [r7, #24]
 8005fde:	e003      	b.n	8005fe8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005fe8:	e032      	b.n	8006050 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	2120      	movs	r1, #32
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 fea2 	bl	8006d3e <UART_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e032      	b.n	800606a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10c      	bne.n	8006024 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	b29a      	uxth	r2, r3
 8006012:	8a7b      	ldrh	r3, [r7, #18]
 8006014:	4013      	ands	r3, r2
 8006016:	b29a      	uxth	r2, r3
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	3302      	adds	r3, #2
 8006020:	61bb      	str	r3, [r7, #24]
 8006022:	e00c      	b.n	800603e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	b2da      	uxtb	r2, r3
 800602c:	8a7b      	ldrh	r3, [r7, #18]
 800602e:	b2db      	uxtb	r3, r3
 8006030:	4013      	ands	r3, r2
 8006032:	b2da      	uxtb	r2, r3
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	3301      	adds	r3, #1
 800603c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006056:	b29b      	uxth	r3, r3
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1c6      	bne.n	8005fea <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	e000      	b.n	800606a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006068:	2302      	movs	r3, #2
  }
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b0ba      	sub	sp, #232	; 0xe8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800609a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800609e:	f640 030f 	movw	r3, #2063	; 0x80f
 80060a2:	4013      	ands	r3, r2
 80060a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80060a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d115      	bne.n	80060dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80060b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b4:	f003 0320 	and.w	r3, r3, #32
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d00f      	beq.n	80060dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80060bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c0:	f003 0320 	and.w	r3, r3, #32
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d009      	beq.n	80060dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	f000 82ac 	beq.w	800662a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	4798      	blx	r3
      }
      return;
 80060da:	e2a6      	b.n	800662a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8117 	beq.w	8006314 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80060e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80060f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80060f6:	4b85      	ldr	r3, [pc, #532]	; (800630c <HAL_UART_IRQHandler+0x298>)
 80060f8:	4013      	ands	r3, r2
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 810a 	beq.w	8006314 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d011      	beq.n	8006130 <HAL_UART_IRQHandler+0xbc>
 800610c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00b      	beq.n	8006130 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2201      	movs	r2, #1
 800611e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006126:	f043 0201 	orr.w	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006134:	f003 0302 	and.w	r3, r3, #2
 8006138:	2b00      	cmp	r3, #0
 800613a:	d011      	beq.n	8006160 <HAL_UART_IRQHandler+0xec>
 800613c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00b      	beq.n	8006160 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2202      	movs	r2, #2
 800614e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006156:	f043 0204 	orr.w	r2, r3, #4
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d011      	beq.n	8006190 <HAL_UART_IRQHandler+0x11c>
 800616c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2204      	movs	r2, #4
 800617e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006186:	f043 0202 	orr.w	r2, r3, #2
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b00      	cmp	r3, #0
 800619a:	d017      	beq.n	80061cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800619c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80061a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00b      	beq.n	80061cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2208      	movs	r2, #8
 80061ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061c2:	f043 0208 	orr.w	r2, r3, #8
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d012      	beq.n	80061fe <HAL_UART_IRQHandler+0x18a>
 80061d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d00c      	beq.n	80061fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f4:	f043 0220 	orr.w	r2, r3, #32
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8212 	beq.w	800662e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800620a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00d      	beq.n	8006232 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d007      	beq.n	8006232 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b40      	cmp	r3, #64	; 0x40
 8006248:	d005      	beq.n	8006256 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800624a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800624e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006252:	2b00      	cmp	r3, #0
 8006254:	d04f      	beq.n	80062f6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fe37 	bl	8006eca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d141      	bne.n	80062ee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3308      	adds	r3, #8
 8006270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006274:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006280:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006284:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	3308      	adds	r3, #8
 8006292:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006296:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800629a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80062a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80062ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1d9      	bne.n	800626a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d013      	beq.n	80062e6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c2:	4a13      	ldr	r2, [pc, #76]	; (8006310 <HAL_UART_IRQHandler+0x29c>)
 80062c4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7fd f82f 	bl	800332e <HAL_DMA_Abort_IT>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d017      	beq.n	8006306 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e4:	e00f      	b.n	8006306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f9b6 	bl	8006658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ec:	e00b      	b.n	8006306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f9b2 	bl	8006658 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	e007      	b.n	8006306 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f9ae 	bl	8006658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006304:	e193      	b.n	800662e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006306:	bf00      	nop
    return;
 8006308:	e191      	b.n	800662e <HAL_UART_IRQHandler+0x5ba>
 800630a:	bf00      	nop
 800630c:	04000120 	.word	0x04000120
 8006310:	08006f93 	.word	0x08006f93

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006318:	2b01      	cmp	r3, #1
 800631a:	f040 814c 	bne.w	80065b6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006322:	f003 0310 	and.w	r3, r3, #16
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8145 	beq.w	80065b6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800632c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006330:	f003 0310 	and.w	r3, r3, #16
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 813e 	beq.w	80065b6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2210      	movs	r2, #16
 8006340:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634c:	2b40      	cmp	r3, #64	; 0x40
 800634e:	f040 80b6 	bne.w	80064be <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800635e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8165 	beq.w	8006632 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800636e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006372:	429a      	cmp	r2, r3
 8006374:	f080 815d 	bcs.w	8006632 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800637e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800638c:	f000 8086 	beq.w	800649c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006398:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800639c:	e853 3f00 	ldrex	r3, [r3]
 80063a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80063a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80063be:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80063c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80063ca:	e841 2300 	strex	r3, r2, [r1]
 80063ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80063d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1da      	bne.n	8006390 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80063ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063ec:	f023 0301 	bic.w	r3, r3, #1
 80063f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3308      	adds	r3, #8
 80063fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80063fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006402:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006404:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006406:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e1      	bne.n	80063da <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	3308      	adds	r3, #8
 800641c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	3308      	adds	r3, #8
 8006436:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800643a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800643c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006440:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006442:	e841 2300 	strex	r3, r2, [r1]
 8006446:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e3      	bne.n	8006416 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800646a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800646c:	f023 0310 	bic.w	r3, r3, #16
 8006470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800647e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006480:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006482:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006484:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006486:	e841 2300 	strex	r3, r2, [r1]
 800648a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800648c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1e4      	bne.n	800645c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006496:	4618      	mov	r0, r3
 8006498:	f7fc fed9 	bl	800324e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f8d8 	bl	800666c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064bc:	e0b9      	b.n	8006632 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80ab 	beq.w	8006636 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80064e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 80a6 	beq.w	8006636 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	e853 3f00 	ldrex	r3, [r3]
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	461a      	mov	r2, r3
 8006508:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800650c:	647b      	str	r3, [r7, #68]	; 0x44
 800650e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006510:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006512:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006514:	e841 2300 	strex	r3, r2, [r1]
 8006518:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800651a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d1e4      	bne.n	80064ea <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	3308      	adds	r3, #8
 8006526:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	e853 3f00 	ldrex	r3, [r3]
 800652e:	623b      	str	r3, [r7, #32]
   return(result);
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	f023 0301 	bic.w	r3, r3, #1
 8006536:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	3308      	adds	r3, #8
 8006540:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006544:	633a      	str	r2, [r7, #48]	; 0x30
 8006546:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800654a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e3      	bne.n	8006520 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	e853 3f00 	ldrex	r3, [r3]
 8006578:	60fb      	str	r3, [r7, #12]
   return(result);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	f023 0310 	bic.w	r3, r3, #16
 8006580:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	461a      	mov	r2, r3
 800658a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800658e:	61fb      	str	r3, [r7, #28]
 8006590:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006592:	69b9      	ldr	r1, [r7, #24]
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	e841 2300 	strex	r3, r2, [r1]
 800659a:	617b      	str	r3, [r7, #20]
   return(result);
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1e4      	bne.n	800656c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f85c 	bl	800666c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065b4:	e03f      	b.n	8006636 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00e      	beq.n	80065e0 <HAL_UART_IRQHandler+0x56c>
 80065c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d008      	beq.n	80065e0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80065d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 f853 	bl	8006684 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80065de:	e02d      	b.n	800663c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80065e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00e      	beq.n	800660a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80065ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d008      	beq.n	800660a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01c      	beq.n	800663a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
    }
    return;
 8006608:	e017      	b.n	800663a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800660a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d012      	beq.n	800663c <HAL_UART_IRQHandler+0x5c8>
 8006616:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00c      	beq.n	800663c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fccb 	bl	8006fbe <UART_EndTransmit_IT>
    return;
 8006628:	e008      	b.n	800663c <HAL_UART_IRQHandler+0x5c8>
      return;
 800662a:	bf00      	nop
 800662c:	e006      	b.n	800663c <HAL_UART_IRQHandler+0x5c8>
    return;
 800662e:	bf00      	nop
 8006630:	e004      	b.n	800663c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006632:	bf00      	nop
 8006634:	e002      	b.n	800663c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <HAL_UART_IRQHandler+0x5c8>
    return;
 800663a:	bf00      	nop
  }

}
 800663c:	37e8      	adds	r7, #232	; 0xe8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop

08006644 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	460b      	mov	r3, r1
 8006676:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4ba6      	ldr	r3, [pc, #664]	; (800695c <UART_SetConfig+0x2c4>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	6979      	ldr	r1, [r7, #20]
 80066cc:	430b      	orrs	r3, r1
 80066ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a1b      	ldr	r3, [r3, #32]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	430a      	orrs	r2, r1
 8006708:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a94      	ldr	r2, [pc, #592]	; (8006960 <UART_SetConfig+0x2c8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d120      	bne.n	8006756 <UART_SetConfig+0xbe>
 8006714:	4b93      	ldr	r3, [pc, #588]	; (8006964 <UART_SetConfig+0x2cc>)
 8006716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b03      	cmp	r3, #3
 8006720:	d816      	bhi.n	8006750 <UART_SetConfig+0xb8>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <UART_SetConfig+0x90>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	08006739 	.word	0x08006739
 800672c:	08006745 	.word	0x08006745
 8006730:	0800673f 	.word	0x0800673f
 8006734:	0800674b 	.word	0x0800674b
 8006738:	2301      	movs	r3, #1
 800673a:	77fb      	strb	r3, [r7, #31]
 800673c:	e150      	b.n	80069e0 <UART_SetConfig+0x348>
 800673e:	2302      	movs	r3, #2
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e14d      	b.n	80069e0 <UART_SetConfig+0x348>
 8006744:	2304      	movs	r3, #4
 8006746:	77fb      	strb	r3, [r7, #31]
 8006748:	e14a      	b.n	80069e0 <UART_SetConfig+0x348>
 800674a:	2308      	movs	r3, #8
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e147      	b.n	80069e0 <UART_SetConfig+0x348>
 8006750:	2310      	movs	r3, #16
 8006752:	77fb      	strb	r3, [r7, #31]
 8006754:	e144      	b.n	80069e0 <UART_SetConfig+0x348>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a83      	ldr	r2, [pc, #524]	; (8006968 <UART_SetConfig+0x2d0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d132      	bne.n	80067c6 <UART_SetConfig+0x12e>
 8006760:	4b80      	ldr	r3, [pc, #512]	; (8006964 <UART_SetConfig+0x2cc>)
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006766:	f003 030c 	and.w	r3, r3, #12
 800676a:	2b0c      	cmp	r3, #12
 800676c:	d828      	bhi.n	80067c0 <UART_SetConfig+0x128>
 800676e:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <UART_SetConfig+0xdc>)
 8006770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006774:	080067a9 	.word	0x080067a9
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067c1 	.word	0x080067c1
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067b5 	.word	0x080067b5
 8006788:	080067c1 	.word	0x080067c1
 800678c:	080067c1 	.word	0x080067c1
 8006790:	080067c1 	.word	0x080067c1
 8006794:	080067af 	.word	0x080067af
 8006798:	080067c1 	.word	0x080067c1
 800679c:	080067c1 	.word	0x080067c1
 80067a0:	080067c1 	.word	0x080067c1
 80067a4:	080067bb 	.word	0x080067bb
 80067a8:	2300      	movs	r3, #0
 80067aa:	77fb      	strb	r3, [r7, #31]
 80067ac:	e118      	b.n	80069e0 <UART_SetConfig+0x348>
 80067ae:	2302      	movs	r3, #2
 80067b0:	77fb      	strb	r3, [r7, #31]
 80067b2:	e115      	b.n	80069e0 <UART_SetConfig+0x348>
 80067b4:	2304      	movs	r3, #4
 80067b6:	77fb      	strb	r3, [r7, #31]
 80067b8:	e112      	b.n	80069e0 <UART_SetConfig+0x348>
 80067ba:	2308      	movs	r3, #8
 80067bc:	77fb      	strb	r3, [r7, #31]
 80067be:	e10f      	b.n	80069e0 <UART_SetConfig+0x348>
 80067c0:	2310      	movs	r3, #16
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e10c      	b.n	80069e0 <UART_SetConfig+0x348>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a68      	ldr	r2, [pc, #416]	; (800696c <UART_SetConfig+0x2d4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d120      	bne.n	8006812 <UART_SetConfig+0x17a>
 80067d0:	4b64      	ldr	r3, [pc, #400]	; (8006964 <UART_SetConfig+0x2cc>)
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067da:	2b30      	cmp	r3, #48	; 0x30
 80067dc:	d013      	beq.n	8006806 <UART_SetConfig+0x16e>
 80067de:	2b30      	cmp	r3, #48	; 0x30
 80067e0:	d814      	bhi.n	800680c <UART_SetConfig+0x174>
 80067e2:	2b20      	cmp	r3, #32
 80067e4:	d009      	beq.n	80067fa <UART_SetConfig+0x162>
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d810      	bhi.n	800680c <UART_SetConfig+0x174>
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d002      	beq.n	80067f4 <UART_SetConfig+0x15c>
 80067ee:	2b10      	cmp	r3, #16
 80067f0:	d006      	beq.n	8006800 <UART_SetConfig+0x168>
 80067f2:	e00b      	b.n	800680c <UART_SetConfig+0x174>
 80067f4:	2300      	movs	r3, #0
 80067f6:	77fb      	strb	r3, [r7, #31]
 80067f8:	e0f2      	b.n	80069e0 <UART_SetConfig+0x348>
 80067fa:	2302      	movs	r3, #2
 80067fc:	77fb      	strb	r3, [r7, #31]
 80067fe:	e0ef      	b.n	80069e0 <UART_SetConfig+0x348>
 8006800:	2304      	movs	r3, #4
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e0ec      	b.n	80069e0 <UART_SetConfig+0x348>
 8006806:	2308      	movs	r3, #8
 8006808:	77fb      	strb	r3, [r7, #31]
 800680a:	e0e9      	b.n	80069e0 <UART_SetConfig+0x348>
 800680c:	2310      	movs	r3, #16
 800680e:	77fb      	strb	r3, [r7, #31]
 8006810:	e0e6      	b.n	80069e0 <UART_SetConfig+0x348>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a56      	ldr	r2, [pc, #344]	; (8006970 <UART_SetConfig+0x2d8>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d120      	bne.n	800685e <UART_SetConfig+0x1c6>
 800681c:	4b51      	ldr	r3, [pc, #324]	; (8006964 <UART_SetConfig+0x2cc>)
 800681e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006822:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006826:	2bc0      	cmp	r3, #192	; 0xc0
 8006828:	d013      	beq.n	8006852 <UART_SetConfig+0x1ba>
 800682a:	2bc0      	cmp	r3, #192	; 0xc0
 800682c:	d814      	bhi.n	8006858 <UART_SetConfig+0x1c0>
 800682e:	2b80      	cmp	r3, #128	; 0x80
 8006830:	d009      	beq.n	8006846 <UART_SetConfig+0x1ae>
 8006832:	2b80      	cmp	r3, #128	; 0x80
 8006834:	d810      	bhi.n	8006858 <UART_SetConfig+0x1c0>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <UART_SetConfig+0x1a8>
 800683a:	2b40      	cmp	r3, #64	; 0x40
 800683c:	d006      	beq.n	800684c <UART_SetConfig+0x1b4>
 800683e:	e00b      	b.n	8006858 <UART_SetConfig+0x1c0>
 8006840:	2300      	movs	r3, #0
 8006842:	77fb      	strb	r3, [r7, #31]
 8006844:	e0cc      	b.n	80069e0 <UART_SetConfig+0x348>
 8006846:	2302      	movs	r3, #2
 8006848:	77fb      	strb	r3, [r7, #31]
 800684a:	e0c9      	b.n	80069e0 <UART_SetConfig+0x348>
 800684c:	2304      	movs	r3, #4
 800684e:	77fb      	strb	r3, [r7, #31]
 8006850:	e0c6      	b.n	80069e0 <UART_SetConfig+0x348>
 8006852:	2308      	movs	r3, #8
 8006854:	77fb      	strb	r3, [r7, #31]
 8006856:	e0c3      	b.n	80069e0 <UART_SetConfig+0x348>
 8006858:	2310      	movs	r3, #16
 800685a:	77fb      	strb	r3, [r7, #31]
 800685c:	e0c0      	b.n	80069e0 <UART_SetConfig+0x348>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a44      	ldr	r2, [pc, #272]	; (8006974 <UART_SetConfig+0x2dc>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d125      	bne.n	80068b4 <UART_SetConfig+0x21c>
 8006868:	4b3e      	ldr	r3, [pc, #248]	; (8006964 <UART_SetConfig+0x2cc>)
 800686a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006876:	d017      	beq.n	80068a8 <UART_SetConfig+0x210>
 8006878:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800687c:	d817      	bhi.n	80068ae <UART_SetConfig+0x216>
 800687e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006882:	d00b      	beq.n	800689c <UART_SetConfig+0x204>
 8006884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006888:	d811      	bhi.n	80068ae <UART_SetConfig+0x216>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <UART_SetConfig+0x1fe>
 800688e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006892:	d006      	beq.n	80068a2 <UART_SetConfig+0x20a>
 8006894:	e00b      	b.n	80068ae <UART_SetConfig+0x216>
 8006896:	2300      	movs	r3, #0
 8006898:	77fb      	strb	r3, [r7, #31]
 800689a:	e0a1      	b.n	80069e0 <UART_SetConfig+0x348>
 800689c:	2302      	movs	r3, #2
 800689e:	77fb      	strb	r3, [r7, #31]
 80068a0:	e09e      	b.n	80069e0 <UART_SetConfig+0x348>
 80068a2:	2304      	movs	r3, #4
 80068a4:	77fb      	strb	r3, [r7, #31]
 80068a6:	e09b      	b.n	80069e0 <UART_SetConfig+0x348>
 80068a8:	2308      	movs	r3, #8
 80068aa:	77fb      	strb	r3, [r7, #31]
 80068ac:	e098      	b.n	80069e0 <UART_SetConfig+0x348>
 80068ae:	2310      	movs	r3, #16
 80068b0:	77fb      	strb	r3, [r7, #31]
 80068b2:	e095      	b.n	80069e0 <UART_SetConfig+0x348>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a2f      	ldr	r2, [pc, #188]	; (8006978 <UART_SetConfig+0x2e0>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d125      	bne.n	800690a <UART_SetConfig+0x272>
 80068be:	4b29      	ldr	r3, [pc, #164]	; (8006964 <UART_SetConfig+0x2cc>)
 80068c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068cc:	d017      	beq.n	80068fe <UART_SetConfig+0x266>
 80068ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068d2:	d817      	bhi.n	8006904 <UART_SetConfig+0x26c>
 80068d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d8:	d00b      	beq.n	80068f2 <UART_SetConfig+0x25a>
 80068da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068de:	d811      	bhi.n	8006904 <UART_SetConfig+0x26c>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <UART_SetConfig+0x254>
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	d006      	beq.n	80068f8 <UART_SetConfig+0x260>
 80068ea:	e00b      	b.n	8006904 <UART_SetConfig+0x26c>
 80068ec:	2301      	movs	r3, #1
 80068ee:	77fb      	strb	r3, [r7, #31]
 80068f0:	e076      	b.n	80069e0 <UART_SetConfig+0x348>
 80068f2:	2302      	movs	r3, #2
 80068f4:	77fb      	strb	r3, [r7, #31]
 80068f6:	e073      	b.n	80069e0 <UART_SetConfig+0x348>
 80068f8:	2304      	movs	r3, #4
 80068fa:	77fb      	strb	r3, [r7, #31]
 80068fc:	e070      	b.n	80069e0 <UART_SetConfig+0x348>
 80068fe:	2308      	movs	r3, #8
 8006900:	77fb      	strb	r3, [r7, #31]
 8006902:	e06d      	b.n	80069e0 <UART_SetConfig+0x348>
 8006904:	2310      	movs	r3, #16
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e06a      	b.n	80069e0 <UART_SetConfig+0x348>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a1b      	ldr	r2, [pc, #108]	; (800697c <UART_SetConfig+0x2e4>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d138      	bne.n	8006986 <UART_SetConfig+0x2ee>
 8006914:	4b13      	ldr	r3, [pc, #76]	; (8006964 <UART_SetConfig+0x2cc>)
 8006916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800691e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006922:	d017      	beq.n	8006954 <UART_SetConfig+0x2bc>
 8006924:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006928:	d82a      	bhi.n	8006980 <UART_SetConfig+0x2e8>
 800692a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800692e:	d00b      	beq.n	8006948 <UART_SetConfig+0x2b0>
 8006930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006934:	d824      	bhi.n	8006980 <UART_SetConfig+0x2e8>
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <UART_SetConfig+0x2aa>
 800693a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800693e:	d006      	beq.n	800694e <UART_SetConfig+0x2b6>
 8006940:	e01e      	b.n	8006980 <UART_SetConfig+0x2e8>
 8006942:	2300      	movs	r3, #0
 8006944:	77fb      	strb	r3, [r7, #31]
 8006946:	e04b      	b.n	80069e0 <UART_SetConfig+0x348>
 8006948:	2302      	movs	r3, #2
 800694a:	77fb      	strb	r3, [r7, #31]
 800694c:	e048      	b.n	80069e0 <UART_SetConfig+0x348>
 800694e:	2304      	movs	r3, #4
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e045      	b.n	80069e0 <UART_SetConfig+0x348>
 8006954:	2308      	movs	r3, #8
 8006956:	77fb      	strb	r3, [r7, #31]
 8006958:	e042      	b.n	80069e0 <UART_SetConfig+0x348>
 800695a:	bf00      	nop
 800695c:	efff69f3 	.word	0xefff69f3
 8006960:	40011000 	.word	0x40011000
 8006964:	40023800 	.word	0x40023800
 8006968:	40004400 	.word	0x40004400
 800696c:	40004800 	.word	0x40004800
 8006970:	40004c00 	.word	0x40004c00
 8006974:	40005000 	.word	0x40005000
 8006978:	40011400 	.word	0x40011400
 800697c:	40007800 	.word	0x40007800
 8006980:	2310      	movs	r3, #16
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e02c      	b.n	80069e0 <UART_SetConfig+0x348>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a72      	ldr	r2, [pc, #456]	; (8006b54 <UART_SetConfig+0x4bc>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d125      	bne.n	80069dc <UART_SetConfig+0x344>
 8006990:	4b71      	ldr	r3, [pc, #452]	; (8006b58 <UART_SetConfig+0x4c0>)
 8006992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006996:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800699a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800699e:	d017      	beq.n	80069d0 <UART_SetConfig+0x338>
 80069a0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80069a4:	d817      	bhi.n	80069d6 <UART_SetConfig+0x33e>
 80069a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069aa:	d00b      	beq.n	80069c4 <UART_SetConfig+0x32c>
 80069ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069b0:	d811      	bhi.n	80069d6 <UART_SetConfig+0x33e>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <UART_SetConfig+0x326>
 80069b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ba:	d006      	beq.n	80069ca <UART_SetConfig+0x332>
 80069bc:	e00b      	b.n	80069d6 <UART_SetConfig+0x33e>
 80069be:	2300      	movs	r3, #0
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e00d      	b.n	80069e0 <UART_SetConfig+0x348>
 80069c4:	2302      	movs	r3, #2
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e00a      	b.n	80069e0 <UART_SetConfig+0x348>
 80069ca:	2304      	movs	r3, #4
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e007      	b.n	80069e0 <UART_SetConfig+0x348>
 80069d0:	2308      	movs	r3, #8
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e004      	b.n	80069e0 <UART_SetConfig+0x348>
 80069d6:	2310      	movs	r3, #16
 80069d8:	77fb      	strb	r3, [r7, #31]
 80069da:	e001      	b.n	80069e0 <UART_SetConfig+0x348>
 80069dc:	2310      	movs	r3, #16
 80069de:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e8:	d15b      	bne.n	8006aa2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80069ea:	7ffb      	ldrb	r3, [r7, #31]
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d828      	bhi.n	8006a42 <UART_SetConfig+0x3aa>
 80069f0:	a201      	add	r2, pc, #4	; (adr r2, 80069f8 <UART_SetConfig+0x360>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a25 	.word	0x08006a25
 8006a00:	08006a2d 	.word	0x08006a2d
 8006a04:	08006a43 	.word	0x08006a43
 8006a08:	08006a33 	.word	0x08006a33
 8006a0c:	08006a43 	.word	0x08006a43
 8006a10:	08006a43 	.word	0x08006a43
 8006a14:	08006a43 	.word	0x08006a43
 8006a18:	08006a3b 	.word	0x08006a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a1c:	f7fd fc78 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 8006a20:	61b8      	str	r0, [r7, #24]
        break;
 8006a22:	e013      	b.n	8006a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a24:	f7fd fc88 	bl	8004338 <HAL_RCC_GetPCLK2Freq>
 8006a28:	61b8      	str	r0, [r7, #24]
        break;
 8006a2a:	e00f      	b.n	8006a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a2c:	4b4b      	ldr	r3, [pc, #300]	; (8006b5c <UART_SetConfig+0x4c4>)
 8006a2e:	61bb      	str	r3, [r7, #24]
        break;
 8006a30:	e00c      	b.n	8006a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a32:	f7fd fb5b 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 8006a36:	61b8      	str	r0, [r7, #24]
        break;
 8006a38:	e008      	b.n	8006a4c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3e:	61bb      	str	r3, [r7, #24]
        break;
 8006a40:	e004      	b.n	8006a4c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	77bb      	strb	r3, [r7, #30]
        break;
 8006a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d074      	beq.n	8006b3c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	005a      	lsls	r2, r3, #1
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	085b      	lsrs	r3, r3, #1
 8006a5c:	441a      	add	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b0f      	cmp	r3, #15
 8006a6c:	d916      	bls.n	8006a9c <UART_SetConfig+0x404>
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a74:	d212      	bcs.n	8006a9c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f023 030f 	bic.w	r3, r3, #15
 8006a7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	085b      	lsrs	r3, r3, #1
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	f003 0307 	and.w	r3, r3, #7
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	89fb      	ldrh	r3, [r7, #14]
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	89fa      	ldrh	r2, [r7, #14]
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	e04f      	b.n	8006b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	77bb      	strb	r3, [r7, #30]
 8006aa0:	e04c      	b.n	8006b3c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aa2:	7ffb      	ldrb	r3, [r7, #31]
 8006aa4:	2b08      	cmp	r3, #8
 8006aa6:	d828      	bhi.n	8006afa <UART_SetConfig+0x462>
 8006aa8:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <UART_SetConfig+0x418>)
 8006aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aae:	bf00      	nop
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006add 	.word	0x08006add
 8006ab8:	08006ae5 	.word	0x08006ae5
 8006abc:	08006afb 	.word	0x08006afb
 8006ac0:	08006aeb 	.word	0x08006aeb
 8006ac4:	08006afb 	.word	0x08006afb
 8006ac8:	08006afb 	.word	0x08006afb
 8006acc:	08006afb 	.word	0x08006afb
 8006ad0:	08006af3 	.word	0x08006af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad4:	f7fd fc1c 	bl	8004310 <HAL_RCC_GetPCLK1Freq>
 8006ad8:	61b8      	str	r0, [r7, #24]
        break;
 8006ada:	e013      	b.n	8006b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006adc:	f7fd fc2c 	bl	8004338 <HAL_RCC_GetPCLK2Freq>
 8006ae0:	61b8      	str	r0, [r7, #24]
        break;
 8006ae2:	e00f      	b.n	8006b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae4:	4b1d      	ldr	r3, [pc, #116]	; (8006b5c <UART_SetConfig+0x4c4>)
 8006ae6:	61bb      	str	r3, [r7, #24]
        break;
 8006ae8:	e00c      	b.n	8006b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aea:	f7fd faff 	bl	80040ec <HAL_RCC_GetSysClockFreq>
 8006aee:	61b8      	str	r0, [r7, #24]
        break;
 8006af0:	e008      	b.n	8006b04 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006af6:	61bb      	str	r3, [r7, #24]
        break;
 8006af8:	e004      	b.n	8006b04 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	77bb      	strb	r3, [r7, #30]
        break;
 8006b02:	bf00      	nop
    }

    if (pclk != 0U)
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d018      	beq.n	8006b3c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	085a      	lsrs	r2, r3, #1
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	441a      	add	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b1c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b0f      	cmp	r3, #15
 8006b22:	d909      	bls.n	8006b38 <UART_SetConfig+0x4a0>
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2a:	d205      	bcs.n	8006b38 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60da      	str	r2, [r3, #12]
 8006b36:	e001      	b.n	8006b3c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b48:	7fbb      	ldrb	r3, [r7, #30]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40007c00 	.word	0x40007c00
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	00f42400 	.word	0x00f42400

08006b60 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00a      	beq.n	8006b8a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	430a      	orrs	r2, r1
 8006b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	430a      	orrs	r2, r1
 8006baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf4:	f003 0310 	and.w	r3, r3, #16
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d00a      	beq.n	8006c12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	430a      	orrs	r2, r1
 8006c10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	f003 0320 	and.w	r3, r3, #32
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	430a      	orrs	r2, r1
 8006c32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c5e:	d10a      	bne.n	8006c76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cb4:	f7fb fd90 	bl	80027d8 <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0308 	and.w	r3, r3, #8
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	d10e      	bne.n	8006ce6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f831 	bl	8006d3e <UART_WaitOnFlagUntilTimeout>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	e027      	b.n	8006d36 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d10e      	bne.n	8006d12 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cf8:	9300      	str	r3, [sp, #0]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f81b 	bl	8006d3e <UART_WaitOnFlagUntilTimeout>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e011      	b.n	8006d36 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2220      	movs	r2, #32
 8006d16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3710      	adds	r7, #16
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b09c      	sub	sp, #112	; 0x70
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	603b      	str	r3, [r7, #0]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4e:	e0a7      	b.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d56:	f000 80a3 	beq.w	8006ea0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5a:	f7fb fd3d 	bl	80027d8 <HAL_GetTick>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	1ad3      	subs	r3, r2, r3
 8006d64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d302      	bcc.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x32>
 8006d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d13f      	bne.n	8006df0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d84:	667b      	str	r3, [r7, #100]	; 0x64
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d90:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d96:	e841 2300 	strex	r3, r2, [r1]
 8006d9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e6      	bne.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	3308      	adds	r3, #8
 8006da8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db4:	f023 0301 	bic.w	r3, r3, #1
 8006db8:	663b      	str	r3, [r7, #96]	; 0x60
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006dc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8006dc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dca:	e841 2300 	strex	r3, r2, [r1]
 8006dce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1e5      	bne.n	8006da2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e068      	b.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d050      	beq.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	69db      	ldr	r3, [r3, #28]
 8006e04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e0c:	d148      	bne.n	8006ea0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e16:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e20:	e853 3f00 	ldrex	r3, [r3]
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	461a      	mov	r2, r3
 8006e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
 8006e38:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e3e:	e841 2300 	strex	r3, r2, [r1]
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1e6      	bne.n	8006e18 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	3308      	adds	r3, #8
 8006e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f023 0301 	bic.w	r3, r3, #1
 8006e60:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	3308      	adds	r3, #8
 8006e68:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e6a:	623a      	str	r2, [r7, #32]
 8006e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	69f9      	ldr	r1, [r7, #28]
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e5      	bne.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2220      	movs	r2, #32
 8006e82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2220      	movs	r2, #32
 8006e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2220      	movs	r2, #32
 8006e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e010      	b.n	8006ec2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69da      	ldr	r2, [r3, #28]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	68ba      	ldr	r2, [r7, #8]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	bf0c      	ite	eq
 8006eb0:	2301      	moveq	r3, #1
 8006eb2:	2300      	movne	r3, #0
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	79fb      	ldrb	r3, [r7, #7]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	f43f af48 	beq.w	8006d50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec0:	2300      	movs	r3, #0
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3770      	adds	r7, #112	; 0x70
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b095      	sub	sp, #84	; 0x54
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	e853 3f00 	ldrex	r3, [r3]
 8006ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	461a      	mov	r2, r3
 8006eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ef8:	e841 2300 	strex	r3, r2, [r1]
 8006efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e6      	bne.n	8006ed2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	3308      	adds	r3, #8
 8006f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0c:	6a3b      	ldr	r3, [r7, #32]
 8006f0e:	e853 3f00 	ldrex	r3, [r3]
 8006f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f023 0301 	bic.w	r3, r3, #1
 8006f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	3308      	adds	r3, #8
 8006f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e5      	bne.n	8006f04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d118      	bne.n	8006f72 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f023 0310 	bic.w	r3, r3, #16
 8006f54:	647b      	str	r3, [r7, #68]	; 0x44
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f5e:	61bb      	str	r3, [r7, #24]
 8006f60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f62:	6979      	ldr	r1, [r7, #20]
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	e841 2300 	strex	r3, r2, [r1]
 8006f6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e6      	bne.n	8006f40 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f86:	bf00      	nop
 8006f88:	3754      	adds	r7, #84	; 0x54
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr

08006f92 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff fb51 	bl	8006658 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fb6:	bf00      	nop
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b088      	sub	sp, #32
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	61bb      	str	r3, [r7, #24]
 8006fe6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6979      	ldr	r1, [r7, #20]
 8006fea:	69ba      	ldr	r2, [r7, #24]
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e6      	bne.n	8006fc6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2220      	movs	r2, #32
 8006ffc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f7ff fb1d 	bl	8006644 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800700a:	bf00      	nop
 800700c:	3720      	adds	r7, #32
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <__cvt>:
 8007012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007014:	ed2d 8b02 	vpush	{d8}
 8007018:	eeb0 8b40 	vmov.f64	d8, d0
 800701c:	b085      	sub	sp, #20
 800701e:	4617      	mov	r7, r2
 8007020:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007022:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007024:	ee18 2a90 	vmov	r2, s17
 8007028:	f025 0520 	bic.w	r5, r5, #32
 800702c:	2a00      	cmp	r2, #0
 800702e:	bfb6      	itet	lt
 8007030:	222d      	movlt	r2, #45	; 0x2d
 8007032:	2200      	movge	r2, #0
 8007034:	eeb1 8b40 	vneglt.f64	d8, d0
 8007038:	2d46      	cmp	r5, #70	; 0x46
 800703a:	460c      	mov	r4, r1
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	d004      	beq.n	800704a <__cvt+0x38>
 8007040:	2d45      	cmp	r5, #69	; 0x45
 8007042:	d100      	bne.n	8007046 <__cvt+0x34>
 8007044:	3401      	adds	r4, #1
 8007046:	2102      	movs	r1, #2
 8007048:	e000      	b.n	800704c <__cvt+0x3a>
 800704a:	2103      	movs	r1, #3
 800704c:	ab03      	add	r3, sp, #12
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	ab02      	add	r3, sp, #8
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4622      	mov	r2, r4
 8007056:	4633      	mov	r3, r6
 8007058:	eeb0 0b48 	vmov.f64	d0, d8
 800705c:	f000 fe30 	bl	8007cc0 <_dtoa_r>
 8007060:	2d47      	cmp	r5, #71	; 0x47
 8007062:	d101      	bne.n	8007068 <__cvt+0x56>
 8007064:	07fb      	lsls	r3, r7, #31
 8007066:	d51a      	bpl.n	800709e <__cvt+0x8c>
 8007068:	2d46      	cmp	r5, #70	; 0x46
 800706a:	eb00 0204 	add.w	r2, r0, r4
 800706e:	d10c      	bne.n	800708a <__cvt+0x78>
 8007070:	7803      	ldrb	r3, [r0, #0]
 8007072:	2b30      	cmp	r3, #48	; 0x30
 8007074:	d107      	bne.n	8007086 <__cvt+0x74>
 8007076:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800707a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707e:	bf1c      	itt	ne
 8007080:	f1c4 0401 	rsbne	r4, r4, #1
 8007084:	6034      	strne	r4, [r6, #0]
 8007086:	6833      	ldr	r3, [r6, #0]
 8007088:	441a      	add	r2, r3
 800708a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800708e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007092:	bf08      	it	eq
 8007094:	9203      	streq	r2, [sp, #12]
 8007096:	2130      	movs	r1, #48	; 0x30
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	4293      	cmp	r3, r2
 800709c:	d307      	bcc.n	80070ae <__cvt+0x9c>
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070a2:	1a1b      	subs	r3, r3, r0
 80070a4:	6013      	str	r3, [r2, #0]
 80070a6:	b005      	add	sp, #20
 80070a8:	ecbd 8b02 	vpop	{d8}
 80070ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ae:	1c5c      	adds	r4, r3, #1
 80070b0:	9403      	str	r4, [sp, #12]
 80070b2:	7019      	strb	r1, [r3, #0]
 80070b4:	e7f0      	b.n	8007098 <__cvt+0x86>

080070b6 <__exponent>:
 80070b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070b8:	4603      	mov	r3, r0
 80070ba:	2900      	cmp	r1, #0
 80070bc:	bfb8      	it	lt
 80070be:	4249      	neglt	r1, r1
 80070c0:	f803 2b02 	strb.w	r2, [r3], #2
 80070c4:	bfb4      	ite	lt
 80070c6:	222d      	movlt	r2, #45	; 0x2d
 80070c8:	222b      	movge	r2, #43	; 0x2b
 80070ca:	2909      	cmp	r1, #9
 80070cc:	7042      	strb	r2, [r0, #1]
 80070ce:	dd2a      	ble.n	8007126 <__exponent+0x70>
 80070d0:	f10d 0207 	add.w	r2, sp, #7
 80070d4:	4617      	mov	r7, r2
 80070d6:	260a      	movs	r6, #10
 80070d8:	4694      	mov	ip, r2
 80070da:	fb91 f5f6 	sdiv	r5, r1, r6
 80070de:	fb06 1415 	mls	r4, r6, r5, r1
 80070e2:	3430      	adds	r4, #48	; 0x30
 80070e4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80070e8:	460c      	mov	r4, r1
 80070ea:	2c63      	cmp	r4, #99	; 0x63
 80070ec:	f102 32ff 	add.w	r2, r2, #4294967295
 80070f0:	4629      	mov	r1, r5
 80070f2:	dcf1      	bgt.n	80070d8 <__exponent+0x22>
 80070f4:	3130      	adds	r1, #48	; 0x30
 80070f6:	f1ac 0402 	sub.w	r4, ip, #2
 80070fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80070fe:	1c41      	adds	r1, r0, #1
 8007100:	4622      	mov	r2, r4
 8007102:	42ba      	cmp	r2, r7
 8007104:	d30a      	bcc.n	800711c <__exponent+0x66>
 8007106:	f10d 0209 	add.w	r2, sp, #9
 800710a:	eba2 020c 	sub.w	r2, r2, ip
 800710e:	42bc      	cmp	r4, r7
 8007110:	bf88      	it	hi
 8007112:	2200      	movhi	r2, #0
 8007114:	4413      	add	r3, r2
 8007116:	1a18      	subs	r0, r3, r0
 8007118:	b003      	add	sp, #12
 800711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800711c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007120:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007124:	e7ed      	b.n	8007102 <__exponent+0x4c>
 8007126:	2330      	movs	r3, #48	; 0x30
 8007128:	3130      	adds	r1, #48	; 0x30
 800712a:	7083      	strb	r3, [r0, #2]
 800712c:	70c1      	strb	r1, [r0, #3]
 800712e:	1d03      	adds	r3, r0, #4
 8007130:	e7f1      	b.n	8007116 <__exponent+0x60>
 8007132:	0000      	movs	r0, r0
 8007134:	0000      	movs	r0, r0
	...

08007138 <_printf_float>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	b08b      	sub	sp, #44	; 0x2c
 800713e:	460c      	mov	r4, r1
 8007140:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007144:	4616      	mov	r6, r2
 8007146:	461f      	mov	r7, r3
 8007148:	4605      	mov	r5, r0
 800714a:	f000 fcbb 	bl	8007ac4 <_localeconv_r>
 800714e:	f8d0 b000 	ldr.w	fp, [r0]
 8007152:	4658      	mov	r0, fp
 8007154:	f7f9 f8c4 	bl	80002e0 <strlen>
 8007158:	2300      	movs	r3, #0
 800715a:	9308      	str	r3, [sp, #32]
 800715c:	f8d8 3000 	ldr.w	r3, [r8]
 8007160:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007164:	6822      	ldr	r2, [r4, #0]
 8007166:	3307      	adds	r3, #7
 8007168:	f023 0307 	bic.w	r3, r3, #7
 800716c:	f103 0108 	add.w	r1, r3, #8
 8007170:	f8c8 1000 	str.w	r1, [r8]
 8007174:	ed93 0b00 	vldr	d0, [r3]
 8007178:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80073d8 <_printf_float+0x2a0>
 800717c:	eeb0 7bc0 	vabs.f64	d7, d0
 8007180:	eeb4 7b46 	vcmp.f64	d7, d6
 8007184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007188:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800718c:	4682      	mov	sl, r0
 800718e:	dd24      	ble.n	80071da <_printf_float+0xa2>
 8007190:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007198:	d502      	bpl.n	80071a0 <_printf_float+0x68>
 800719a:	232d      	movs	r3, #45	; 0x2d
 800719c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a0:	498f      	ldr	r1, [pc, #572]	; (80073e0 <_printf_float+0x2a8>)
 80071a2:	4b90      	ldr	r3, [pc, #576]	; (80073e4 <_printf_float+0x2ac>)
 80071a4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80071a8:	bf94      	ite	ls
 80071aa:	4688      	movls	r8, r1
 80071ac:	4698      	movhi	r8, r3
 80071ae:	2303      	movs	r3, #3
 80071b0:	6123      	str	r3, [r4, #16]
 80071b2:	f022 0204 	bic.w	r2, r2, #4
 80071b6:	2300      	movs	r3, #0
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	9700      	str	r7, [sp, #0]
 80071be:	4633      	mov	r3, r6
 80071c0:	aa09      	add	r2, sp, #36	; 0x24
 80071c2:	4621      	mov	r1, r4
 80071c4:	4628      	mov	r0, r5
 80071c6:	f000 f9d1 	bl	800756c <_printf_common>
 80071ca:	3001      	adds	r0, #1
 80071cc:	f040 808a 	bne.w	80072e4 <_printf_float+0x1ac>
 80071d0:	f04f 30ff 	mov.w	r0, #4294967295
 80071d4:	b00b      	add	sp, #44	; 0x2c
 80071d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071da:	eeb4 0b40 	vcmp.f64	d0, d0
 80071de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e2:	d709      	bvc.n	80071f8 <_printf_float+0xc0>
 80071e4:	ee10 3a90 	vmov	r3, s1
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	bfbc      	itt	lt
 80071ec:	232d      	movlt	r3, #45	; 0x2d
 80071ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80071f2:	497d      	ldr	r1, [pc, #500]	; (80073e8 <_printf_float+0x2b0>)
 80071f4:	4b7d      	ldr	r3, [pc, #500]	; (80073ec <_printf_float+0x2b4>)
 80071f6:	e7d5      	b.n	80071a4 <_printf_float+0x6c>
 80071f8:	6863      	ldr	r3, [r4, #4]
 80071fa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80071fe:	9104      	str	r1, [sp, #16]
 8007200:	1c59      	adds	r1, r3, #1
 8007202:	d13c      	bne.n	800727e <_printf_float+0x146>
 8007204:	2306      	movs	r3, #6
 8007206:	6063      	str	r3, [r4, #4]
 8007208:	2300      	movs	r3, #0
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	ab08      	add	r3, sp, #32
 800720e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007212:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007216:	ab07      	add	r3, sp, #28
 8007218:	6861      	ldr	r1, [r4, #4]
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	6022      	str	r2, [r4, #0]
 800721e:	f10d 031b 	add.w	r3, sp, #27
 8007222:	4628      	mov	r0, r5
 8007224:	f7ff fef5 	bl	8007012 <__cvt>
 8007228:	9b04      	ldr	r3, [sp, #16]
 800722a:	9907      	ldr	r1, [sp, #28]
 800722c:	2b47      	cmp	r3, #71	; 0x47
 800722e:	4680      	mov	r8, r0
 8007230:	d108      	bne.n	8007244 <_printf_float+0x10c>
 8007232:	1cc8      	adds	r0, r1, #3
 8007234:	db02      	blt.n	800723c <_printf_float+0x104>
 8007236:	6863      	ldr	r3, [r4, #4]
 8007238:	4299      	cmp	r1, r3
 800723a:	dd41      	ble.n	80072c0 <_printf_float+0x188>
 800723c:	f1a9 0902 	sub.w	r9, r9, #2
 8007240:	fa5f f989 	uxtb.w	r9, r9
 8007244:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007248:	d820      	bhi.n	800728c <_printf_float+0x154>
 800724a:	3901      	subs	r1, #1
 800724c:	464a      	mov	r2, r9
 800724e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007252:	9107      	str	r1, [sp, #28]
 8007254:	f7ff ff2f 	bl	80070b6 <__exponent>
 8007258:	9a08      	ldr	r2, [sp, #32]
 800725a:	9004      	str	r0, [sp, #16]
 800725c:	1813      	adds	r3, r2, r0
 800725e:	2a01      	cmp	r2, #1
 8007260:	6123      	str	r3, [r4, #16]
 8007262:	dc02      	bgt.n	800726a <_printf_float+0x132>
 8007264:	6822      	ldr	r2, [r4, #0]
 8007266:	07d2      	lsls	r2, r2, #31
 8007268:	d501      	bpl.n	800726e <_printf_float+0x136>
 800726a:	3301      	adds	r3, #1
 800726c:	6123      	str	r3, [r4, #16]
 800726e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0a2      	beq.n	80071bc <_printf_float+0x84>
 8007276:	232d      	movs	r3, #45	; 0x2d
 8007278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800727c:	e79e      	b.n	80071bc <_printf_float+0x84>
 800727e:	9904      	ldr	r1, [sp, #16]
 8007280:	2947      	cmp	r1, #71	; 0x47
 8007282:	d1c1      	bne.n	8007208 <_printf_float+0xd0>
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1bf      	bne.n	8007208 <_printf_float+0xd0>
 8007288:	2301      	movs	r3, #1
 800728a:	e7bc      	b.n	8007206 <_printf_float+0xce>
 800728c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8007290:	d118      	bne.n	80072c4 <_printf_float+0x18c>
 8007292:	2900      	cmp	r1, #0
 8007294:	6863      	ldr	r3, [r4, #4]
 8007296:	dd0b      	ble.n	80072b0 <_printf_float+0x178>
 8007298:	6121      	str	r1, [r4, #16]
 800729a:	b913      	cbnz	r3, 80072a2 <_printf_float+0x16a>
 800729c:	6822      	ldr	r2, [r4, #0]
 800729e:	07d0      	lsls	r0, r2, #31
 80072a0:	d502      	bpl.n	80072a8 <_printf_float+0x170>
 80072a2:	3301      	adds	r3, #1
 80072a4:	440b      	add	r3, r1
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	2300      	movs	r3, #0
 80072aa:	65a1      	str	r1, [r4, #88]	; 0x58
 80072ac:	9304      	str	r3, [sp, #16]
 80072ae:	e7de      	b.n	800726e <_printf_float+0x136>
 80072b0:	b913      	cbnz	r3, 80072b8 <_printf_float+0x180>
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	07d2      	lsls	r2, r2, #31
 80072b6:	d501      	bpl.n	80072bc <_printf_float+0x184>
 80072b8:	3302      	adds	r3, #2
 80072ba:	e7f4      	b.n	80072a6 <_printf_float+0x16e>
 80072bc:	2301      	movs	r3, #1
 80072be:	e7f2      	b.n	80072a6 <_printf_float+0x16e>
 80072c0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80072c4:	9b08      	ldr	r3, [sp, #32]
 80072c6:	4299      	cmp	r1, r3
 80072c8:	db05      	blt.n	80072d6 <_printf_float+0x19e>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	6121      	str	r1, [r4, #16]
 80072ce:	07d8      	lsls	r0, r3, #31
 80072d0:	d5ea      	bpl.n	80072a8 <_printf_float+0x170>
 80072d2:	1c4b      	adds	r3, r1, #1
 80072d4:	e7e7      	b.n	80072a6 <_printf_float+0x16e>
 80072d6:	2900      	cmp	r1, #0
 80072d8:	bfd4      	ite	le
 80072da:	f1c1 0202 	rsble	r2, r1, #2
 80072de:	2201      	movgt	r2, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	e7e0      	b.n	80072a6 <_printf_float+0x16e>
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	055a      	lsls	r2, r3, #21
 80072e8:	d407      	bmi.n	80072fa <_printf_float+0x1c2>
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	4642      	mov	r2, r8
 80072ee:	4631      	mov	r1, r6
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b8      	blx	r7
 80072f4:	3001      	adds	r0, #1
 80072f6:	d12a      	bne.n	800734e <_printf_float+0x216>
 80072f8:	e76a      	b.n	80071d0 <_printf_float+0x98>
 80072fa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80072fe:	f240 80e0 	bls.w	80074c2 <_printf_float+0x38a>
 8007302:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007306:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800730a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730e:	d133      	bne.n	8007378 <_printf_float+0x240>
 8007310:	4a37      	ldr	r2, [pc, #220]	; (80073f0 <_printf_float+0x2b8>)
 8007312:	2301      	movs	r3, #1
 8007314:	4631      	mov	r1, r6
 8007316:	4628      	mov	r0, r5
 8007318:	47b8      	blx	r7
 800731a:	3001      	adds	r0, #1
 800731c:	f43f af58 	beq.w	80071d0 <_printf_float+0x98>
 8007320:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007324:	429a      	cmp	r2, r3
 8007326:	db02      	blt.n	800732e <_printf_float+0x1f6>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	07d8      	lsls	r0, r3, #31
 800732c:	d50f      	bpl.n	800734e <_printf_float+0x216>
 800732e:	4653      	mov	r3, sl
 8007330:	465a      	mov	r2, fp
 8007332:	4631      	mov	r1, r6
 8007334:	4628      	mov	r0, r5
 8007336:	47b8      	blx	r7
 8007338:	3001      	adds	r0, #1
 800733a:	f43f af49 	beq.w	80071d0 <_printf_float+0x98>
 800733e:	f04f 0800 	mov.w	r8, #0
 8007342:	f104 091a 	add.w	r9, r4, #26
 8007346:	9b08      	ldr	r3, [sp, #32]
 8007348:	3b01      	subs	r3, #1
 800734a:	4543      	cmp	r3, r8
 800734c:	dc09      	bgt.n	8007362 <_printf_float+0x22a>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	079b      	lsls	r3, r3, #30
 8007352:	f100 8106 	bmi.w	8007562 <_printf_float+0x42a>
 8007356:	68e0      	ldr	r0, [r4, #12]
 8007358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735a:	4298      	cmp	r0, r3
 800735c:	bfb8      	it	lt
 800735e:	4618      	movlt	r0, r3
 8007360:	e738      	b.n	80071d4 <_printf_float+0x9c>
 8007362:	2301      	movs	r3, #1
 8007364:	464a      	mov	r2, r9
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	f43f af2f 	beq.w	80071d0 <_printf_float+0x98>
 8007372:	f108 0801 	add.w	r8, r8, #1
 8007376:	e7e6      	b.n	8007346 <_printf_float+0x20e>
 8007378:	9b07      	ldr	r3, [sp, #28]
 800737a:	2b00      	cmp	r3, #0
 800737c:	dc3a      	bgt.n	80073f4 <_printf_float+0x2bc>
 800737e:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <_printf_float+0x2b8>)
 8007380:	2301      	movs	r3, #1
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	47b8      	blx	r7
 8007388:	3001      	adds	r0, #1
 800738a:	f43f af21 	beq.w	80071d0 <_printf_float+0x98>
 800738e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007392:	4313      	orrs	r3, r2
 8007394:	d102      	bne.n	800739c <_printf_float+0x264>
 8007396:	6823      	ldr	r3, [r4, #0]
 8007398:	07d9      	lsls	r1, r3, #31
 800739a:	d5d8      	bpl.n	800734e <_printf_float+0x216>
 800739c:	4653      	mov	r3, sl
 800739e:	465a      	mov	r2, fp
 80073a0:	4631      	mov	r1, r6
 80073a2:	4628      	mov	r0, r5
 80073a4:	47b8      	blx	r7
 80073a6:	3001      	adds	r0, #1
 80073a8:	f43f af12 	beq.w	80071d0 <_printf_float+0x98>
 80073ac:	f04f 0900 	mov.w	r9, #0
 80073b0:	f104 0a1a 	add.w	sl, r4, #26
 80073b4:	9b07      	ldr	r3, [sp, #28]
 80073b6:	425b      	negs	r3, r3
 80073b8:	454b      	cmp	r3, r9
 80073ba:	dc01      	bgt.n	80073c0 <_printf_float+0x288>
 80073bc:	9b08      	ldr	r3, [sp, #32]
 80073be:	e795      	b.n	80072ec <_printf_float+0x1b4>
 80073c0:	2301      	movs	r3, #1
 80073c2:	4652      	mov	r2, sl
 80073c4:	4631      	mov	r1, r6
 80073c6:	4628      	mov	r0, r5
 80073c8:	47b8      	blx	r7
 80073ca:	3001      	adds	r0, #1
 80073cc:	f43f af00 	beq.w	80071d0 <_printf_float+0x98>
 80073d0:	f109 0901 	add.w	r9, r9, #1
 80073d4:	e7ee      	b.n	80073b4 <_printf_float+0x27c>
 80073d6:	bf00      	nop
 80073d8:	ffffffff 	.word	0xffffffff
 80073dc:	7fefffff 	.word	0x7fefffff
 80073e0:	0809fe30 	.word	0x0809fe30
 80073e4:	0809fe34 	.word	0x0809fe34
 80073e8:	0809fe38 	.word	0x0809fe38
 80073ec:	0809fe3c 	.word	0x0809fe3c
 80073f0:	0809fe40 	.word	0x0809fe40
 80073f4:	9a08      	ldr	r2, [sp, #32]
 80073f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073f8:	429a      	cmp	r2, r3
 80073fa:	bfa8      	it	ge
 80073fc:	461a      	movge	r2, r3
 80073fe:	2a00      	cmp	r2, #0
 8007400:	4691      	mov	r9, r2
 8007402:	dc38      	bgt.n	8007476 <_printf_float+0x33e>
 8007404:	2300      	movs	r3, #0
 8007406:	9305      	str	r3, [sp, #20]
 8007408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800740c:	f104 021a 	add.w	r2, r4, #26
 8007410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007412:	9905      	ldr	r1, [sp, #20]
 8007414:	9304      	str	r3, [sp, #16]
 8007416:	eba3 0309 	sub.w	r3, r3, r9
 800741a:	428b      	cmp	r3, r1
 800741c:	dc33      	bgt.n	8007486 <_printf_float+0x34e>
 800741e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007422:	429a      	cmp	r2, r3
 8007424:	db3c      	blt.n	80074a0 <_printf_float+0x368>
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	07da      	lsls	r2, r3, #31
 800742a:	d439      	bmi.n	80074a0 <_printf_float+0x368>
 800742c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8007430:	eba2 0903 	sub.w	r9, r2, r3
 8007434:	9b04      	ldr	r3, [sp, #16]
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	4591      	cmp	r9, r2
 800743a:	bfa8      	it	ge
 800743c:	4691      	movge	r9, r2
 800743e:	f1b9 0f00 	cmp.w	r9, #0
 8007442:	dc35      	bgt.n	80074b0 <_printf_float+0x378>
 8007444:	f04f 0800 	mov.w	r8, #0
 8007448:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800744c:	f104 0a1a 	add.w	sl, r4, #26
 8007450:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	eba3 0309 	sub.w	r3, r3, r9
 800745a:	4543      	cmp	r3, r8
 800745c:	f77f af77 	ble.w	800734e <_printf_float+0x216>
 8007460:	2301      	movs	r3, #1
 8007462:	4652      	mov	r2, sl
 8007464:	4631      	mov	r1, r6
 8007466:	4628      	mov	r0, r5
 8007468:	47b8      	blx	r7
 800746a:	3001      	adds	r0, #1
 800746c:	f43f aeb0 	beq.w	80071d0 <_printf_float+0x98>
 8007470:	f108 0801 	add.w	r8, r8, #1
 8007474:	e7ec      	b.n	8007450 <_printf_float+0x318>
 8007476:	4613      	mov	r3, r2
 8007478:	4631      	mov	r1, r6
 800747a:	4642      	mov	r2, r8
 800747c:	4628      	mov	r0, r5
 800747e:	47b8      	blx	r7
 8007480:	3001      	adds	r0, #1
 8007482:	d1bf      	bne.n	8007404 <_printf_float+0x2cc>
 8007484:	e6a4      	b.n	80071d0 <_printf_float+0x98>
 8007486:	2301      	movs	r3, #1
 8007488:	4631      	mov	r1, r6
 800748a:	4628      	mov	r0, r5
 800748c:	9204      	str	r2, [sp, #16]
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f ae9d 	beq.w	80071d0 <_printf_float+0x98>
 8007496:	9b05      	ldr	r3, [sp, #20]
 8007498:	9a04      	ldr	r2, [sp, #16]
 800749a:	3301      	adds	r3, #1
 800749c:	9305      	str	r3, [sp, #20]
 800749e:	e7b7      	b.n	8007410 <_printf_float+0x2d8>
 80074a0:	4653      	mov	r3, sl
 80074a2:	465a      	mov	r2, fp
 80074a4:	4631      	mov	r1, r6
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b8      	blx	r7
 80074aa:	3001      	adds	r0, #1
 80074ac:	d1be      	bne.n	800742c <_printf_float+0x2f4>
 80074ae:	e68f      	b.n	80071d0 <_printf_float+0x98>
 80074b0:	9a04      	ldr	r2, [sp, #16]
 80074b2:	464b      	mov	r3, r9
 80074b4:	4442      	add	r2, r8
 80074b6:	4631      	mov	r1, r6
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b8      	blx	r7
 80074bc:	3001      	adds	r0, #1
 80074be:	d1c1      	bne.n	8007444 <_printf_float+0x30c>
 80074c0:	e686      	b.n	80071d0 <_printf_float+0x98>
 80074c2:	9a08      	ldr	r2, [sp, #32]
 80074c4:	2a01      	cmp	r2, #1
 80074c6:	dc01      	bgt.n	80074cc <_printf_float+0x394>
 80074c8:	07db      	lsls	r3, r3, #31
 80074ca:	d537      	bpl.n	800753c <_printf_float+0x404>
 80074cc:	2301      	movs	r3, #1
 80074ce:	4642      	mov	r2, r8
 80074d0:	4631      	mov	r1, r6
 80074d2:	4628      	mov	r0, r5
 80074d4:	47b8      	blx	r7
 80074d6:	3001      	adds	r0, #1
 80074d8:	f43f ae7a 	beq.w	80071d0 <_printf_float+0x98>
 80074dc:	4653      	mov	r3, sl
 80074de:	465a      	mov	r2, fp
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	f43f ae72 	beq.w	80071d0 <_printf_float+0x98>
 80074ec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80074f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f8:	9b08      	ldr	r3, [sp, #32]
 80074fa:	d01a      	beq.n	8007532 <_printf_float+0x3fa>
 80074fc:	3b01      	subs	r3, #1
 80074fe:	f108 0201 	add.w	r2, r8, #1
 8007502:	4631      	mov	r1, r6
 8007504:	4628      	mov	r0, r5
 8007506:	47b8      	blx	r7
 8007508:	3001      	adds	r0, #1
 800750a:	d10e      	bne.n	800752a <_printf_float+0x3f2>
 800750c:	e660      	b.n	80071d0 <_printf_float+0x98>
 800750e:	2301      	movs	r3, #1
 8007510:	464a      	mov	r2, r9
 8007512:	4631      	mov	r1, r6
 8007514:	4628      	mov	r0, r5
 8007516:	47b8      	blx	r7
 8007518:	3001      	adds	r0, #1
 800751a:	f43f ae59 	beq.w	80071d0 <_printf_float+0x98>
 800751e:	f108 0801 	add.w	r8, r8, #1
 8007522:	9b08      	ldr	r3, [sp, #32]
 8007524:	3b01      	subs	r3, #1
 8007526:	4543      	cmp	r3, r8
 8007528:	dcf1      	bgt.n	800750e <_printf_float+0x3d6>
 800752a:	9b04      	ldr	r3, [sp, #16]
 800752c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007530:	e6dd      	b.n	80072ee <_printf_float+0x1b6>
 8007532:	f04f 0800 	mov.w	r8, #0
 8007536:	f104 091a 	add.w	r9, r4, #26
 800753a:	e7f2      	b.n	8007522 <_printf_float+0x3ea>
 800753c:	2301      	movs	r3, #1
 800753e:	4642      	mov	r2, r8
 8007540:	e7df      	b.n	8007502 <_printf_float+0x3ca>
 8007542:	2301      	movs	r3, #1
 8007544:	464a      	mov	r2, r9
 8007546:	4631      	mov	r1, r6
 8007548:	4628      	mov	r0, r5
 800754a:	47b8      	blx	r7
 800754c:	3001      	adds	r0, #1
 800754e:	f43f ae3f 	beq.w	80071d0 <_printf_float+0x98>
 8007552:	f108 0801 	add.w	r8, r8, #1
 8007556:	68e3      	ldr	r3, [r4, #12]
 8007558:	9909      	ldr	r1, [sp, #36]	; 0x24
 800755a:	1a5b      	subs	r3, r3, r1
 800755c:	4543      	cmp	r3, r8
 800755e:	dcf0      	bgt.n	8007542 <_printf_float+0x40a>
 8007560:	e6f9      	b.n	8007356 <_printf_float+0x21e>
 8007562:	f04f 0800 	mov.w	r8, #0
 8007566:	f104 0919 	add.w	r9, r4, #25
 800756a:	e7f4      	b.n	8007556 <_printf_float+0x41e>

0800756c <_printf_common>:
 800756c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	4616      	mov	r6, r2
 8007572:	4699      	mov	r9, r3
 8007574:	688a      	ldr	r2, [r1, #8]
 8007576:	690b      	ldr	r3, [r1, #16]
 8007578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800757c:	4293      	cmp	r3, r2
 800757e:	bfb8      	it	lt
 8007580:	4613      	movlt	r3, r2
 8007582:	6033      	str	r3, [r6, #0]
 8007584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007588:	4607      	mov	r7, r0
 800758a:	460c      	mov	r4, r1
 800758c:	b10a      	cbz	r2, 8007592 <_printf_common+0x26>
 800758e:	3301      	adds	r3, #1
 8007590:	6033      	str	r3, [r6, #0]
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	0699      	lsls	r1, r3, #26
 8007596:	bf42      	ittt	mi
 8007598:	6833      	ldrmi	r3, [r6, #0]
 800759a:	3302      	addmi	r3, #2
 800759c:	6033      	strmi	r3, [r6, #0]
 800759e:	6825      	ldr	r5, [r4, #0]
 80075a0:	f015 0506 	ands.w	r5, r5, #6
 80075a4:	d106      	bne.n	80075b4 <_printf_common+0x48>
 80075a6:	f104 0a19 	add.w	sl, r4, #25
 80075aa:	68e3      	ldr	r3, [r4, #12]
 80075ac:	6832      	ldr	r2, [r6, #0]
 80075ae:	1a9b      	subs	r3, r3, r2
 80075b0:	42ab      	cmp	r3, r5
 80075b2:	dc26      	bgt.n	8007602 <_printf_common+0x96>
 80075b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80075b8:	1e13      	subs	r3, r2, #0
 80075ba:	6822      	ldr	r2, [r4, #0]
 80075bc:	bf18      	it	ne
 80075be:	2301      	movne	r3, #1
 80075c0:	0692      	lsls	r2, r2, #26
 80075c2:	d42b      	bmi.n	800761c <_printf_common+0xb0>
 80075c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075c8:	4649      	mov	r1, r9
 80075ca:	4638      	mov	r0, r7
 80075cc:	47c0      	blx	r8
 80075ce:	3001      	adds	r0, #1
 80075d0:	d01e      	beq.n	8007610 <_printf_common+0xa4>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	6922      	ldr	r2, [r4, #16]
 80075d6:	f003 0306 	and.w	r3, r3, #6
 80075da:	2b04      	cmp	r3, #4
 80075dc:	bf02      	ittt	eq
 80075de:	68e5      	ldreq	r5, [r4, #12]
 80075e0:	6833      	ldreq	r3, [r6, #0]
 80075e2:	1aed      	subeq	r5, r5, r3
 80075e4:	68a3      	ldr	r3, [r4, #8]
 80075e6:	bf0c      	ite	eq
 80075e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075ec:	2500      	movne	r5, #0
 80075ee:	4293      	cmp	r3, r2
 80075f0:	bfc4      	itt	gt
 80075f2:	1a9b      	subgt	r3, r3, r2
 80075f4:	18ed      	addgt	r5, r5, r3
 80075f6:	2600      	movs	r6, #0
 80075f8:	341a      	adds	r4, #26
 80075fa:	42b5      	cmp	r5, r6
 80075fc:	d11a      	bne.n	8007634 <_printf_common+0xc8>
 80075fe:	2000      	movs	r0, #0
 8007600:	e008      	b.n	8007614 <_printf_common+0xa8>
 8007602:	2301      	movs	r3, #1
 8007604:	4652      	mov	r2, sl
 8007606:	4649      	mov	r1, r9
 8007608:	4638      	mov	r0, r7
 800760a:	47c0      	blx	r8
 800760c:	3001      	adds	r0, #1
 800760e:	d103      	bne.n	8007618 <_printf_common+0xac>
 8007610:	f04f 30ff 	mov.w	r0, #4294967295
 8007614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007618:	3501      	adds	r5, #1
 800761a:	e7c6      	b.n	80075aa <_printf_common+0x3e>
 800761c:	18e1      	adds	r1, r4, r3
 800761e:	1c5a      	adds	r2, r3, #1
 8007620:	2030      	movs	r0, #48	; 0x30
 8007622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007626:	4422      	add	r2, r4
 8007628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800762c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007630:	3302      	adds	r3, #2
 8007632:	e7c7      	b.n	80075c4 <_printf_common+0x58>
 8007634:	2301      	movs	r3, #1
 8007636:	4622      	mov	r2, r4
 8007638:	4649      	mov	r1, r9
 800763a:	4638      	mov	r0, r7
 800763c:	47c0      	blx	r8
 800763e:	3001      	adds	r0, #1
 8007640:	d0e6      	beq.n	8007610 <_printf_common+0xa4>
 8007642:	3601      	adds	r6, #1
 8007644:	e7d9      	b.n	80075fa <_printf_common+0x8e>
	...

08007648 <_printf_i>:
 8007648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800764c:	7e0f      	ldrb	r7, [r1, #24]
 800764e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007650:	2f78      	cmp	r7, #120	; 0x78
 8007652:	4691      	mov	r9, r2
 8007654:	4680      	mov	r8, r0
 8007656:	460c      	mov	r4, r1
 8007658:	469a      	mov	sl, r3
 800765a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800765e:	d807      	bhi.n	8007670 <_printf_i+0x28>
 8007660:	2f62      	cmp	r7, #98	; 0x62
 8007662:	d80a      	bhi.n	800767a <_printf_i+0x32>
 8007664:	2f00      	cmp	r7, #0
 8007666:	f000 80d4 	beq.w	8007812 <_printf_i+0x1ca>
 800766a:	2f58      	cmp	r7, #88	; 0x58
 800766c:	f000 80c0 	beq.w	80077f0 <_printf_i+0x1a8>
 8007670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007678:	e03a      	b.n	80076f0 <_printf_i+0xa8>
 800767a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800767e:	2b15      	cmp	r3, #21
 8007680:	d8f6      	bhi.n	8007670 <_printf_i+0x28>
 8007682:	a101      	add	r1, pc, #4	; (adr r1, 8007688 <_printf_i+0x40>)
 8007684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007688:	080076e1 	.word	0x080076e1
 800768c:	080076f5 	.word	0x080076f5
 8007690:	08007671 	.word	0x08007671
 8007694:	08007671 	.word	0x08007671
 8007698:	08007671 	.word	0x08007671
 800769c:	08007671 	.word	0x08007671
 80076a0:	080076f5 	.word	0x080076f5
 80076a4:	08007671 	.word	0x08007671
 80076a8:	08007671 	.word	0x08007671
 80076ac:	08007671 	.word	0x08007671
 80076b0:	08007671 	.word	0x08007671
 80076b4:	080077f9 	.word	0x080077f9
 80076b8:	08007721 	.word	0x08007721
 80076bc:	080077b3 	.word	0x080077b3
 80076c0:	08007671 	.word	0x08007671
 80076c4:	08007671 	.word	0x08007671
 80076c8:	0800781b 	.word	0x0800781b
 80076cc:	08007671 	.word	0x08007671
 80076d0:	08007721 	.word	0x08007721
 80076d4:	08007671 	.word	0x08007671
 80076d8:	08007671 	.word	0x08007671
 80076dc:	080077bb 	.word	0x080077bb
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	1d1a      	adds	r2, r3, #4
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	602a      	str	r2, [r5, #0]
 80076e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076f0:	2301      	movs	r3, #1
 80076f2:	e09f      	b.n	8007834 <_printf_i+0x1ec>
 80076f4:	6820      	ldr	r0, [r4, #0]
 80076f6:	682b      	ldr	r3, [r5, #0]
 80076f8:	0607      	lsls	r7, r0, #24
 80076fa:	f103 0104 	add.w	r1, r3, #4
 80076fe:	6029      	str	r1, [r5, #0]
 8007700:	d501      	bpl.n	8007706 <_printf_i+0xbe>
 8007702:	681e      	ldr	r6, [r3, #0]
 8007704:	e003      	b.n	800770e <_printf_i+0xc6>
 8007706:	0646      	lsls	r6, r0, #25
 8007708:	d5fb      	bpl.n	8007702 <_printf_i+0xba>
 800770a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800770e:	2e00      	cmp	r6, #0
 8007710:	da03      	bge.n	800771a <_printf_i+0xd2>
 8007712:	232d      	movs	r3, #45	; 0x2d
 8007714:	4276      	negs	r6, r6
 8007716:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800771a:	485a      	ldr	r0, [pc, #360]	; (8007884 <_printf_i+0x23c>)
 800771c:	230a      	movs	r3, #10
 800771e:	e012      	b.n	8007746 <_printf_i+0xfe>
 8007720:	682b      	ldr	r3, [r5, #0]
 8007722:	6820      	ldr	r0, [r4, #0]
 8007724:	1d19      	adds	r1, r3, #4
 8007726:	6029      	str	r1, [r5, #0]
 8007728:	0605      	lsls	r5, r0, #24
 800772a:	d501      	bpl.n	8007730 <_printf_i+0xe8>
 800772c:	681e      	ldr	r6, [r3, #0]
 800772e:	e002      	b.n	8007736 <_printf_i+0xee>
 8007730:	0641      	lsls	r1, r0, #25
 8007732:	d5fb      	bpl.n	800772c <_printf_i+0xe4>
 8007734:	881e      	ldrh	r6, [r3, #0]
 8007736:	4853      	ldr	r0, [pc, #332]	; (8007884 <_printf_i+0x23c>)
 8007738:	2f6f      	cmp	r7, #111	; 0x6f
 800773a:	bf0c      	ite	eq
 800773c:	2308      	moveq	r3, #8
 800773e:	230a      	movne	r3, #10
 8007740:	2100      	movs	r1, #0
 8007742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007746:	6865      	ldr	r5, [r4, #4]
 8007748:	60a5      	str	r5, [r4, #8]
 800774a:	2d00      	cmp	r5, #0
 800774c:	bfa2      	ittt	ge
 800774e:	6821      	ldrge	r1, [r4, #0]
 8007750:	f021 0104 	bicge.w	r1, r1, #4
 8007754:	6021      	strge	r1, [r4, #0]
 8007756:	b90e      	cbnz	r6, 800775c <_printf_i+0x114>
 8007758:	2d00      	cmp	r5, #0
 800775a:	d04b      	beq.n	80077f4 <_printf_i+0x1ac>
 800775c:	4615      	mov	r5, r2
 800775e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007762:	fb03 6711 	mls	r7, r3, r1, r6
 8007766:	5dc7      	ldrb	r7, [r0, r7]
 8007768:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800776c:	4637      	mov	r7, r6
 800776e:	42bb      	cmp	r3, r7
 8007770:	460e      	mov	r6, r1
 8007772:	d9f4      	bls.n	800775e <_printf_i+0x116>
 8007774:	2b08      	cmp	r3, #8
 8007776:	d10b      	bne.n	8007790 <_printf_i+0x148>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	07de      	lsls	r6, r3, #31
 800777c:	d508      	bpl.n	8007790 <_printf_i+0x148>
 800777e:	6923      	ldr	r3, [r4, #16]
 8007780:	6861      	ldr	r1, [r4, #4]
 8007782:	4299      	cmp	r1, r3
 8007784:	bfde      	ittt	le
 8007786:	2330      	movle	r3, #48	; 0x30
 8007788:	f805 3c01 	strble.w	r3, [r5, #-1]
 800778c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007790:	1b52      	subs	r2, r2, r5
 8007792:	6122      	str	r2, [r4, #16]
 8007794:	f8cd a000 	str.w	sl, [sp]
 8007798:	464b      	mov	r3, r9
 800779a:	aa03      	add	r2, sp, #12
 800779c:	4621      	mov	r1, r4
 800779e:	4640      	mov	r0, r8
 80077a0:	f7ff fee4 	bl	800756c <_printf_common>
 80077a4:	3001      	adds	r0, #1
 80077a6:	d14a      	bne.n	800783e <_printf_i+0x1f6>
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	b004      	add	sp, #16
 80077ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b2:	6823      	ldr	r3, [r4, #0]
 80077b4:	f043 0320 	orr.w	r3, r3, #32
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	4833      	ldr	r0, [pc, #204]	; (8007888 <_printf_i+0x240>)
 80077bc:	2778      	movs	r7, #120	; 0x78
 80077be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	6829      	ldr	r1, [r5, #0]
 80077c6:	061f      	lsls	r7, r3, #24
 80077c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80077cc:	d402      	bmi.n	80077d4 <_printf_i+0x18c>
 80077ce:	065f      	lsls	r7, r3, #25
 80077d0:	bf48      	it	mi
 80077d2:	b2b6      	uxthmi	r6, r6
 80077d4:	07df      	lsls	r7, r3, #31
 80077d6:	bf48      	it	mi
 80077d8:	f043 0320 	orrmi.w	r3, r3, #32
 80077dc:	6029      	str	r1, [r5, #0]
 80077de:	bf48      	it	mi
 80077e0:	6023      	strmi	r3, [r4, #0]
 80077e2:	b91e      	cbnz	r6, 80077ec <_printf_i+0x1a4>
 80077e4:	6823      	ldr	r3, [r4, #0]
 80077e6:	f023 0320 	bic.w	r3, r3, #32
 80077ea:	6023      	str	r3, [r4, #0]
 80077ec:	2310      	movs	r3, #16
 80077ee:	e7a7      	b.n	8007740 <_printf_i+0xf8>
 80077f0:	4824      	ldr	r0, [pc, #144]	; (8007884 <_printf_i+0x23c>)
 80077f2:	e7e4      	b.n	80077be <_printf_i+0x176>
 80077f4:	4615      	mov	r5, r2
 80077f6:	e7bd      	b.n	8007774 <_printf_i+0x12c>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	6826      	ldr	r6, [r4, #0]
 80077fc:	6961      	ldr	r1, [r4, #20]
 80077fe:	1d18      	adds	r0, r3, #4
 8007800:	6028      	str	r0, [r5, #0]
 8007802:	0635      	lsls	r5, r6, #24
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	d501      	bpl.n	800780c <_printf_i+0x1c4>
 8007808:	6019      	str	r1, [r3, #0]
 800780a:	e002      	b.n	8007812 <_printf_i+0x1ca>
 800780c:	0670      	lsls	r0, r6, #25
 800780e:	d5fb      	bpl.n	8007808 <_printf_i+0x1c0>
 8007810:	8019      	strh	r1, [r3, #0]
 8007812:	2300      	movs	r3, #0
 8007814:	6123      	str	r3, [r4, #16]
 8007816:	4615      	mov	r5, r2
 8007818:	e7bc      	b.n	8007794 <_printf_i+0x14c>
 800781a:	682b      	ldr	r3, [r5, #0]
 800781c:	1d1a      	adds	r2, r3, #4
 800781e:	602a      	str	r2, [r5, #0]
 8007820:	681d      	ldr	r5, [r3, #0]
 8007822:	6862      	ldr	r2, [r4, #4]
 8007824:	2100      	movs	r1, #0
 8007826:	4628      	mov	r0, r5
 8007828:	f7f8 fd0a 	bl	8000240 <memchr>
 800782c:	b108      	cbz	r0, 8007832 <_printf_i+0x1ea>
 800782e:	1b40      	subs	r0, r0, r5
 8007830:	6060      	str	r0, [r4, #4]
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	2300      	movs	r3, #0
 8007838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800783c:	e7aa      	b.n	8007794 <_printf_i+0x14c>
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	462a      	mov	r2, r5
 8007842:	4649      	mov	r1, r9
 8007844:	4640      	mov	r0, r8
 8007846:	47d0      	blx	sl
 8007848:	3001      	adds	r0, #1
 800784a:	d0ad      	beq.n	80077a8 <_printf_i+0x160>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	079b      	lsls	r3, r3, #30
 8007850:	d413      	bmi.n	800787a <_printf_i+0x232>
 8007852:	68e0      	ldr	r0, [r4, #12]
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	4298      	cmp	r0, r3
 8007858:	bfb8      	it	lt
 800785a:	4618      	movlt	r0, r3
 800785c:	e7a6      	b.n	80077ac <_printf_i+0x164>
 800785e:	2301      	movs	r3, #1
 8007860:	4632      	mov	r2, r6
 8007862:	4649      	mov	r1, r9
 8007864:	4640      	mov	r0, r8
 8007866:	47d0      	blx	sl
 8007868:	3001      	adds	r0, #1
 800786a:	d09d      	beq.n	80077a8 <_printf_i+0x160>
 800786c:	3501      	adds	r5, #1
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	9903      	ldr	r1, [sp, #12]
 8007872:	1a5b      	subs	r3, r3, r1
 8007874:	42ab      	cmp	r3, r5
 8007876:	dcf2      	bgt.n	800785e <_printf_i+0x216>
 8007878:	e7eb      	b.n	8007852 <_printf_i+0x20a>
 800787a:	2500      	movs	r5, #0
 800787c:	f104 0619 	add.w	r6, r4, #25
 8007880:	e7f5      	b.n	800786e <_printf_i+0x226>
 8007882:	bf00      	nop
 8007884:	0809fe42 	.word	0x0809fe42
 8007888:	0809fe53 	.word	0x0809fe53

0800788c <std>:
 800788c:	2300      	movs	r3, #0
 800788e:	b510      	push	{r4, lr}
 8007890:	4604      	mov	r4, r0
 8007892:	e9c0 3300 	strd	r3, r3, [r0]
 8007896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800789a:	6083      	str	r3, [r0, #8]
 800789c:	8181      	strh	r1, [r0, #12]
 800789e:	6643      	str	r3, [r0, #100]	; 0x64
 80078a0:	81c2      	strh	r2, [r0, #14]
 80078a2:	6183      	str	r3, [r0, #24]
 80078a4:	4619      	mov	r1, r3
 80078a6:	2208      	movs	r2, #8
 80078a8:	305c      	adds	r0, #92	; 0x5c
 80078aa:	f000 f902 	bl	8007ab2 <memset>
 80078ae:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <std+0x38>)
 80078b0:	6263      	str	r3, [r4, #36]	; 0x24
 80078b2:	4b05      	ldr	r3, [pc, #20]	; (80078c8 <std+0x3c>)
 80078b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80078b6:	4b05      	ldr	r3, [pc, #20]	; (80078cc <std+0x40>)
 80078b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80078ba:	4b05      	ldr	r3, [pc, #20]	; (80078d0 <std+0x44>)
 80078bc:	6224      	str	r4, [r4, #32]
 80078be:	6323      	str	r3, [r4, #48]	; 0x30
 80078c0:	bd10      	pop	{r4, pc}
 80078c2:	bf00      	nop
 80078c4:	08007a2d 	.word	0x08007a2d
 80078c8:	08007a4f 	.word	0x08007a4f
 80078cc:	08007a87 	.word	0x08007a87
 80078d0:	08007aab 	.word	0x08007aab

080078d4 <stdio_exit_handler>:
 80078d4:	4a02      	ldr	r2, [pc, #8]	; (80078e0 <stdio_exit_handler+0xc>)
 80078d6:	4903      	ldr	r1, [pc, #12]	; (80078e4 <stdio_exit_handler+0x10>)
 80078d8:	4803      	ldr	r0, [pc, #12]	; (80078e8 <stdio_exit_handler+0x14>)
 80078da:	f000 b869 	b.w	80079b0 <_fwalk_sglue>
 80078de:	bf00      	nop
 80078e0:	2000001c 	.word	0x2000001c
 80078e4:	0800944d 	.word	0x0800944d
 80078e8:	20000028 	.word	0x20000028

080078ec <cleanup_stdio>:
 80078ec:	6841      	ldr	r1, [r0, #4]
 80078ee:	4b0c      	ldr	r3, [pc, #48]	; (8007920 <cleanup_stdio+0x34>)
 80078f0:	4299      	cmp	r1, r3
 80078f2:	b510      	push	{r4, lr}
 80078f4:	4604      	mov	r4, r0
 80078f6:	d001      	beq.n	80078fc <cleanup_stdio+0x10>
 80078f8:	f001 fda8 	bl	800944c <_fflush_r>
 80078fc:	68a1      	ldr	r1, [r4, #8]
 80078fe:	4b09      	ldr	r3, [pc, #36]	; (8007924 <cleanup_stdio+0x38>)
 8007900:	4299      	cmp	r1, r3
 8007902:	d002      	beq.n	800790a <cleanup_stdio+0x1e>
 8007904:	4620      	mov	r0, r4
 8007906:	f001 fda1 	bl	800944c <_fflush_r>
 800790a:	68e1      	ldr	r1, [r4, #12]
 800790c:	4b06      	ldr	r3, [pc, #24]	; (8007928 <cleanup_stdio+0x3c>)
 800790e:	4299      	cmp	r1, r3
 8007910:	d004      	beq.n	800791c <cleanup_stdio+0x30>
 8007912:	4620      	mov	r0, r4
 8007914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007918:	f001 bd98 	b.w	800944c <_fflush_r>
 800791c:	bd10      	pop	{r4, pc}
 800791e:	bf00      	nop
 8007920:	200004f4 	.word	0x200004f4
 8007924:	2000055c 	.word	0x2000055c
 8007928:	200005c4 	.word	0x200005c4

0800792c <global_stdio_init.part.0>:
 800792c:	b510      	push	{r4, lr}
 800792e:	4b0b      	ldr	r3, [pc, #44]	; (800795c <global_stdio_init.part.0+0x30>)
 8007930:	4c0b      	ldr	r4, [pc, #44]	; (8007960 <global_stdio_init.part.0+0x34>)
 8007932:	4a0c      	ldr	r2, [pc, #48]	; (8007964 <global_stdio_init.part.0+0x38>)
 8007934:	601a      	str	r2, [r3, #0]
 8007936:	4620      	mov	r0, r4
 8007938:	2200      	movs	r2, #0
 800793a:	2104      	movs	r1, #4
 800793c:	f7ff ffa6 	bl	800788c <std>
 8007940:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007944:	2201      	movs	r2, #1
 8007946:	2109      	movs	r1, #9
 8007948:	f7ff ffa0 	bl	800788c <std>
 800794c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007950:	2202      	movs	r2, #2
 8007952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007956:	2112      	movs	r1, #18
 8007958:	f7ff bf98 	b.w	800788c <std>
 800795c:	2000062c 	.word	0x2000062c
 8007960:	200004f4 	.word	0x200004f4
 8007964:	080078d5 	.word	0x080078d5

08007968 <__sfp_lock_acquire>:
 8007968:	4801      	ldr	r0, [pc, #4]	; (8007970 <__sfp_lock_acquire+0x8>)
 800796a:	f000 b91f 	b.w	8007bac <__retarget_lock_acquire_recursive>
 800796e:	bf00      	nop
 8007970:	20000635 	.word	0x20000635

08007974 <__sfp_lock_release>:
 8007974:	4801      	ldr	r0, [pc, #4]	; (800797c <__sfp_lock_release+0x8>)
 8007976:	f000 b91a 	b.w	8007bae <__retarget_lock_release_recursive>
 800797a:	bf00      	nop
 800797c:	20000635 	.word	0x20000635

08007980 <__sinit>:
 8007980:	b510      	push	{r4, lr}
 8007982:	4604      	mov	r4, r0
 8007984:	f7ff fff0 	bl	8007968 <__sfp_lock_acquire>
 8007988:	6a23      	ldr	r3, [r4, #32]
 800798a:	b11b      	cbz	r3, 8007994 <__sinit+0x14>
 800798c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007990:	f7ff bff0 	b.w	8007974 <__sfp_lock_release>
 8007994:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <__sinit+0x28>)
 8007996:	6223      	str	r3, [r4, #32]
 8007998:	4b04      	ldr	r3, [pc, #16]	; (80079ac <__sinit+0x2c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f5      	bne.n	800798c <__sinit+0xc>
 80079a0:	f7ff ffc4 	bl	800792c <global_stdio_init.part.0>
 80079a4:	e7f2      	b.n	800798c <__sinit+0xc>
 80079a6:	bf00      	nop
 80079a8:	080078ed 	.word	0x080078ed
 80079ac:	2000062c 	.word	0x2000062c

080079b0 <_fwalk_sglue>:
 80079b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079b4:	4607      	mov	r7, r0
 80079b6:	4688      	mov	r8, r1
 80079b8:	4614      	mov	r4, r2
 80079ba:	2600      	movs	r6, #0
 80079bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80079c0:	f1b9 0901 	subs.w	r9, r9, #1
 80079c4:	d505      	bpl.n	80079d2 <_fwalk_sglue+0x22>
 80079c6:	6824      	ldr	r4, [r4, #0]
 80079c8:	2c00      	cmp	r4, #0
 80079ca:	d1f7      	bne.n	80079bc <_fwalk_sglue+0xc>
 80079cc:	4630      	mov	r0, r6
 80079ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079d2:	89ab      	ldrh	r3, [r5, #12]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d907      	bls.n	80079e8 <_fwalk_sglue+0x38>
 80079d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80079dc:	3301      	adds	r3, #1
 80079de:	d003      	beq.n	80079e8 <_fwalk_sglue+0x38>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4638      	mov	r0, r7
 80079e4:	47c0      	blx	r8
 80079e6:	4306      	orrs	r6, r0
 80079e8:	3568      	adds	r5, #104	; 0x68
 80079ea:	e7e9      	b.n	80079c0 <_fwalk_sglue+0x10>

080079ec <siprintf>:
 80079ec:	b40e      	push	{r1, r2, r3}
 80079ee:	b500      	push	{lr}
 80079f0:	b09c      	sub	sp, #112	; 0x70
 80079f2:	ab1d      	add	r3, sp, #116	; 0x74
 80079f4:	9002      	str	r0, [sp, #8]
 80079f6:	9006      	str	r0, [sp, #24]
 80079f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079fc:	4809      	ldr	r0, [pc, #36]	; (8007a24 <siprintf+0x38>)
 80079fe:	9107      	str	r1, [sp, #28]
 8007a00:	9104      	str	r1, [sp, #16]
 8007a02:	4909      	ldr	r1, [pc, #36]	; (8007a28 <siprintf+0x3c>)
 8007a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a08:	9105      	str	r1, [sp, #20]
 8007a0a:	6800      	ldr	r0, [r0, #0]
 8007a0c:	9301      	str	r3, [sp, #4]
 8007a0e:	a902      	add	r1, sp, #8
 8007a10:	f001 fb98 	bl	8009144 <_svfiprintf_r>
 8007a14:	9b02      	ldr	r3, [sp, #8]
 8007a16:	2200      	movs	r2, #0
 8007a18:	701a      	strb	r2, [r3, #0]
 8007a1a:	b01c      	add	sp, #112	; 0x70
 8007a1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a20:	b003      	add	sp, #12
 8007a22:	4770      	bx	lr
 8007a24:	20000074 	.word	0x20000074
 8007a28:	ffff0208 	.word	0xffff0208

08007a2c <__sread>:
 8007a2c:	b510      	push	{r4, lr}
 8007a2e:	460c      	mov	r4, r1
 8007a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a34:	f000 f86c 	bl	8007b10 <_read_r>
 8007a38:	2800      	cmp	r0, #0
 8007a3a:	bfab      	itete	ge
 8007a3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8007a40:	181b      	addge	r3, r3, r0
 8007a42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007a46:	bfac      	ite	ge
 8007a48:	6563      	strge	r3, [r4, #84]	; 0x54
 8007a4a:	81a3      	strhlt	r3, [r4, #12]
 8007a4c:	bd10      	pop	{r4, pc}

08007a4e <__swrite>:
 8007a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a52:	461f      	mov	r7, r3
 8007a54:	898b      	ldrh	r3, [r1, #12]
 8007a56:	05db      	lsls	r3, r3, #23
 8007a58:	4605      	mov	r5, r0
 8007a5a:	460c      	mov	r4, r1
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	d505      	bpl.n	8007a6c <__swrite+0x1e>
 8007a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a64:	2302      	movs	r3, #2
 8007a66:	2200      	movs	r2, #0
 8007a68:	f000 f840 	bl	8007aec <_lseek_r>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a76:	81a3      	strh	r3, [r4, #12]
 8007a78:	4632      	mov	r2, r6
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a82:	f000 b857 	b.w	8007b34 <_write_r>

08007a86 <__sseek>:
 8007a86:	b510      	push	{r4, lr}
 8007a88:	460c      	mov	r4, r1
 8007a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a8e:	f000 f82d 	bl	8007aec <_lseek_r>
 8007a92:	1c43      	adds	r3, r0, #1
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	bf15      	itete	ne
 8007a98:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007aa2:	81a3      	strheq	r3, [r4, #12]
 8007aa4:	bf18      	it	ne
 8007aa6:	81a3      	strhne	r3, [r4, #12]
 8007aa8:	bd10      	pop	{r4, pc}

08007aaa <__sclose>:
 8007aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aae:	f000 b80d 	b.w	8007acc <_close_r>

08007ab2 <memset>:
 8007ab2:	4402      	add	r2, r0
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d100      	bne.n	8007abc <memset+0xa>
 8007aba:	4770      	bx	lr
 8007abc:	f803 1b01 	strb.w	r1, [r3], #1
 8007ac0:	e7f9      	b.n	8007ab6 <memset+0x4>
	...

08007ac4 <_localeconv_r>:
 8007ac4:	4800      	ldr	r0, [pc, #0]	; (8007ac8 <_localeconv_r+0x4>)
 8007ac6:	4770      	bx	lr
 8007ac8:	20000168 	.word	0x20000168

08007acc <_close_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4d06      	ldr	r5, [pc, #24]	; (8007ae8 <_close_r+0x1c>)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	602b      	str	r3, [r5, #0]
 8007ad8:	f7f9 fca1 	bl	800141e <_close>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_close_r+0x1a>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_close_r+0x1a>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	20000630 	.word	0x20000630

08007aec <_lseek_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	4d07      	ldr	r5, [pc, #28]	; (8007b0c <_lseek_r+0x20>)
 8007af0:	4604      	mov	r4, r0
 8007af2:	4608      	mov	r0, r1
 8007af4:	4611      	mov	r1, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	602a      	str	r2, [r5, #0]
 8007afa:	461a      	mov	r2, r3
 8007afc:	f7f9 fcb6 	bl	800146c <_lseek>
 8007b00:	1c43      	adds	r3, r0, #1
 8007b02:	d102      	bne.n	8007b0a <_lseek_r+0x1e>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	b103      	cbz	r3, 8007b0a <_lseek_r+0x1e>
 8007b08:	6023      	str	r3, [r4, #0]
 8007b0a:	bd38      	pop	{r3, r4, r5, pc}
 8007b0c:	20000630 	.word	0x20000630

08007b10 <_read_r>:
 8007b10:	b538      	push	{r3, r4, r5, lr}
 8007b12:	4d07      	ldr	r5, [pc, #28]	; (8007b30 <_read_r+0x20>)
 8007b14:	4604      	mov	r4, r0
 8007b16:	4608      	mov	r0, r1
 8007b18:	4611      	mov	r1, r2
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	602a      	str	r2, [r5, #0]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f7f9 fc44 	bl	80013ac <_read>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d102      	bne.n	8007b2e <_read_r+0x1e>
 8007b28:	682b      	ldr	r3, [r5, #0]
 8007b2a:	b103      	cbz	r3, 8007b2e <_read_r+0x1e>
 8007b2c:	6023      	str	r3, [r4, #0]
 8007b2e:	bd38      	pop	{r3, r4, r5, pc}
 8007b30:	20000630 	.word	0x20000630

08007b34 <_write_r>:
 8007b34:	b538      	push	{r3, r4, r5, lr}
 8007b36:	4d07      	ldr	r5, [pc, #28]	; (8007b54 <_write_r+0x20>)
 8007b38:	4604      	mov	r4, r0
 8007b3a:	4608      	mov	r0, r1
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	2200      	movs	r2, #0
 8007b40:	602a      	str	r2, [r5, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f7f9 fc4f 	bl	80013e6 <_write>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_write_r+0x1e>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_write_r+0x1e>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	20000630 	.word	0x20000630

08007b58 <__errno>:
 8007b58:	4b01      	ldr	r3, [pc, #4]	; (8007b60 <__errno+0x8>)
 8007b5a:	6818      	ldr	r0, [r3, #0]
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop
 8007b60:	20000074 	.word	0x20000074

08007b64 <__libc_init_array>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	4d0d      	ldr	r5, [pc, #52]	; (8007b9c <__libc_init_array+0x38>)
 8007b68:	4c0d      	ldr	r4, [pc, #52]	; (8007ba0 <__libc_init_array+0x3c>)
 8007b6a:	1b64      	subs	r4, r4, r5
 8007b6c:	10a4      	asrs	r4, r4, #2
 8007b6e:	2600      	movs	r6, #0
 8007b70:	42a6      	cmp	r6, r4
 8007b72:	d109      	bne.n	8007b88 <__libc_init_array+0x24>
 8007b74:	4d0b      	ldr	r5, [pc, #44]	; (8007ba4 <__libc_init_array+0x40>)
 8007b76:	4c0c      	ldr	r4, [pc, #48]	; (8007ba8 <__libc_init_array+0x44>)
 8007b78:	f002 f80c 	bl	8009b94 <_init>
 8007b7c:	1b64      	subs	r4, r4, r5
 8007b7e:	10a4      	asrs	r4, r4, #2
 8007b80:	2600      	movs	r6, #0
 8007b82:	42a6      	cmp	r6, r4
 8007b84:	d105      	bne.n	8007b92 <__libc_init_array+0x2e>
 8007b86:	bd70      	pop	{r4, r5, r6, pc}
 8007b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b8c:	4798      	blx	r3
 8007b8e:	3601      	adds	r6, #1
 8007b90:	e7ee      	b.n	8007b70 <__libc_init_array+0xc>
 8007b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b96:	4798      	blx	r3
 8007b98:	3601      	adds	r6, #1
 8007b9a:	e7f2      	b.n	8007b82 <__libc_init_array+0x1e>
 8007b9c:	080a01ac 	.word	0x080a01ac
 8007ba0:	080a01ac 	.word	0x080a01ac
 8007ba4:	080a01ac 	.word	0x080a01ac
 8007ba8:	080a01b0 	.word	0x080a01b0

08007bac <__retarget_lock_acquire_recursive>:
 8007bac:	4770      	bx	lr

08007bae <__retarget_lock_release_recursive>:
 8007bae:	4770      	bx	lr

08007bb0 <quorem>:
 8007bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	6903      	ldr	r3, [r0, #16]
 8007bb6:	690c      	ldr	r4, [r1, #16]
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	4607      	mov	r7, r0
 8007bbc:	db7e      	blt.n	8007cbc <quorem+0x10c>
 8007bbe:	3c01      	subs	r4, #1
 8007bc0:	f101 0814 	add.w	r8, r1, #20
 8007bc4:	f100 0514 	add.w	r5, r0, #20
 8007bc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007be2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007be6:	d331      	bcc.n	8007c4c <quorem+0x9c>
 8007be8:	f04f 0e00 	mov.w	lr, #0
 8007bec:	4640      	mov	r0, r8
 8007bee:	46ac      	mov	ip, r5
 8007bf0:	46f2      	mov	sl, lr
 8007bf2:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bf6:	b293      	uxth	r3, r2
 8007bf8:	fb06 e303 	mla	r3, r6, r3, lr
 8007bfc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c00:	0c1a      	lsrs	r2, r3, #16
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ebaa 0303 	sub.w	r3, sl, r3
 8007c08:	f8dc a000 	ldr.w	sl, [ip]
 8007c0c:	fa13 f38a 	uxtah	r3, r3, sl
 8007c10:	fb06 220e 	mla	r2, r6, lr, r2
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	9b00      	ldr	r3, [sp, #0]
 8007c18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c1c:	b292      	uxth	r2, r2
 8007c1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c26:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c2a:	4581      	cmp	r9, r0
 8007c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c30:	f84c 3b04 	str.w	r3, [ip], #4
 8007c34:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c38:	d2db      	bcs.n	8007bf2 <quorem+0x42>
 8007c3a:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c3e:	b92b      	cbnz	r3, 8007c4c <quorem+0x9c>
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	3b04      	subs	r3, #4
 8007c44:	429d      	cmp	r5, r3
 8007c46:	461a      	mov	r2, r3
 8007c48:	d32c      	bcc.n	8007ca4 <quorem+0xf4>
 8007c4a:	613c      	str	r4, [r7, #16]
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	f001 f91f 	bl	8008e90 <__mcmp>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	db22      	blt.n	8007c9c <quorem+0xec>
 8007c56:	3601      	adds	r6, #1
 8007c58:	4629      	mov	r1, r5
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c60:	f8d1 c000 	ldr.w	ip, [r1]
 8007c64:	b293      	uxth	r3, r2
 8007c66:	1ac3      	subs	r3, r0, r3
 8007c68:	0c12      	lsrs	r2, r2, #16
 8007c6a:	fa13 f38c 	uxtah	r3, r3, ip
 8007c6e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007c72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c7c:	45c1      	cmp	r9, r8
 8007c7e:	f841 3b04 	str.w	r3, [r1], #4
 8007c82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c86:	d2e9      	bcs.n	8007c5c <quorem+0xac>
 8007c88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c90:	b922      	cbnz	r2, 8007c9c <quorem+0xec>
 8007c92:	3b04      	subs	r3, #4
 8007c94:	429d      	cmp	r5, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	d30a      	bcc.n	8007cb0 <quorem+0x100>
 8007c9a:	613c      	str	r4, [r7, #16]
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	b003      	add	sp, #12
 8007ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	3b04      	subs	r3, #4
 8007ca8:	2a00      	cmp	r2, #0
 8007caa:	d1ce      	bne.n	8007c4a <quorem+0x9a>
 8007cac:	3c01      	subs	r4, #1
 8007cae:	e7c9      	b.n	8007c44 <quorem+0x94>
 8007cb0:	6812      	ldr	r2, [r2, #0]
 8007cb2:	3b04      	subs	r3, #4
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	d1f0      	bne.n	8007c9a <quorem+0xea>
 8007cb8:	3c01      	subs	r4, #1
 8007cba:	e7eb      	b.n	8007c94 <quorem+0xe4>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	e7ee      	b.n	8007c9e <quorem+0xee>

08007cc0 <_dtoa_r>:
 8007cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc4:	ed2d 8b02 	vpush	{d8}
 8007cc8:	69c5      	ldr	r5, [r0, #28]
 8007cca:	b091      	sub	sp, #68	; 0x44
 8007ccc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007cd0:	ec59 8b10 	vmov	r8, r9, d0
 8007cd4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8007cd6:	9106      	str	r1, [sp, #24]
 8007cd8:	4606      	mov	r6, r0
 8007cda:	9208      	str	r2, [sp, #32]
 8007cdc:	930c      	str	r3, [sp, #48]	; 0x30
 8007cde:	b975      	cbnz	r5, 8007cfe <_dtoa_r+0x3e>
 8007ce0:	2010      	movs	r0, #16
 8007ce2:	f000 fda5 	bl	8008830 <malloc>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	61f0      	str	r0, [r6, #28]
 8007cea:	b920      	cbnz	r0, 8007cf6 <_dtoa_r+0x36>
 8007cec:	4ba6      	ldr	r3, [pc, #664]	; (8007f88 <_dtoa_r+0x2c8>)
 8007cee:	21ef      	movs	r1, #239	; 0xef
 8007cf0:	48a6      	ldr	r0, [pc, #664]	; (8007f8c <_dtoa_r+0x2cc>)
 8007cf2:	f001 fc0b 	bl	800950c <__assert_func>
 8007cf6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cfa:	6005      	str	r5, [r0, #0]
 8007cfc:	60c5      	str	r5, [r0, #12]
 8007cfe:	69f3      	ldr	r3, [r6, #28]
 8007d00:	6819      	ldr	r1, [r3, #0]
 8007d02:	b151      	cbz	r1, 8007d1a <_dtoa_r+0x5a>
 8007d04:	685a      	ldr	r2, [r3, #4]
 8007d06:	604a      	str	r2, [r1, #4]
 8007d08:	2301      	movs	r3, #1
 8007d0a:	4093      	lsls	r3, r2
 8007d0c:	608b      	str	r3, [r1, #8]
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f000 fe82 	bl	8008a18 <_Bfree>
 8007d14:	69f3      	ldr	r3, [r6, #28]
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
 8007d1a:	f1b9 0300 	subs.w	r3, r9, #0
 8007d1e:	bfbb      	ittet	lt
 8007d20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d24:	9303      	strlt	r3, [sp, #12]
 8007d26:	2300      	movge	r3, #0
 8007d28:	2201      	movlt	r2, #1
 8007d2a:	bfac      	ite	ge
 8007d2c:	6023      	strge	r3, [r4, #0]
 8007d2e:	6022      	strlt	r2, [r4, #0]
 8007d30:	4b97      	ldr	r3, [pc, #604]	; (8007f90 <_dtoa_r+0x2d0>)
 8007d32:	9c03      	ldr	r4, [sp, #12]
 8007d34:	43a3      	bics	r3, r4
 8007d36:	d11c      	bne.n	8007d72 <_dtoa_r+0xb2>
 8007d38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d3a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d3e:	6013      	str	r3, [r2, #0]
 8007d40:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007d44:	ea53 0308 	orrs.w	r3, r3, r8
 8007d48:	f000 84fb 	beq.w	8008742 <_dtoa_r+0xa82>
 8007d4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d4e:	b963      	cbnz	r3, 8007d6a <_dtoa_r+0xaa>
 8007d50:	4b90      	ldr	r3, [pc, #576]	; (8007f94 <_dtoa_r+0x2d4>)
 8007d52:	e020      	b.n	8007d96 <_dtoa_r+0xd6>
 8007d54:	4b90      	ldr	r3, [pc, #576]	; (8007f98 <_dtoa_r+0x2d8>)
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	3308      	adds	r3, #8
 8007d5a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	9801      	ldr	r0, [sp, #4]
 8007d60:	b011      	add	sp, #68	; 0x44
 8007d62:	ecbd 8b02 	vpop	{d8}
 8007d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d6a:	4b8a      	ldr	r3, [pc, #552]	; (8007f94 <_dtoa_r+0x2d4>)
 8007d6c:	9301      	str	r3, [sp, #4]
 8007d6e:	3303      	adds	r3, #3
 8007d70:	e7f3      	b.n	8007d5a <_dtoa_r+0x9a>
 8007d72:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007d76:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7e:	d10c      	bne.n	8007d9a <_dtoa_r+0xda>
 8007d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d82:	2301      	movs	r3, #1
 8007d84:	6013      	str	r3, [r2, #0]
 8007d86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f000 84d7 	beq.w	800873c <_dtoa_r+0xa7c>
 8007d8e:	4b83      	ldr	r3, [pc, #524]	; (8007f9c <_dtoa_r+0x2dc>)
 8007d90:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007d92:	6013      	str	r3, [r2, #0]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	e7e1      	b.n	8007d5e <_dtoa_r+0x9e>
 8007d9a:	aa0e      	add	r2, sp, #56	; 0x38
 8007d9c:	a90f      	add	r1, sp, #60	; 0x3c
 8007d9e:	4630      	mov	r0, r6
 8007da0:	eeb0 0b48 	vmov.f64	d0, d8
 8007da4:	f001 f91a 	bl	8008fdc <__d2b>
 8007da8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8007dac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007dae:	4605      	mov	r5, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d046      	beq.n	8007e42 <_dtoa_r+0x182>
 8007db4:	eeb0 7b48 	vmov.f64	d7, d8
 8007db8:	ee18 1a90 	vmov	r1, s17
 8007dbc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007dc0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007dc4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007dc8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007dcc:	2000      	movs	r0, #0
 8007dce:	ee07 1a90 	vmov	s15, r1
 8007dd2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8007dd6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007f70 <_dtoa_r+0x2b0>
 8007dda:	ee37 7b46 	vsub.f64	d7, d7, d6
 8007dde:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007f78 <_dtoa_r+0x2b8>
 8007de2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007de6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8007f80 <_dtoa_r+0x2c0>
 8007dea:	ee07 3a90 	vmov	s15, r3
 8007dee:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007df2:	eeb0 7b46 	vmov.f64	d7, d6
 8007df6:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007dfa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007dfe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e06:	ee16 ba90 	vmov	fp, s13
 8007e0a:	9009      	str	r0, [sp, #36]	; 0x24
 8007e0c:	d508      	bpl.n	8007e20 <_dtoa_r+0x160>
 8007e0e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007e12:	eeb4 6b47 	vcmp.f64	d6, d7
 8007e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1a:	bf18      	it	ne
 8007e1c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007e20:	f1bb 0f16 	cmp.w	fp, #22
 8007e24:	d82b      	bhi.n	8007e7e <_dtoa_r+0x1be>
 8007e26:	495e      	ldr	r1, [pc, #376]	; (8007fa0 <_dtoa_r+0x2e0>)
 8007e28:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8007e2c:	ed91 7b00 	vldr	d7, [r1]
 8007e30:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e38:	d501      	bpl.n	8007e3e <_dtoa_r+0x17e>
 8007e3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e3e:	2100      	movs	r1, #0
 8007e40:	e01e      	b.n	8007e80 <_dtoa_r+0x1c0>
 8007e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e44:	4413      	add	r3, r2
 8007e46:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8007e4a:	2920      	cmp	r1, #32
 8007e4c:	bfc1      	itttt	gt
 8007e4e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8007e52:	408c      	lslgt	r4, r1
 8007e54:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8007e58:	fa28 f101 	lsrgt.w	r1, r8, r1
 8007e5c:	bfd6      	itet	le
 8007e5e:	f1c1 0120 	rsble	r1, r1, #32
 8007e62:	4321      	orrgt	r1, r4
 8007e64:	fa08 f101 	lslle.w	r1, r8, r1
 8007e68:	ee07 1a90 	vmov	s15, r1
 8007e6c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007e70:	3b01      	subs	r3, #1
 8007e72:	ee17 1a90 	vmov	r1, s15
 8007e76:	2001      	movs	r0, #1
 8007e78:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007e7c:	e7a7      	b.n	8007dce <_dtoa_r+0x10e>
 8007e7e:	2101      	movs	r1, #1
 8007e80:	1ad2      	subs	r2, r2, r3
 8007e82:	1e53      	subs	r3, r2, #1
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	bf45      	ittet	mi
 8007e88:	f1c2 0301 	rsbmi	r3, r2, #1
 8007e8c:	9304      	strmi	r3, [sp, #16]
 8007e8e:	2300      	movpl	r3, #0
 8007e90:	2300      	movmi	r3, #0
 8007e92:	bf4c      	ite	mi
 8007e94:	9305      	strmi	r3, [sp, #20]
 8007e96:	9304      	strpl	r3, [sp, #16]
 8007e98:	f1bb 0f00 	cmp.w	fp, #0
 8007e9c:	910b      	str	r1, [sp, #44]	; 0x2c
 8007e9e:	db18      	blt.n	8007ed2 <_dtoa_r+0x212>
 8007ea0:	9b05      	ldr	r3, [sp, #20]
 8007ea2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007ea6:	445b      	add	r3, fp
 8007ea8:	9305      	str	r3, [sp, #20]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	9a06      	ldr	r2, [sp, #24]
 8007eae:	2a09      	cmp	r2, #9
 8007eb0:	d848      	bhi.n	8007f44 <_dtoa_r+0x284>
 8007eb2:	2a05      	cmp	r2, #5
 8007eb4:	bfc4      	itt	gt
 8007eb6:	3a04      	subgt	r2, #4
 8007eb8:	9206      	strgt	r2, [sp, #24]
 8007eba:	9a06      	ldr	r2, [sp, #24]
 8007ebc:	f1a2 0202 	sub.w	r2, r2, #2
 8007ec0:	bfcc      	ite	gt
 8007ec2:	2400      	movgt	r4, #0
 8007ec4:	2401      	movle	r4, #1
 8007ec6:	2a03      	cmp	r2, #3
 8007ec8:	d847      	bhi.n	8007f5a <_dtoa_r+0x29a>
 8007eca:	e8df f002 	tbb	[pc, r2]
 8007ece:	2d0b      	.short	0x2d0b
 8007ed0:	392b      	.short	0x392b
 8007ed2:	9b04      	ldr	r3, [sp, #16]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	eba3 030b 	sub.w	r3, r3, fp
 8007eda:	9304      	str	r3, [sp, #16]
 8007edc:	920a      	str	r2, [sp, #40]	; 0x28
 8007ede:	f1cb 0300 	rsb	r3, fp, #0
 8007ee2:	e7e3      	b.n	8007eac <_dtoa_r+0x1ec>
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	9207      	str	r2, [sp, #28]
 8007ee8:	9a08      	ldr	r2, [sp, #32]
 8007eea:	2a00      	cmp	r2, #0
 8007eec:	dc38      	bgt.n	8007f60 <_dtoa_r+0x2a0>
 8007eee:	f04f 0a01 	mov.w	sl, #1
 8007ef2:	46d1      	mov	r9, sl
 8007ef4:	4652      	mov	r2, sl
 8007ef6:	f8cd a020 	str.w	sl, [sp, #32]
 8007efa:	69f7      	ldr	r7, [r6, #28]
 8007efc:	2100      	movs	r1, #0
 8007efe:	2004      	movs	r0, #4
 8007f00:	f100 0c14 	add.w	ip, r0, #20
 8007f04:	4594      	cmp	ip, r2
 8007f06:	d930      	bls.n	8007f6a <_dtoa_r+0x2aa>
 8007f08:	6079      	str	r1, [r7, #4]
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007f0e:	f000 fd43 	bl	8008998 <_Balloc>
 8007f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f14:	9001      	str	r0, [sp, #4]
 8007f16:	4602      	mov	r2, r0
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d145      	bne.n	8007fa8 <_dtoa_r+0x2e8>
 8007f1c:	4b21      	ldr	r3, [pc, #132]	; (8007fa4 <_dtoa_r+0x2e4>)
 8007f1e:	f240 11af 	movw	r1, #431	; 0x1af
 8007f22:	e6e5      	b.n	8007cf0 <_dtoa_r+0x30>
 8007f24:	2201      	movs	r2, #1
 8007f26:	e7de      	b.n	8007ee6 <_dtoa_r+0x226>
 8007f28:	2200      	movs	r2, #0
 8007f2a:	9207      	str	r2, [sp, #28]
 8007f2c:	9a08      	ldr	r2, [sp, #32]
 8007f2e:	eb0b 0a02 	add.w	sl, fp, r2
 8007f32:	f10a 0901 	add.w	r9, sl, #1
 8007f36:	464a      	mov	r2, r9
 8007f38:	2a01      	cmp	r2, #1
 8007f3a:	bfb8      	it	lt
 8007f3c:	2201      	movlt	r2, #1
 8007f3e:	e7dc      	b.n	8007efa <_dtoa_r+0x23a>
 8007f40:	2201      	movs	r2, #1
 8007f42:	e7f2      	b.n	8007f2a <_dtoa_r+0x26a>
 8007f44:	2401      	movs	r4, #1
 8007f46:	2200      	movs	r2, #0
 8007f48:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8007f4c:	f04f 3aff 	mov.w	sl, #4294967295
 8007f50:	2100      	movs	r1, #0
 8007f52:	46d1      	mov	r9, sl
 8007f54:	2212      	movs	r2, #18
 8007f56:	9108      	str	r1, [sp, #32]
 8007f58:	e7cf      	b.n	8007efa <_dtoa_r+0x23a>
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	9207      	str	r2, [sp, #28]
 8007f5e:	e7f5      	b.n	8007f4c <_dtoa_r+0x28c>
 8007f60:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f64:	46d1      	mov	r9, sl
 8007f66:	4652      	mov	r2, sl
 8007f68:	e7c7      	b.n	8007efa <_dtoa_r+0x23a>
 8007f6a:	3101      	adds	r1, #1
 8007f6c:	0040      	lsls	r0, r0, #1
 8007f6e:	e7c7      	b.n	8007f00 <_dtoa_r+0x240>
 8007f70:	636f4361 	.word	0x636f4361
 8007f74:	3fd287a7 	.word	0x3fd287a7
 8007f78:	8b60c8b3 	.word	0x8b60c8b3
 8007f7c:	3fc68a28 	.word	0x3fc68a28
 8007f80:	509f79fb 	.word	0x509f79fb
 8007f84:	3fd34413 	.word	0x3fd34413
 8007f88:	0809fe71 	.word	0x0809fe71
 8007f8c:	0809fe88 	.word	0x0809fe88
 8007f90:	7ff00000 	.word	0x7ff00000
 8007f94:	0809fe6d 	.word	0x0809fe6d
 8007f98:	0809fe64 	.word	0x0809fe64
 8007f9c:	0809fe41 	.word	0x0809fe41
 8007fa0:	0809ff78 	.word	0x0809ff78
 8007fa4:	0809fee0 	.word	0x0809fee0
 8007fa8:	69f2      	ldr	r2, [r6, #28]
 8007faa:	9901      	ldr	r1, [sp, #4]
 8007fac:	6011      	str	r1, [r2, #0]
 8007fae:	f1b9 0f0e 	cmp.w	r9, #14
 8007fb2:	d86c      	bhi.n	800808e <_dtoa_r+0x3ce>
 8007fb4:	2c00      	cmp	r4, #0
 8007fb6:	d06a      	beq.n	800808e <_dtoa_r+0x3ce>
 8007fb8:	f1bb 0f00 	cmp.w	fp, #0
 8007fbc:	f340 80a0 	ble.w	8008100 <_dtoa_r+0x440>
 8007fc0:	4ac1      	ldr	r2, [pc, #772]	; (80082c8 <_dtoa_r+0x608>)
 8007fc2:	f00b 010f 	and.w	r1, fp, #15
 8007fc6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007fca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007fce:	ed92 7b00 	vldr	d7, [r2]
 8007fd2:	ea4f 122b 	mov.w	r2, fp, asr #4
 8007fd6:	f000 8087 	beq.w	80080e8 <_dtoa_r+0x428>
 8007fda:	49bc      	ldr	r1, [pc, #752]	; (80082cc <_dtoa_r+0x60c>)
 8007fdc:	ed91 6b08 	vldr	d6, [r1, #32]
 8007fe0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007fe4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007fe8:	f002 020f 	and.w	r2, r2, #15
 8007fec:	2103      	movs	r1, #3
 8007fee:	48b7      	ldr	r0, [pc, #732]	; (80082cc <_dtoa_r+0x60c>)
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	d17b      	bne.n	80080ec <_dtoa_r+0x42c>
 8007ff4:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007ff8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007ffc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008002:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008006:	2a00      	cmp	r2, #0
 8008008:	f000 80a0 	beq.w	800814c <_dtoa_r+0x48c>
 800800c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008010:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008018:	f140 8098 	bpl.w	800814c <_dtoa_r+0x48c>
 800801c:	f1b9 0f00 	cmp.w	r9, #0
 8008020:	f000 8094 	beq.w	800814c <_dtoa_r+0x48c>
 8008024:	f1ba 0f00 	cmp.w	sl, #0
 8008028:	dd2f      	ble.n	800808a <_dtoa_r+0x3ca>
 800802a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800802e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008032:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008036:	f10b 32ff 	add.w	r2, fp, #4294967295
 800803a:	3101      	adds	r1, #1
 800803c:	4654      	mov	r4, sl
 800803e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008042:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008046:	ee07 1a90 	vmov	s15, r1
 800804a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800804e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008052:	ee15 7a90 	vmov	r7, s11
 8008056:	ec51 0b15 	vmov	r0, r1, d5
 800805a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800805e:	2c00      	cmp	r4, #0
 8008060:	d177      	bne.n	8008152 <_dtoa_r+0x492>
 8008062:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008066:	ee36 6b47 	vsub.f64	d6, d6, d7
 800806a:	ec41 0b17 	vmov	d7, r0, r1
 800806e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008076:	f300 826a 	bgt.w	800854e <_dtoa_r+0x88e>
 800807a:	eeb1 7b47 	vneg.f64	d7, d7
 800807e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008086:	f100 8260 	bmi.w	800854a <_dtoa_r+0x88a>
 800808a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800808e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008090:	2a00      	cmp	r2, #0
 8008092:	f2c0 811d 	blt.w	80082d0 <_dtoa_r+0x610>
 8008096:	f1bb 0f0e 	cmp.w	fp, #14
 800809a:	f300 8119 	bgt.w	80082d0 <_dtoa_r+0x610>
 800809e:	4b8a      	ldr	r3, [pc, #552]	; (80082c8 <_dtoa_r+0x608>)
 80080a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080a4:	ed93 6b00 	vldr	d6, [r3]
 80080a8:	9b08      	ldr	r3, [sp, #32]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f280 80b7 	bge.w	800821e <_dtoa_r+0x55e>
 80080b0:	f1b9 0f00 	cmp.w	r9, #0
 80080b4:	f300 80b3 	bgt.w	800821e <_dtoa_r+0x55e>
 80080b8:	f040 8246 	bne.w	8008548 <_dtoa_r+0x888>
 80080bc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80080c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80080c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80080c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d0:	464c      	mov	r4, r9
 80080d2:	464f      	mov	r7, r9
 80080d4:	f280 821c 	bge.w	8008510 <_dtoa_r+0x850>
 80080d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80080dc:	2331      	movs	r3, #49	; 0x31
 80080de:	f808 3b01 	strb.w	r3, [r8], #1
 80080e2:	f10b 0b01 	add.w	fp, fp, #1
 80080e6:	e218      	b.n	800851a <_dtoa_r+0x85a>
 80080e8:	2102      	movs	r1, #2
 80080ea:	e780      	b.n	8007fee <_dtoa_r+0x32e>
 80080ec:	07d4      	lsls	r4, r2, #31
 80080ee:	d504      	bpl.n	80080fa <_dtoa_r+0x43a>
 80080f0:	ed90 6b00 	vldr	d6, [r0]
 80080f4:	3101      	adds	r1, #1
 80080f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080fa:	1052      	asrs	r2, r2, #1
 80080fc:	3008      	adds	r0, #8
 80080fe:	e777      	b.n	8007ff0 <_dtoa_r+0x330>
 8008100:	d022      	beq.n	8008148 <_dtoa_r+0x488>
 8008102:	f1cb 0200 	rsb	r2, fp, #0
 8008106:	4970      	ldr	r1, [pc, #448]	; (80082c8 <_dtoa_r+0x608>)
 8008108:	f002 000f 	and.w	r0, r2, #15
 800810c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008110:	ed91 7b00 	vldr	d7, [r1]
 8008114:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008118:	ed8d 7b02 	vstr	d7, [sp, #8]
 800811c:	486b      	ldr	r0, [pc, #428]	; (80082cc <_dtoa_r+0x60c>)
 800811e:	1112      	asrs	r2, r2, #4
 8008120:	2400      	movs	r4, #0
 8008122:	2102      	movs	r1, #2
 8008124:	b92a      	cbnz	r2, 8008132 <_dtoa_r+0x472>
 8008126:	2c00      	cmp	r4, #0
 8008128:	f43f af6a 	beq.w	8008000 <_dtoa_r+0x340>
 800812c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008130:	e766      	b.n	8008000 <_dtoa_r+0x340>
 8008132:	07d7      	lsls	r7, r2, #31
 8008134:	d505      	bpl.n	8008142 <_dtoa_r+0x482>
 8008136:	ed90 6b00 	vldr	d6, [r0]
 800813a:	3101      	adds	r1, #1
 800813c:	2401      	movs	r4, #1
 800813e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008142:	1052      	asrs	r2, r2, #1
 8008144:	3008      	adds	r0, #8
 8008146:	e7ed      	b.n	8008124 <_dtoa_r+0x464>
 8008148:	2102      	movs	r1, #2
 800814a:	e759      	b.n	8008000 <_dtoa_r+0x340>
 800814c:	465a      	mov	r2, fp
 800814e:	464c      	mov	r4, r9
 8008150:	e775      	b.n	800803e <_dtoa_r+0x37e>
 8008152:	ec41 0b17 	vmov	d7, r0, r1
 8008156:	495c      	ldr	r1, [pc, #368]	; (80082c8 <_dtoa_r+0x608>)
 8008158:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800815c:	ed11 4b02 	vldr	d4, [r1, #-8]
 8008160:	9901      	ldr	r1, [sp, #4]
 8008162:	440c      	add	r4, r1
 8008164:	9907      	ldr	r1, [sp, #28]
 8008166:	b351      	cbz	r1, 80081be <_dtoa_r+0x4fe>
 8008168:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800816c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008170:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008174:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008178:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800817c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008180:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008184:	ee14 1a90 	vmov	r1, s9
 8008188:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800818c:	3130      	adds	r1, #48	; 0x30
 800818e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008192:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800819a:	f808 1b01 	strb.w	r1, [r8], #1
 800819e:	d439      	bmi.n	8008214 <_dtoa_r+0x554>
 80081a0:	ee32 5b46 	vsub.f64	d5, d2, d6
 80081a4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80081a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ac:	d472      	bmi.n	8008294 <_dtoa_r+0x5d4>
 80081ae:	45a0      	cmp	r8, r4
 80081b0:	f43f af6b 	beq.w	800808a <_dtoa_r+0x3ca>
 80081b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80081b8:	ee26 6b03 	vmul.f64	d6, d6, d3
 80081bc:	e7e0      	b.n	8008180 <_dtoa_r+0x4c0>
 80081be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80081c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80081c6:	4620      	mov	r0, r4
 80081c8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80081cc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80081d0:	ee14 1a90 	vmov	r1, s9
 80081d4:	3130      	adds	r1, #48	; 0x30
 80081d6:	f808 1b01 	strb.w	r1, [r8], #1
 80081da:	45a0      	cmp	r8, r4
 80081dc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80081e0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80081e4:	d118      	bne.n	8008218 <_dtoa_r+0x558>
 80081e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80081ea:	ee37 4b05 	vadd.f64	d4, d7, d5
 80081ee:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80081f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f6:	dc4d      	bgt.n	8008294 <_dtoa_r+0x5d4>
 80081f8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80081fc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008204:	f57f af41 	bpl.w	800808a <_dtoa_r+0x3ca>
 8008208:	4680      	mov	r8, r0
 800820a:	3801      	subs	r0, #1
 800820c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008210:	2b30      	cmp	r3, #48	; 0x30
 8008212:	d0f9      	beq.n	8008208 <_dtoa_r+0x548>
 8008214:	4693      	mov	fp, r2
 8008216:	e02a      	b.n	800826e <_dtoa_r+0x5ae>
 8008218:	ee26 6b03 	vmul.f64	d6, d6, d3
 800821c:	e7d6      	b.n	80081cc <_dtoa_r+0x50c>
 800821e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008222:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008226:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800822a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800822e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008232:	ee15 3a10 	vmov	r3, s10
 8008236:	3330      	adds	r3, #48	; 0x30
 8008238:	f808 3b01 	strb.w	r3, [r8], #1
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	eba8 0303 	sub.w	r3, r8, r3
 8008242:	4599      	cmp	r9, r3
 8008244:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008248:	eea3 7b46 	vfms.f64	d7, d3, d6
 800824c:	d133      	bne.n	80082b6 <_dtoa_r+0x5f6>
 800824e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008252:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800825a:	dc1a      	bgt.n	8008292 <_dtoa_r+0x5d2>
 800825c:	eeb4 7b46 	vcmp.f64	d7, d6
 8008260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008264:	d103      	bne.n	800826e <_dtoa_r+0x5ae>
 8008266:	ee15 3a10 	vmov	r3, s10
 800826a:	07d9      	lsls	r1, r3, #31
 800826c:	d411      	bmi.n	8008292 <_dtoa_r+0x5d2>
 800826e:	4629      	mov	r1, r5
 8008270:	4630      	mov	r0, r6
 8008272:	f000 fbd1 	bl	8008a18 <_Bfree>
 8008276:	2300      	movs	r3, #0
 8008278:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800827a:	f888 3000 	strb.w	r3, [r8]
 800827e:	f10b 0301 	add.w	r3, fp, #1
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008286:	2b00      	cmp	r3, #0
 8008288:	f43f ad69 	beq.w	8007d5e <_dtoa_r+0x9e>
 800828c:	f8c3 8000 	str.w	r8, [r3]
 8008290:	e565      	b.n	8007d5e <_dtoa_r+0x9e>
 8008292:	465a      	mov	r2, fp
 8008294:	4643      	mov	r3, r8
 8008296:	4698      	mov	r8, r3
 8008298:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800829c:	2939      	cmp	r1, #57	; 0x39
 800829e:	d106      	bne.n	80082ae <_dtoa_r+0x5ee>
 80082a0:	9901      	ldr	r1, [sp, #4]
 80082a2:	4299      	cmp	r1, r3
 80082a4:	d1f7      	bne.n	8008296 <_dtoa_r+0x5d6>
 80082a6:	9801      	ldr	r0, [sp, #4]
 80082a8:	2130      	movs	r1, #48	; 0x30
 80082aa:	3201      	adds	r2, #1
 80082ac:	7001      	strb	r1, [r0, #0]
 80082ae:	7819      	ldrb	r1, [r3, #0]
 80082b0:	3101      	adds	r1, #1
 80082b2:	7019      	strb	r1, [r3, #0]
 80082b4:	e7ae      	b.n	8008214 <_dtoa_r+0x554>
 80082b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80082ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80082be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082c2:	d1b2      	bne.n	800822a <_dtoa_r+0x56a>
 80082c4:	e7d3      	b.n	800826e <_dtoa_r+0x5ae>
 80082c6:	bf00      	nop
 80082c8:	0809ff78 	.word	0x0809ff78
 80082cc:	0809ff50 	.word	0x0809ff50
 80082d0:	9907      	ldr	r1, [sp, #28]
 80082d2:	2900      	cmp	r1, #0
 80082d4:	f000 80d0 	beq.w	8008478 <_dtoa_r+0x7b8>
 80082d8:	9906      	ldr	r1, [sp, #24]
 80082da:	2901      	cmp	r1, #1
 80082dc:	f300 80b4 	bgt.w	8008448 <_dtoa_r+0x788>
 80082e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082e2:	2900      	cmp	r1, #0
 80082e4:	f000 80ac 	beq.w	8008440 <_dtoa_r+0x780>
 80082e8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80082ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80082f0:	461c      	mov	r4, r3
 80082f2:	9309      	str	r3, [sp, #36]	; 0x24
 80082f4:	9b04      	ldr	r3, [sp, #16]
 80082f6:	4413      	add	r3, r2
 80082f8:	9304      	str	r3, [sp, #16]
 80082fa:	9b05      	ldr	r3, [sp, #20]
 80082fc:	2101      	movs	r1, #1
 80082fe:	4413      	add	r3, r2
 8008300:	4630      	mov	r0, r6
 8008302:	9305      	str	r3, [sp, #20]
 8008304:	f000 fc3e 	bl	8008b84 <__i2b>
 8008308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800830a:	4607      	mov	r7, r0
 800830c:	f1b8 0f00 	cmp.w	r8, #0
 8008310:	d00d      	beq.n	800832e <_dtoa_r+0x66e>
 8008312:	9a05      	ldr	r2, [sp, #20]
 8008314:	2a00      	cmp	r2, #0
 8008316:	dd0a      	ble.n	800832e <_dtoa_r+0x66e>
 8008318:	4542      	cmp	r2, r8
 800831a:	9904      	ldr	r1, [sp, #16]
 800831c:	bfa8      	it	ge
 800831e:	4642      	movge	r2, r8
 8008320:	1a89      	subs	r1, r1, r2
 8008322:	9104      	str	r1, [sp, #16]
 8008324:	9905      	ldr	r1, [sp, #20]
 8008326:	eba8 0802 	sub.w	r8, r8, r2
 800832a:	1a8a      	subs	r2, r1, r2
 800832c:	9205      	str	r2, [sp, #20]
 800832e:	b303      	cbz	r3, 8008372 <_dtoa_r+0x6b2>
 8008330:	9a07      	ldr	r2, [sp, #28]
 8008332:	2a00      	cmp	r2, #0
 8008334:	f000 80a5 	beq.w	8008482 <_dtoa_r+0x7c2>
 8008338:	2c00      	cmp	r4, #0
 800833a:	dd13      	ble.n	8008364 <_dtoa_r+0x6a4>
 800833c:	4639      	mov	r1, r7
 800833e:	4622      	mov	r2, r4
 8008340:	4630      	mov	r0, r6
 8008342:	930d      	str	r3, [sp, #52]	; 0x34
 8008344:	f000 fcde 	bl	8008d04 <__pow5mult>
 8008348:	462a      	mov	r2, r5
 800834a:	4601      	mov	r1, r0
 800834c:	4607      	mov	r7, r0
 800834e:	4630      	mov	r0, r6
 8008350:	f000 fc2e 	bl	8008bb0 <__multiply>
 8008354:	4629      	mov	r1, r5
 8008356:	9009      	str	r0, [sp, #36]	; 0x24
 8008358:	4630      	mov	r0, r6
 800835a:	f000 fb5d 	bl	8008a18 <_Bfree>
 800835e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008362:	4615      	mov	r5, r2
 8008364:	1b1a      	subs	r2, r3, r4
 8008366:	d004      	beq.n	8008372 <_dtoa_r+0x6b2>
 8008368:	4629      	mov	r1, r5
 800836a:	4630      	mov	r0, r6
 800836c:	f000 fcca 	bl	8008d04 <__pow5mult>
 8008370:	4605      	mov	r5, r0
 8008372:	2101      	movs	r1, #1
 8008374:	4630      	mov	r0, r6
 8008376:	f000 fc05 	bl	8008b84 <__i2b>
 800837a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800837c:	2b00      	cmp	r3, #0
 800837e:	4604      	mov	r4, r0
 8008380:	f340 8081 	ble.w	8008486 <_dtoa_r+0x7c6>
 8008384:	461a      	mov	r2, r3
 8008386:	4601      	mov	r1, r0
 8008388:	4630      	mov	r0, r6
 800838a:	f000 fcbb 	bl	8008d04 <__pow5mult>
 800838e:	9b06      	ldr	r3, [sp, #24]
 8008390:	2b01      	cmp	r3, #1
 8008392:	4604      	mov	r4, r0
 8008394:	dd7a      	ble.n	800848c <_dtoa_r+0x7cc>
 8008396:	2300      	movs	r3, #0
 8008398:	9309      	str	r3, [sp, #36]	; 0x24
 800839a:	6922      	ldr	r2, [r4, #16]
 800839c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80083a0:	6910      	ldr	r0, [r2, #16]
 80083a2:	f000 fba1 	bl	8008ae8 <__hi0bits>
 80083a6:	f1c0 0020 	rsb	r0, r0, #32
 80083aa:	9b05      	ldr	r3, [sp, #20]
 80083ac:	4418      	add	r0, r3
 80083ae:	f010 001f 	ands.w	r0, r0, #31
 80083b2:	f000 8093 	beq.w	80084dc <_dtoa_r+0x81c>
 80083b6:	f1c0 0220 	rsb	r2, r0, #32
 80083ba:	2a04      	cmp	r2, #4
 80083bc:	f340 8085 	ble.w	80084ca <_dtoa_r+0x80a>
 80083c0:	9b04      	ldr	r3, [sp, #16]
 80083c2:	f1c0 001c 	rsb	r0, r0, #28
 80083c6:	4403      	add	r3, r0
 80083c8:	9304      	str	r3, [sp, #16]
 80083ca:	9b05      	ldr	r3, [sp, #20]
 80083cc:	4480      	add	r8, r0
 80083ce:	4403      	add	r3, r0
 80083d0:	9305      	str	r3, [sp, #20]
 80083d2:	9b04      	ldr	r3, [sp, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dd05      	ble.n	80083e4 <_dtoa_r+0x724>
 80083d8:	4629      	mov	r1, r5
 80083da:	461a      	mov	r2, r3
 80083dc:	4630      	mov	r0, r6
 80083de:	f000 fceb 	bl	8008db8 <__lshift>
 80083e2:	4605      	mov	r5, r0
 80083e4:	9b05      	ldr	r3, [sp, #20]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	dd05      	ble.n	80083f6 <_dtoa_r+0x736>
 80083ea:	4621      	mov	r1, r4
 80083ec:	461a      	mov	r2, r3
 80083ee:	4630      	mov	r0, r6
 80083f0:	f000 fce2 	bl	8008db8 <__lshift>
 80083f4:	4604      	mov	r4, r0
 80083f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d071      	beq.n	80084e0 <_dtoa_r+0x820>
 80083fc:	4621      	mov	r1, r4
 80083fe:	4628      	mov	r0, r5
 8008400:	f000 fd46 	bl	8008e90 <__mcmp>
 8008404:	2800      	cmp	r0, #0
 8008406:	da6b      	bge.n	80084e0 <_dtoa_r+0x820>
 8008408:	2300      	movs	r3, #0
 800840a:	4629      	mov	r1, r5
 800840c:	220a      	movs	r2, #10
 800840e:	4630      	mov	r0, r6
 8008410:	f000 fb24 	bl	8008a5c <__multadd>
 8008414:	9b07      	ldr	r3, [sp, #28]
 8008416:	f10b 3bff 	add.w	fp, fp, #4294967295
 800841a:	4605      	mov	r5, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8197 	beq.w	8008750 <_dtoa_r+0xa90>
 8008422:	4639      	mov	r1, r7
 8008424:	2300      	movs	r3, #0
 8008426:	220a      	movs	r2, #10
 8008428:	4630      	mov	r0, r6
 800842a:	f000 fb17 	bl	8008a5c <__multadd>
 800842e:	f1ba 0f00 	cmp.w	sl, #0
 8008432:	4607      	mov	r7, r0
 8008434:	f300 8093 	bgt.w	800855e <_dtoa_r+0x89e>
 8008438:	9b06      	ldr	r3, [sp, #24]
 800843a:	2b02      	cmp	r3, #2
 800843c:	dc57      	bgt.n	80084ee <_dtoa_r+0x82e>
 800843e:	e08e      	b.n	800855e <_dtoa_r+0x89e>
 8008440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008442:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008446:	e751      	b.n	80082ec <_dtoa_r+0x62c>
 8008448:	f109 34ff 	add.w	r4, r9, #4294967295
 800844c:	42a3      	cmp	r3, r4
 800844e:	bfbf      	itttt	lt
 8008450:	1ae2      	sublt	r2, r4, r3
 8008452:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008454:	189b      	addlt	r3, r3, r2
 8008456:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008458:	bfae      	itee	ge
 800845a:	1b1c      	subge	r4, r3, r4
 800845c:	4623      	movlt	r3, r4
 800845e:	2400      	movlt	r4, #0
 8008460:	f1b9 0f00 	cmp.w	r9, #0
 8008464:	bfb5      	itete	lt
 8008466:	9a04      	ldrlt	r2, [sp, #16]
 8008468:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800846c:	eba2 0809 	sublt.w	r8, r2, r9
 8008470:	464a      	movge	r2, r9
 8008472:	bfb8      	it	lt
 8008474:	2200      	movlt	r2, #0
 8008476:	e73c      	b.n	80082f2 <_dtoa_r+0x632>
 8008478:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800847c:	9f07      	ldr	r7, [sp, #28]
 800847e:	461c      	mov	r4, r3
 8008480:	e744      	b.n	800830c <_dtoa_r+0x64c>
 8008482:	461a      	mov	r2, r3
 8008484:	e770      	b.n	8008368 <_dtoa_r+0x6a8>
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	2b01      	cmp	r3, #1
 800848a:	dc18      	bgt.n	80084be <_dtoa_r+0x7fe>
 800848c:	9b02      	ldr	r3, [sp, #8]
 800848e:	b9b3      	cbnz	r3, 80084be <_dtoa_r+0x7fe>
 8008490:	9b03      	ldr	r3, [sp, #12]
 8008492:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008496:	b9a2      	cbnz	r2, 80084c2 <_dtoa_r+0x802>
 8008498:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800849c:	0d12      	lsrs	r2, r2, #20
 800849e:	0512      	lsls	r2, r2, #20
 80084a0:	b18a      	cbz	r2, 80084c6 <_dtoa_r+0x806>
 80084a2:	9b04      	ldr	r3, [sp, #16]
 80084a4:	3301      	adds	r3, #1
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	9b05      	ldr	r3, [sp, #20]
 80084aa:	3301      	adds	r3, #1
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	2301      	movs	r3, #1
 80084b0:	9309      	str	r3, [sp, #36]	; 0x24
 80084b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f47f af70 	bne.w	800839a <_dtoa_r+0x6da>
 80084ba:	2001      	movs	r0, #1
 80084bc:	e775      	b.n	80083aa <_dtoa_r+0x6ea>
 80084be:	2300      	movs	r3, #0
 80084c0:	e7f6      	b.n	80084b0 <_dtoa_r+0x7f0>
 80084c2:	9b02      	ldr	r3, [sp, #8]
 80084c4:	e7f4      	b.n	80084b0 <_dtoa_r+0x7f0>
 80084c6:	9209      	str	r2, [sp, #36]	; 0x24
 80084c8:	e7f3      	b.n	80084b2 <_dtoa_r+0x7f2>
 80084ca:	d082      	beq.n	80083d2 <_dtoa_r+0x712>
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	321c      	adds	r2, #28
 80084d0:	4413      	add	r3, r2
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	9b05      	ldr	r3, [sp, #20]
 80084d6:	4490      	add	r8, r2
 80084d8:	4413      	add	r3, r2
 80084da:	e779      	b.n	80083d0 <_dtoa_r+0x710>
 80084dc:	4602      	mov	r2, r0
 80084de:	e7f5      	b.n	80084cc <_dtoa_r+0x80c>
 80084e0:	f1b9 0f00 	cmp.w	r9, #0
 80084e4:	dc36      	bgt.n	8008554 <_dtoa_r+0x894>
 80084e6:	9b06      	ldr	r3, [sp, #24]
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	dd33      	ble.n	8008554 <_dtoa_r+0x894>
 80084ec:	46ca      	mov	sl, r9
 80084ee:	f1ba 0f00 	cmp.w	sl, #0
 80084f2:	d10d      	bne.n	8008510 <_dtoa_r+0x850>
 80084f4:	4621      	mov	r1, r4
 80084f6:	4653      	mov	r3, sl
 80084f8:	2205      	movs	r2, #5
 80084fa:	4630      	mov	r0, r6
 80084fc:	f000 faae 	bl	8008a5c <__multadd>
 8008500:	4601      	mov	r1, r0
 8008502:	4604      	mov	r4, r0
 8008504:	4628      	mov	r0, r5
 8008506:	f000 fcc3 	bl	8008e90 <__mcmp>
 800850a:	2800      	cmp	r0, #0
 800850c:	f73f ade4 	bgt.w	80080d8 <_dtoa_r+0x418>
 8008510:	9b08      	ldr	r3, [sp, #32]
 8008512:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008516:	ea6f 0b03 	mvn.w	fp, r3
 800851a:	f04f 0900 	mov.w	r9, #0
 800851e:	4621      	mov	r1, r4
 8008520:	4630      	mov	r0, r6
 8008522:	f000 fa79 	bl	8008a18 <_Bfree>
 8008526:	2f00      	cmp	r7, #0
 8008528:	f43f aea1 	beq.w	800826e <_dtoa_r+0x5ae>
 800852c:	f1b9 0f00 	cmp.w	r9, #0
 8008530:	d005      	beq.n	800853e <_dtoa_r+0x87e>
 8008532:	45b9      	cmp	r9, r7
 8008534:	d003      	beq.n	800853e <_dtoa_r+0x87e>
 8008536:	4649      	mov	r1, r9
 8008538:	4630      	mov	r0, r6
 800853a:	f000 fa6d 	bl	8008a18 <_Bfree>
 800853e:	4639      	mov	r1, r7
 8008540:	4630      	mov	r0, r6
 8008542:	f000 fa69 	bl	8008a18 <_Bfree>
 8008546:	e692      	b.n	800826e <_dtoa_r+0x5ae>
 8008548:	2400      	movs	r4, #0
 800854a:	4627      	mov	r7, r4
 800854c:	e7e0      	b.n	8008510 <_dtoa_r+0x850>
 800854e:	4693      	mov	fp, r2
 8008550:	4627      	mov	r7, r4
 8008552:	e5c1      	b.n	80080d8 <_dtoa_r+0x418>
 8008554:	9b07      	ldr	r3, [sp, #28]
 8008556:	46ca      	mov	sl, r9
 8008558:	2b00      	cmp	r3, #0
 800855a:	f000 8100 	beq.w	800875e <_dtoa_r+0xa9e>
 800855e:	f1b8 0f00 	cmp.w	r8, #0
 8008562:	dd05      	ble.n	8008570 <_dtoa_r+0x8b0>
 8008564:	4639      	mov	r1, r7
 8008566:	4642      	mov	r2, r8
 8008568:	4630      	mov	r0, r6
 800856a:	f000 fc25 	bl	8008db8 <__lshift>
 800856e:	4607      	mov	r7, r0
 8008570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008572:	2b00      	cmp	r3, #0
 8008574:	d05d      	beq.n	8008632 <_dtoa_r+0x972>
 8008576:	6879      	ldr	r1, [r7, #4]
 8008578:	4630      	mov	r0, r6
 800857a:	f000 fa0d 	bl	8008998 <_Balloc>
 800857e:	4680      	mov	r8, r0
 8008580:	b928      	cbnz	r0, 800858e <_dtoa_r+0x8ce>
 8008582:	4b82      	ldr	r3, [pc, #520]	; (800878c <_dtoa_r+0xacc>)
 8008584:	4602      	mov	r2, r0
 8008586:	f240 21ef 	movw	r1, #751	; 0x2ef
 800858a:	f7ff bbb1 	b.w	8007cf0 <_dtoa_r+0x30>
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	3202      	adds	r2, #2
 8008592:	0092      	lsls	r2, r2, #2
 8008594:	f107 010c 	add.w	r1, r7, #12
 8008598:	300c      	adds	r0, #12
 800859a:	f000 ffa9 	bl	80094f0 <memcpy>
 800859e:	2201      	movs	r2, #1
 80085a0:	4641      	mov	r1, r8
 80085a2:	4630      	mov	r0, r6
 80085a4:	f000 fc08 	bl	8008db8 <__lshift>
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	3301      	adds	r3, #1
 80085ac:	9304      	str	r3, [sp, #16]
 80085ae:	9b01      	ldr	r3, [sp, #4]
 80085b0:	4453      	add	r3, sl
 80085b2:	9308      	str	r3, [sp, #32]
 80085b4:	9b02      	ldr	r3, [sp, #8]
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	46b9      	mov	r9, r7
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	4607      	mov	r7, r0
 80085c0:	9b04      	ldr	r3, [sp, #16]
 80085c2:	4621      	mov	r1, r4
 80085c4:	3b01      	subs	r3, #1
 80085c6:	4628      	mov	r0, r5
 80085c8:	9302      	str	r3, [sp, #8]
 80085ca:	f7ff faf1 	bl	8007bb0 <quorem>
 80085ce:	4603      	mov	r3, r0
 80085d0:	3330      	adds	r3, #48	; 0x30
 80085d2:	9005      	str	r0, [sp, #20]
 80085d4:	4649      	mov	r1, r9
 80085d6:	4628      	mov	r0, r5
 80085d8:	9309      	str	r3, [sp, #36]	; 0x24
 80085da:	f000 fc59 	bl	8008e90 <__mcmp>
 80085de:	463a      	mov	r2, r7
 80085e0:	4682      	mov	sl, r0
 80085e2:	4621      	mov	r1, r4
 80085e4:	4630      	mov	r0, r6
 80085e6:	f000 fc6f 	bl	8008ec8 <__mdiff>
 80085ea:	68c2      	ldr	r2, [r0, #12]
 80085ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085ee:	4680      	mov	r8, r0
 80085f0:	bb0a      	cbnz	r2, 8008636 <_dtoa_r+0x976>
 80085f2:	4601      	mov	r1, r0
 80085f4:	4628      	mov	r0, r5
 80085f6:	f000 fc4b 	bl	8008e90 <__mcmp>
 80085fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085fc:	4602      	mov	r2, r0
 80085fe:	4641      	mov	r1, r8
 8008600:	4630      	mov	r0, r6
 8008602:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8008606:	f000 fa07 	bl	8008a18 <_Bfree>
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800860e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008612:	ea43 0102 	orr.w	r1, r3, r2
 8008616:	9b07      	ldr	r3, [sp, #28]
 8008618:	4319      	orrs	r1, r3
 800861a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800861c:	d10d      	bne.n	800863a <_dtoa_r+0x97a>
 800861e:	2b39      	cmp	r3, #57	; 0x39
 8008620:	d029      	beq.n	8008676 <_dtoa_r+0x9b6>
 8008622:	f1ba 0f00 	cmp.w	sl, #0
 8008626:	dd01      	ble.n	800862c <_dtoa_r+0x96c>
 8008628:	9b05      	ldr	r3, [sp, #20]
 800862a:	3331      	adds	r3, #49	; 0x31
 800862c:	9a02      	ldr	r2, [sp, #8]
 800862e:	7013      	strb	r3, [r2, #0]
 8008630:	e775      	b.n	800851e <_dtoa_r+0x85e>
 8008632:	4638      	mov	r0, r7
 8008634:	e7b8      	b.n	80085a8 <_dtoa_r+0x8e8>
 8008636:	2201      	movs	r2, #1
 8008638:	e7e1      	b.n	80085fe <_dtoa_r+0x93e>
 800863a:	f1ba 0f00 	cmp.w	sl, #0
 800863e:	db06      	blt.n	800864e <_dtoa_r+0x98e>
 8008640:	9906      	ldr	r1, [sp, #24]
 8008642:	ea41 0a0a 	orr.w	sl, r1, sl
 8008646:	9907      	ldr	r1, [sp, #28]
 8008648:	ea5a 0a01 	orrs.w	sl, sl, r1
 800864c:	d120      	bne.n	8008690 <_dtoa_r+0x9d0>
 800864e:	2a00      	cmp	r2, #0
 8008650:	ddec      	ble.n	800862c <_dtoa_r+0x96c>
 8008652:	4629      	mov	r1, r5
 8008654:	2201      	movs	r2, #1
 8008656:	4630      	mov	r0, r6
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	f000 fbad 	bl	8008db8 <__lshift>
 800865e:	4621      	mov	r1, r4
 8008660:	4605      	mov	r5, r0
 8008662:	f000 fc15 	bl	8008e90 <__mcmp>
 8008666:	2800      	cmp	r0, #0
 8008668:	9b04      	ldr	r3, [sp, #16]
 800866a:	dc02      	bgt.n	8008672 <_dtoa_r+0x9b2>
 800866c:	d1de      	bne.n	800862c <_dtoa_r+0x96c>
 800866e:	07da      	lsls	r2, r3, #31
 8008670:	d5dc      	bpl.n	800862c <_dtoa_r+0x96c>
 8008672:	2b39      	cmp	r3, #57	; 0x39
 8008674:	d1d8      	bne.n	8008628 <_dtoa_r+0x968>
 8008676:	9a02      	ldr	r2, [sp, #8]
 8008678:	2339      	movs	r3, #57	; 0x39
 800867a:	7013      	strb	r3, [r2, #0]
 800867c:	4643      	mov	r3, r8
 800867e:	4698      	mov	r8, r3
 8008680:	3b01      	subs	r3, #1
 8008682:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008686:	2a39      	cmp	r2, #57	; 0x39
 8008688:	d051      	beq.n	800872e <_dtoa_r+0xa6e>
 800868a:	3201      	adds	r2, #1
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	e746      	b.n	800851e <_dtoa_r+0x85e>
 8008690:	2a00      	cmp	r2, #0
 8008692:	dd03      	ble.n	800869c <_dtoa_r+0x9dc>
 8008694:	2b39      	cmp	r3, #57	; 0x39
 8008696:	d0ee      	beq.n	8008676 <_dtoa_r+0x9b6>
 8008698:	3301      	adds	r3, #1
 800869a:	e7c7      	b.n	800862c <_dtoa_r+0x96c>
 800869c:	9a04      	ldr	r2, [sp, #16]
 800869e:	9908      	ldr	r1, [sp, #32]
 80086a0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80086a4:	428a      	cmp	r2, r1
 80086a6:	d02b      	beq.n	8008700 <_dtoa_r+0xa40>
 80086a8:	4629      	mov	r1, r5
 80086aa:	2300      	movs	r3, #0
 80086ac:	220a      	movs	r2, #10
 80086ae:	4630      	mov	r0, r6
 80086b0:	f000 f9d4 	bl	8008a5c <__multadd>
 80086b4:	45b9      	cmp	r9, r7
 80086b6:	4605      	mov	r5, r0
 80086b8:	f04f 0300 	mov.w	r3, #0
 80086bc:	f04f 020a 	mov.w	r2, #10
 80086c0:	4649      	mov	r1, r9
 80086c2:	4630      	mov	r0, r6
 80086c4:	d107      	bne.n	80086d6 <_dtoa_r+0xa16>
 80086c6:	f000 f9c9 	bl	8008a5c <__multadd>
 80086ca:	4681      	mov	r9, r0
 80086cc:	4607      	mov	r7, r0
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	3301      	adds	r3, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	e774      	b.n	80085c0 <_dtoa_r+0x900>
 80086d6:	f000 f9c1 	bl	8008a5c <__multadd>
 80086da:	4639      	mov	r1, r7
 80086dc:	4681      	mov	r9, r0
 80086de:	2300      	movs	r3, #0
 80086e0:	220a      	movs	r2, #10
 80086e2:	4630      	mov	r0, r6
 80086e4:	f000 f9ba 	bl	8008a5c <__multadd>
 80086e8:	4607      	mov	r7, r0
 80086ea:	e7f0      	b.n	80086ce <_dtoa_r+0xa0e>
 80086ec:	f1ba 0f00 	cmp.w	sl, #0
 80086f0:	9a01      	ldr	r2, [sp, #4]
 80086f2:	bfcc      	ite	gt
 80086f4:	46d0      	movgt	r8, sl
 80086f6:	f04f 0801 	movle.w	r8, #1
 80086fa:	4490      	add	r8, r2
 80086fc:	f04f 0900 	mov.w	r9, #0
 8008700:	4629      	mov	r1, r5
 8008702:	2201      	movs	r2, #1
 8008704:	4630      	mov	r0, r6
 8008706:	9302      	str	r3, [sp, #8]
 8008708:	f000 fb56 	bl	8008db8 <__lshift>
 800870c:	4621      	mov	r1, r4
 800870e:	4605      	mov	r5, r0
 8008710:	f000 fbbe 	bl	8008e90 <__mcmp>
 8008714:	2800      	cmp	r0, #0
 8008716:	dcb1      	bgt.n	800867c <_dtoa_r+0x9bc>
 8008718:	d102      	bne.n	8008720 <_dtoa_r+0xa60>
 800871a:	9b02      	ldr	r3, [sp, #8]
 800871c:	07db      	lsls	r3, r3, #31
 800871e:	d4ad      	bmi.n	800867c <_dtoa_r+0x9bc>
 8008720:	4643      	mov	r3, r8
 8008722:	4698      	mov	r8, r3
 8008724:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008728:	2a30      	cmp	r2, #48	; 0x30
 800872a:	d0fa      	beq.n	8008722 <_dtoa_r+0xa62>
 800872c:	e6f7      	b.n	800851e <_dtoa_r+0x85e>
 800872e:	9a01      	ldr	r2, [sp, #4]
 8008730:	429a      	cmp	r2, r3
 8008732:	d1a4      	bne.n	800867e <_dtoa_r+0x9be>
 8008734:	f10b 0b01 	add.w	fp, fp, #1
 8008738:	2331      	movs	r3, #49	; 0x31
 800873a:	e778      	b.n	800862e <_dtoa_r+0x96e>
 800873c:	4b14      	ldr	r3, [pc, #80]	; (8008790 <_dtoa_r+0xad0>)
 800873e:	f7ff bb2a 	b.w	8007d96 <_dtoa_r+0xd6>
 8008742:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008744:	2b00      	cmp	r3, #0
 8008746:	f47f ab05 	bne.w	8007d54 <_dtoa_r+0x94>
 800874a:	4b12      	ldr	r3, [pc, #72]	; (8008794 <_dtoa_r+0xad4>)
 800874c:	f7ff bb23 	b.w	8007d96 <_dtoa_r+0xd6>
 8008750:	f1ba 0f00 	cmp.w	sl, #0
 8008754:	dc03      	bgt.n	800875e <_dtoa_r+0xa9e>
 8008756:	9b06      	ldr	r3, [sp, #24]
 8008758:	2b02      	cmp	r3, #2
 800875a:	f73f aec8 	bgt.w	80084ee <_dtoa_r+0x82e>
 800875e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008762:	4621      	mov	r1, r4
 8008764:	4628      	mov	r0, r5
 8008766:	f7ff fa23 	bl	8007bb0 <quorem>
 800876a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800876e:	f808 3b01 	strb.w	r3, [r8], #1
 8008772:	9a01      	ldr	r2, [sp, #4]
 8008774:	eba8 0202 	sub.w	r2, r8, r2
 8008778:	4592      	cmp	sl, r2
 800877a:	ddb7      	ble.n	80086ec <_dtoa_r+0xa2c>
 800877c:	4629      	mov	r1, r5
 800877e:	2300      	movs	r3, #0
 8008780:	220a      	movs	r2, #10
 8008782:	4630      	mov	r0, r6
 8008784:	f000 f96a 	bl	8008a5c <__multadd>
 8008788:	4605      	mov	r5, r0
 800878a:	e7ea      	b.n	8008762 <_dtoa_r+0xaa2>
 800878c:	0809fee0 	.word	0x0809fee0
 8008790:	0809fe40 	.word	0x0809fe40
 8008794:	0809fe64 	.word	0x0809fe64

08008798 <_free_r>:
 8008798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800879a:	2900      	cmp	r1, #0
 800879c:	d044      	beq.n	8008828 <_free_r+0x90>
 800879e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087a2:	9001      	str	r0, [sp, #4]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f1a1 0404 	sub.w	r4, r1, #4
 80087aa:	bfb8      	it	lt
 80087ac:	18e4      	addlt	r4, r4, r3
 80087ae:	f000 f8e7 	bl	8008980 <__malloc_lock>
 80087b2:	4a1e      	ldr	r2, [pc, #120]	; (800882c <_free_r+0x94>)
 80087b4:	9801      	ldr	r0, [sp, #4]
 80087b6:	6813      	ldr	r3, [r2, #0]
 80087b8:	b933      	cbnz	r3, 80087c8 <_free_r+0x30>
 80087ba:	6063      	str	r3, [r4, #4]
 80087bc:	6014      	str	r4, [r2, #0]
 80087be:	b003      	add	sp, #12
 80087c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087c4:	f000 b8e2 	b.w	800898c <__malloc_unlock>
 80087c8:	42a3      	cmp	r3, r4
 80087ca:	d908      	bls.n	80087de <_free_r+0x46>
 80087cc:	6825      	ldr	r5, [r4, #0]
 80087ce:	1961      	adds	r1, r4, r5
 80087d0:	428b      	cmp	r3, r1
 80087d2:	bf01      	itttt	eq
 80087d4:	6819      	ldreq	r1, [r3, #0]
 80087d6:	685b      	ldreq	r3, [r3, #4]
 80087d8:	1949      	addeq	r1, r1, r5
 80087da:	6021      	streq	r1, [r4, #0]
 80087dc:	e7ed      	b.n	80087ba <_free_r+0x22>
 80087de:	461a      	mov	r2, r3
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	b10b      	cbz	r3, 80087e8 <_free_r+0x50>
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	d9fa      	bls.n	80087de <_free_r+0x46>
 80087e8:	6811      	ldr	r1, [r2, #0]
 80087ea:	1855      	adds	r5, r2, r1
 80087ec:	42a5      	cmp	r5, r4
 80087ee:	d10b      	bne.n	8008808 <_free_r+0x70>
 80087f0:	6824      	ldr	r4, [r4, #0]
 80087f2:	4421      	add	r1, r4
 80087f4:	1854      	adds	r4, r2, r1
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	d1e0      	bne.n	80087be <_free_r+0x26>
 80087fc:	681c      	ldr	r4, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	6053      	str	r3, [r2, #4]
 8008802:	440c      	add	r4, r1
 8008804:	6014      	str	r4, [r2, #0]
 8008806:	e7da      	b.n	80087be <_free_r+0x26>
 8008808:	d902      	bls.n	8008810 <_free_r+0x78>
 800880a:	230c      	movs	r3, #12
 800880c:	6003      	str	r3, [r0, #0]
 800880e:	e7d6      	b.n	80087be <_free_r+0x26>
 8008810:	6825      	ldr	r5, [r4, #0]
 8008812:	1961      	adds	r1, r4, r5
 8008814:	428b      	cmp	r3, r1
 8008816:	bf04      	itt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	bf04      	itt	eq
 8008820:	1949      	addeq	r1, r1, r5
 8008822:	6021      	streq	r1, [r4, #0]
 8008824:	6054      	str	r4, [r2, #4]
 8008826:	e7ca      	b.n	80087be <_free_r+0x26>
 8008828:	b003      	add	sp, #12
 800882a:	bd30      	pop	{r4, r5, pc}
 800882c:	20000638 	.word	0x20000638

08008830 <malloc>:
 8008830:	4b02      	ldr	r3, [pc, #8]	; (800883c <malloc+0xc>)
 8008832:	4601      	mov	r1, r0
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	f000 b823 	b.w	8008880 <_malloc_r>
 800883a:	bf00      	nop
 800883c:	20000074 	.word	0x20000074

08008840 <sbrk_aligned>:
 8008840:	b570      	push	{r4, r5, r6, lr}
 8008842:	4e0e      	ldr	r6, [pc, #56]	; (800887c <sbrk_aligned+0x3c>)
 8008844:	460c      	mov	r4, r1
 8008846:	6831      	ldr	r1, [r6, #0]
 8008848:	4605      	mov	r5, r0
 800884a:	b911      	cbnz	r1, 8008852 <sbrk_aligned+0x12>
 800884c:	f000 fe40 	bl	80094d0 <_sbrk_r>
 8008850:	6030      	str	r0, [r6, #0]
 8008852:	4621      	mov	r1, r4
 8008854:	4628      	mov	r0, r5
 8008856:	f000 fe3b 	bl	80094d0 <_sbrk_r>
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	d00a      	beq.n	8008874 <sbrk_aligned+0x34>
 800885e:	1cc4      	adds	r4, r0, #3
 8008860:	f024 0403 	bic.w	r4, r4, #3
 8008864:	42a0      	cmp	r0, r4
 8008866:	d007      	beq.n	8008878 <sbrk_aligned+0x38>
 8008868:	1a21      	subs	r1, r4, r0
 800886a:	4628      	mov	r0, r5
 800886c:	f000 fe30 	bl	80094d0 <_sbrk_r>
 8008870:	3001      	adds	r0, #1
 8008872:	d101      	bne.n	8008878 <sbrk_aligned+0x38>
 8008874:	f04f 34ff 	mov.w	r4, #4294967295
 8008878:	4620      	mov	r0, r4
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	2000063c 	.word	0x2000063c

08008880 <_malloc_r>:
 8008880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008884:	1ccd      	adds	r5, r1, #3
 8008886:	f025 0503 	bic.w	r5, r5, #3
 800888a:	3508      	adds	r5, #8
 800888c:	2d0c      	cmp	r5, #12
 800888e:	bf38      	it	cc
 8008890:	250c      	movcc	r5, #12
 8008892:	2d00      	cmp	r5, #0
 8008894:	4607      	mov	r7, r0
 8008896:	db01      	blt.n	800889c <_malloc_r+0x1c>
 8008898:	42a9      	cmp	r1, r5
 800889a:	d905      	bls.n	80088a8 <_malloc_r+0x28>
 800889c:	230c      	movs	r3, #12
 800889e:	603b      	str	r3, [r7, #0]
 80088a0:	2600      	movs	r6, #0
 80088a2:	4630      	mov	r0, r6
 80088a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800897c <_malloc_r+0xfc>
 80088ac:	f000 f868 	bl	8008980 <__malloc_lock>
 80088b0:	f8d8 3000 	ldr.w	r3, [r8]
 80088b4:	461c      	mov	r4, r3
 80088b6:	bb5c      	cbnz	r4, 8008910 <_malloc_r+0x90>
 80088b8:	4629      	mov	r1, r5
 80088ba:	4638      	mov	r0, r7
 80088bc:	f7ff ffc0 	bl	8008840 <sbrk_aligned>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	4604      	mov	r4, r0
 80088c4:	d155      	bne.n	8008972 <_malloc_r+0xf2>
 80088c6:	f8d8 4000 	ldr.w	r4, [r8]
 80088ca:	4626      	mov	r6, r4
 80088cc:	2e00      	cmp	r6, #0
 80088ce:	d145      	bne.n	800895c <_malloc_r+0xdc>
 80088d0:	2c00      	cmp	r4, #0
 80088d2:	d048      	beq.n	8008966 <_malloc_r+0xe6>
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	4631      	mov	r1, r6
 80088d8:	4638      	mov	r0, r7
 80088da:	eb04 0903 	add.w	r9, r4, r3
 80088de:	f000 fdf7 	bl	80094d0 <_sbrk_r>
 80088e2:	4581      	cmp	r9, r0
 80088e4:	d13f      	bne.n	8008966 <_malloc_r+0xe6>
 80088e6:	6821      	ldr	r1, [r4, #0]
 80088e8:	1a6d      	subs	r5, r5, r1
 80088ea:	4629      	mov	r1, r5
 80088ec:	4638      	mov	r0, r7
 80088ee:	f7ff ffa7 	bl	8008840 <sbrk_aligned>
 80088f2:	3001      	adds	r0, #1
 80088f4:	d037      	beq.n	8008966 <_malloc_r+0xe6>
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	442b      	add	r3, r5
 80088fa:	6023      	str	r3, [r4, #0]
 80088fc:	f8d8 3000 	ldr.w	r3, [r8]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d038      	beq.n	8008976 <_malloc_r+0xf6>
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	42a2      	cmp	r2, r4
 8008908:	d12b      	bne.n	8008962 <_malloc_r+0xe2>
 800890a:	2200      	movs	r2, #0
 800890c:	605a      	str	r2, [r3, #4]
 800890e:	e00f      	b.n	8008930 <_malloc_r+0xb0>
 8008910:	6822      	ldr	r2, [r4, #0]
 8008912:	1b52      	subs	r2, r2, r5
 8008914:	d41f      	bmi.n	8008956 <_malloc_r+0xd6>
 8008916:	2a0b      	cmp	r2, #11
 8008918:	d917      	bls.n	800894a <_malloc_r+0xca>
 800891a:	1961      	adds	r1, r4, r5
 800891c:	42a3      	cmp	r3, r4
 800891e:	6025      	str	r5, [r4, #0]
 8008920:	bf18      	it	ne
 8008922:	6059      	strne	r1, [r3, #4]
 8008924:	6863      	ldr	r3, [r4, #4]
 8008926:	bf08      	it	eq
 8008928:	f8c8 1000 	streq.w	r1, [r8]
 800892c:	5162      	str	r2, [r4, r5]
 800892e:	604b      	str	r3, [r1, #4]
 8008930:	4638      	mov	r0, r7
 8008932:	f104 060b 	add.w	r6, r4, #11
 8008936:	f000 f829 	bl	800898c <__malloc_unlock>
 800893a:	f026 0607 	bic.w	r6, r6, #7
 800893e:	1d23      	adds	r3, r4, #4
 8008940:	1af2      	subs	r2, r6, r3
 8008942:	d0ae      	beq.n	80088a2 <_malloc_r+0x22>
 8008944:	1b9b      	subs	r3, r3, r6
 8008946:	50a3      	str	r3, [r4, r2]
 8008948:	e7ab      	b.n	80088a2 <_malloc_r+0x22>
 800894a:	42a3      	cmp	r3, r4
 800894c:	6862      	ldr	r2, [r4, #4]
 800894e:	d1dd      	bne.n	800890c <_malloc_r+0x8c>
 8008950:	f8c8 2000 	str.w	r2, [r8]
 8008954:	e7ec      	b.n	8008930 <_malloc_r+0xb0>
 8008956:	4623      	mov	r3, r4
 8008958:	6864      	ldr	r4, [r4, #4]
 800895a:	e7ac      	b.n	80088b6 <_malloc_r+0x36>
 800895c:	4634      	mov	r4, r6
 800895e:	6876      	ldr	r6, [r6, #4]
 8008960:	e7b4      	b.n	80088cc <_malloc_r+0x4c>
 8008962:	4613      	mov	r3, r2
 8008964:	e7cc      	b.n	8008900 <_malloc_r+0x80>
 8008966:	230c      	movs	r3, #12
 8008968:	603b      	str	r3, [r7, #0]
 800896a:	4638      	mov	r0, r7
 800896c:	f000 f80e 	bl	800898c <__malloc_unlock>
 8008970:	e797      	b.n	80088a2 <_malloc_r+0x22>
 8008972:	6025      	str	r5, [r4, #0]
 8008974:	e7dc      	b.n	8008930 <_malloc_r+0xb0>
 8008976:	605b      	str	r3, [r3, #4]
 8008978:	deff      	udf	#255	; 0xff
 800897a:	bf00      	nop
 800897c:	20000638 	.word	0x20000638

08008980 <__malloc_lock>:
 8008980:	4801      	ldr	r0, [pc, #4]	; (8008988 <__malloc_lock+0x8>)
 8008982:	f7ff b913 	b.w	8007bac <__retarget_lock_acquire_recursive>
 8008986:	bf00      	nop
 8008988:	20000634 	.word	0x20000634

0800898c <__malloc_unlock>:
 800898c:	4801      	ldr	r0, [pc, #4]	; (8008994 <__malloc_unlock+0x8>)
 800898e:	f7ff b90e 	b.w	8007bae <__retarget_lock_release_recursive>
 8008992:	bf00      	nop
 8008994:	20000634 	.word	0x20000634

08008998 <_Balloc>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	69c6      	ldr	r6, [r0, #28]
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	b976      	cbnz	r6, 80089c0 <_Balloc+0x28>
 80089a2:	2010      	movs	r0, #16
 80089a4:	f7ff ff44 	bl	8008830 <malloc>
 80089a8:	4602      	mov	r2, r0
 80089aa:	61e0      	str	r0, [r4, #28]
 80089ac:	b920      	cbnz	r0, 80089b8 <_Balloc+0x20>
 80089ae:	4b18      	ldr	r3, [pc, #96]	; (8008a10 <_Balloc+0x78>)
 80089b0:	4818      	ldr	r0, [pc, #96]	; (8008a14 <_Balloc+0x7c>)
 80089b2:	216b      	movs	r1, #107	; 0x6b
 80089b4:	f000 fdaa 	bl	800950c <__assert_func>
 80089b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089bc:	6006      	str	r6, [r0, #0]
 80089be:	60c6      	str	r6, [r0, #12]
 80089c0:	69e6      	ldr	r6, [r4, #28]
 80089c2:	68f3      	ldr	r3, [r6, #12]
 80089c4:	b183      	cbz	r3, 80089e8 <_Balloc+0x50>
 80089c6:	69e3      	ldr	r3, [r4, #28]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80089ce:	b9b8      	cbnz	r0, 8008a00 <_Balloc+0x68>
 80089d0:	2101      	movs	r1, #1
 80089d2:	fa01 f605 	lsl.w	r6, r1, r5
 80089d6:	1d72      	adds	r2, r6, #5
 80089d8:	0092      	lsls	r2, r2, #2
 80089da:	4620      	mov	r0, r4
 80089dc:	f000 fdb4 	bl	8009548 <_calloc_r>
 80089e0:	b160      	cbz	r0, 80089fc <_Balloc+0x64>
 80089e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80089e6:	e00e      	b.n	8008a06 <_Balloc+0x6e>
 80089e8:	2221      	movs	r2, #33	; 0x21
 80089ea:	2104      	movs	r1, #4
 80089ec:	4620      	mov	r0, r4
 80089ee:	f000 fdab 	bl	8009548 <_calloc_r>
 80089f2:	69e3      	ldr	r3, [r4, #28]
 80089f4:	60f0      	str	r0, [r6, #12]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1e4      	bne.n	80089c6 <_Balloc+0x2e>
 80089fc:	2000      	movs	r0, #0
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	6802      	ldr	r2, [r0, #0]
 8008a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a06:	2300      	movs	r3, #0
 8008a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a0c:	e7f7      	b.n	80089fe <_Balloc+0x66>
 8008a0e:	bf00      	nop
 8008a10:	0809fe71 	.word	0x0809fe71
 8008a14:	0809fef1 	.word	0x0809fef1

08008a18 <_Bfree>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	69c6      	ldr	r6, [r0, #28]
 8008a1c:	4605      	mov	r5, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	b976      	cbnz	r6, 8008a40 <_Bfree+0x28>
 8008a22:	2010      	movs	r0, #16
 8008a24:	f7ff ff04 	bl	8008830 <malloc>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	61e8      	str	r0, [r5, #28]
 8008a2c:	b920      	cbnz	r0, 8008a38 <_Bfree+0x20>
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <_Bfree+0x3c>)
 8008a30:	4809      	ldr	r0, [pc, #36]	; (8008a58 <_Bfree+0x40>)
 8008a32:	218f      	movs	r1, #143	; 0x8f
 8008a34:	f000 fd6a 	bl	800950c <__assert_func>
 8008a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a3c:	6006      	str	r6, [r0, #0]
 8008a3e:	60c6      	str	r6, [r0, #12]
 8008a40:	b13c      	cbz	r4, 8008a52 <_Bfree+0x3a>
 8008a42:	69eb      	ldr	r3, [r5, #28]
 8008a44:	6862      	ldr	r2, [r4, #4]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008a4c:	6021      	str	r1, [r4, #0]
 8008a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008a52:	bd70      	pop	{r4, r5, r6, pc}
 8008a54:	0809fe71 	.word	0x0809fe71
 8008a58:	0809fef1 	.word	0x0809fef1

08008a5c <__multadd>:
 8008a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a60:	690d      	ldr	r5, [r1, #16]
 8008a62:	4607      	mov	r7, r0
 8008a64:	460c      	mov	r4, r1
 8008a66:	461e      	mov	r6, r3
 8008a68:	f101 0c14 	add.w	ip, r1, #20
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8008a72:	b299      	uxth	r1, r3
 8008a74:	fb02 6101 	mla	r1, r2, r1, r6
 8008a78:	0c1e      	lsrs	r6, r3, #16
 8008a7a:	0c0b      	lsrs	r3, r1, #16
 8008a7c:	fb02 3306 	mla	r3, r2, r6, r3
 8008a80:	b289      	uxth	r1, r1
 8008a82:	3001      	adds	r0, #1
 8008a84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a88:	4285      	cmp	r5, r0
 8008a8a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a92:	dcec      	bgt.n	8008a6e <__multadd+0x12>
 8008a94:	b30e      	cbz	r6, 8008ada <__multadd+0x7e>
 8008a96:	68a3      	ldr	r3, [r4, #8]
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	dc19      	bgt.n	8008ad0 <__multadd+0x74>
 8008a9c:	6861      	ldr	r1, [r4, #4]
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	3101      	adds	r1, #1
 8008aa2:	f7ff ff79 	bl	8008998 <_Balloc>
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	b928      	cbnz	r0, 8008ab6 <__multadd+0x5a>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	4b0c      	ldr	r3, [pc, #48]	; (8008ae0 <__multadd+0x84>)
 8008aae:	480d      	ldr	r0, [pc, #52]	; (8008ae4 <__multadd+0x88>)
 8008ab0:	21ba      	movs	r1, #186	; 0xba
 8008ab2:	f000 fd2b 	bl	800950c <__assert_func>
 8008ab6:	6922      	ldr	r2, [r4, #16]
 8008ab8:	3202      	adds	r2, #2
 8008aba:	f104 010c 	add.w	r1, r4, #12
 8008abe:	0092      	lsls	r2, r2, #2
 8008ac0:	300c      	adds	r0, #12
 8008ac2:	f000 fd15 	bl	80094f0 <memcpy>
 8008ac6:	4621      	mov	r1, r4
 8008ac8:	4638      	mov	r0, r7
 8008aca:	f7ff ffa5 	bl	8008a18 <_Bfree>
 8008ace:	4644      	mov	r4, r8
 8008ad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008ad4:	3501      	adds	r5, #1
 8008ad6:	615e      	str	r6, [r3, #20]
 8008ad8:	6125      	str	r5, [r4, #16]
 8008ada:	4620      	mov	r0, r4
 8008adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae0:	0809fee0 	.word	0x0809fee0
 8008ae4:	0809fef1 	.word	0x0809fef1

08008ae8 <__hi0bits>:
 8008ae8:	0c03      	lsrs	r3, r0, #16
 8008aea:	041b      	lsls	r3, r3, #16
 8008aec:	b9d3      	cbnz	r3, 8008b24 <__hi0bits+0x3c>
 8008aee:	0400      	lsls	r0, r0, #16
 8008af0:	2310      	movs	r3, #16
 8008af2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008af6:	bf04      	itt	eq
 8008af8:	0200      	lsleq	r0, r0, #8
 8008afa:	3308      	addeq	r3, #8
 8008afc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008b00:	bf04      	itt	eq
 8008b02:	0100      	lsleq	r0, r0, #4
 8008b04:	3304      	addeq	r3, #4
 8008b06:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008b0a:	bf04      	itt	eq
 8008b0c:	0080      	lsleq	r0, r0, #2
 8008b0e:	3302      	addeq	r3, #2
 8008b10:	2800      	cmp	r0, #0
 8008b12:	db05      	blt.n	8008b20 <__hi0bits+0x38>
 8008b14:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008b18:	f103 0301 	add.w	r3, r3, #1
 8008b1c:	bf08      	it	eq
 8008b1e:	2320      	moveq	r3, #32
 8008b20:	4618      	mov	r0, r3
 8008b22:	4770      	bx	lr
 8008b24:	2300      	movs	r3, #0
 8008b26:	e7e4      	b.n	8008af2 <__hi0bits+0xa>

08008b28 <__lo0bits>:
 8008b28:	6803      	ldr	r3, [r0, #0]
 8008b2a:	f013 0207 	ands.w	r2, r3, #7
 8008b2e:	d00c      	beq.n	8008b4a <__lo0bits+0x22>
 8008b30:	07d9      	lsls	r1, r3, #31
 8008b32:	d422      	bmi.n	8008b7a <__lo0bits+0x52>
 8008b34:	079a      	lsls	r2, r3, #30
 8008b36:	bf49      	itett	mi
 8008b38:	085b      	lsrmi	r3, r3, #1
 8008b3a:	089b      	lsrpl	r3, r3, #2
 8008b3c:	6003      	strmi	r3, [r0, #0]
 8008b3e:	2201      	movmi	r2, #1
 8008b40:	bf5c      	itt	pl
 8008b42:	6003      	strpl	r3, [r0, #0]
 8008b44:	2202      	movpl	r2, #2
 8008b46:	4610      	mov	r0, r2
 8008b48:	4770      	bx	lr
 8008b4a:	b299      	uxth	r1, r3
 8008b4c:	b909      	cbnz	r1, 8008b52 <__lo0bits+0x2a>
 8008b4e:	0c1b      	lsrs	r3, r3, #16
 8008b50:	2210      	movs	r2, #16
 8008b52:	b2d9      	uxtb	r1, r3
 8008b54:	b909      	cbnz	r1, 8008b5a <__lo0bits+0x32>
 8008b56:	3208      	adds	r2, #8
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	0719      	lsls	r1, r3, #28
 8008b5c:	bf04      	itt	eq
 8008b5e:	091b      	lsreq	r3, r3, #4
 8008b60:	3204      	addeq	r2, #4
 8008b62:	0799      	lsls	r1, r3, #30
 8008b64:	bf04      	itt	eq
 8008b66:	089b      	lsreq	r3, r3, #2
 8008b68:	3202      	addeq	r2, #2
 8008b6a:	07d9      	lsls	r1, r3, #31
 8008b6c:	d403      	bmi.n	8008b76 <__lo0bits+0x4e>
 8008b6e:	085b      	lsrs	r3, r3, #1
 8008b70:	f102 0201 	add.w	r2, r2, #1
 8008b74:	d003      	beq.n	8008b7e <__lo0bits+0x56>
 8008b76:	6003      	str	r3, [r0, #0]
 8008b78:	e7e5      	b.n	8008b46 <__lo0bits+0x1e>
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	e7e3      	b.n	8008b46 <__lo0bits+0x1e>
 8008b7e:	2220      	movs	r2, #32
 8008b80:	e7e1      	b.n	8008b46 <__lo0bits+0x1e>
	...

08008b84 <__i2b>:
 8008b84:	b510      	push	{r4, lr}
 8008b86:	460c      	mov	r4, r1
 8008b88:	2101      	movs	r1, #1
 8008b8a:	f7ff ff05 	bl	8008998 <_Balloc>
 8008b8e:	4602      	mov	r2, r0
 8008b90:	b928      	cbnz	r0, 8008b9e <__i2b+0x1a>
 8008b92:	4b05      	ldr	r3, [pc, #20]	; (8008ba8 <__i2b+0x24>)
 8008b94:	4805      	ldr	r0, [pc, #20]	; (8008bac <__i2b+0x28>)
 8008b96:	f240 1145 	movw	r1, #325	; 0x145
 8008b9a:	f000 fcb7 	bl	800950c <__assert_func>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	6144      	str	r4, [r0, #20]
 8008ba2:	6103      	str	r3, [r0, #16]
 8008ba4:	bd10      	pop	{r4, pc}
 8008ba6:	bf00      	nop
 8008ba8:	0809fee0 	.word	0x0809fee0
 8008bac:	0809fef1 	.word	0x0809fef1

08008bb0 <__multiply>:
 8008bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb4:	4691      	mov	r9, r2
 8008bb6:	690a      	ldr	r2, [r1, #16]
 8008bb8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	bfb8      	it	lt
 8008bc0:	460b      	movlt	r3, r1
 8008bc2:	460c      	mov	r4, r1
 8008bc4:	bfbc      	itt	lt
 8008bc6:	464c      	movlt	r4, r9
 8008bc8:	4699      	movlt	r9, r3
 8008bca:	6927      	ldr	r7, [r4, #16]
 8008bcc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008bd0:	68a3      	ldr	r3, [r4, #8]
 8008bd2:	6861      	ldr	r1, [r4, #4]
 8008bd4:	eb07 060a 	add.w	r6, r7, sl
 8008bd8:	42b3      	cmp	r3, r6
 8008bda:	b085      	sub	sp, #20
 8008bdc:	bfb8      	it	lt
 8008bde:	3101      	addlt	r1, #1
 8008be0:	f7ff feda 	bl	8008998 <_Balloc>
 8008be4:	b930      	cbnz	r0, 8008bf4 <__multiply+0x44>
 8008be6:	4602      	mov	r2, r0
 8008be8:	4b44      	ldr	r3, [pc, #272]	; (8008cfc <__multiply+0x14c>)
 8008bea:	4845      	ldr	r0, [pc, #276]	; (8008d00 <__multiply+0x150>)
 8008bec:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008bf0:	f000 fc8c 	bl	800950c <__assert_func>
 8008bf4:	f100 0514 	add.w	r5, r0, #20
 8008bf8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008bfc:	462b      	mov	r3, r5
 8008bfe:	2200      	movs	r2, #0
 8008c00:	4543      	cmp	r3, r8
 8008c02:	d321      	bcc.n	8008c48 <__multiply+0x98>
 8008c04:	f104 0314 	add.w	r3, r4, #20
 8008c08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008c0c:	f109 0314 	add.w	r3, r9, #20
 8008c10:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008c14:	9202      	str	r2, [sp, #8]
 8008c16:	1b3a      	subs	r2, r7, r4
 8008c18:	3a15      	subs	r2, #21
 8008c1a:	f022 0203 	bic.w	r2, r2, #3
 8008c1e:	3204      	adds	r2, #4
 8008c20:	f104 0115 	add.w	r1, r4, #21
 8008c24:	428f      	cmp	r7, r1
 8008c26:	bf38      	it	cc
 8008c28:	2204      	movcc	r2, #4
 8008c2a:	9201      	str	r2, [sp, #4]
 8008c2c:	9a02      	ldr	r2, [sp, #8]
 8008c2e:	9303      	str	r3, [sp, #12]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d80c      	bhi.n	8008c4e <__multiply+0x9e>
 8008c34:	2e00      	cmp	r6, #0
 8008c36:	dd03      	ble.n	8008c40 <__multiply+0x90>
 8008c38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d05b      	beq.n	8008cf8 <__multiply+0x148>
 8008c40:	6106      	str	r6, [r0, #16]
 8008c42:	b005      	add	sp, #20
 8008c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c48:	f843 2b04 	str.w	r2, [r3], #4
 8008c4c:	e7d8      	b.n	8008c00 <__multiply+0x50>
 8008c4e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c52:	f1ba 0f00 	cmp.w	sl, #0
 8008c56:	d024      	beq.n	8008ca2 <__multiply+0xf2>
 8008c58:	f104 0e14 	add.w	lr, r4, #20
 8008c5c:	46a9      	mov	r9, r5
 8008c5e:	f04f 0c00 	mov.w	ip, #0
 8008c62:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c66:	f8d9 1000 	ldr.w	r1, [r9]
 8008c6a:	fa1f fb82 	uxth.w	fp, r2
 8008c6e:	b289      	uxth	r1, r1
 8008c70:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c74:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c78:	f8d9 2000 	ldr.w	r2, [r9]
 8008c7c:	4461      	add	r1, ip
 8008c7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c82:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c8a:	b289      	uxth	r1, r1
 8008c8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c90:	4577      	cmp	r7, lr
 8008c92:	f849 1b04 	str.w	r1, [r9], #4
 8008c96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c9a:	d8e2      	bhi.n	8008c62 <__multiply+0xb2>
 8008c9c:	9a01      	ldr	r2, [sp, #4]
 8008c9e:	f845 c002 	str.w	ip, [r5, r2]
 8008ca2:	9a03      	ldr	r2, [sp, #12]
 8008ca4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ca8:	3304      	adds	r3, #4
 8008caa:	f1b9 0f00 	cmp.w	r9, #0
 8008cae:	d021      	beq.n	8008cf4 <__multiply+0x144>
 8008cb0:	6829      	ldr	r1, [r5, #0]
 8008cb2:	f104 0c14 	add.w	ip, r4, #20
 8008cb6:	46ae      	mov	lr, r5
 8008cb8:	f04f 0a00 	mov.w	sl, #0
 8008cbc:	f8bc b000 	ldrh.w	fp, [ip]
 8008cc0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008cc4:	fb09 220b 	mla	r2, r9, fp, r2
 8008cc8:	4452      	add	r2, sl
 8008cca:	b289      	uxth	r1, r1
 8008ccc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008cd0:	f84e 1b04 	str.w	r1, [lr], #4
 8008cd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008cd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cdc:	f8be 1000 	ldrh.w	r1, [lr]
 8008ce0:	fb09 110a 	mla	r1, r9, sl, r1
 8008ce4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008ce8:	4567      	cmp	r7, ip
 8008cea:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008cee:	d8e5      	bhi.n	8008cbc <__multiply+0x10c>
 8008cf0:	9a01      	ldr	r2, [sp, #4]
 8008cf2:	50a9      	str	r1, [r5, r2]
 8008cf4:	3504      	adds	r5, #4
 8008cf6:	e799      	b.n	8008c2c <__multiply+0x7c>
 8008cf8:	3e01      	subs	r6, #1
 8008cfa:	e79b      	b.n	8008c34 <__multiply+0x84>
 8008cfc:	0809fee0 	.word	0x0809fee0
 8008d00:	0809fef1 	.word	0x0809fef1

08008d04 <__pow5mult>:
 8008d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d08:	4615      	mov	r5, r2
 8008d0a:	f012 0203 	ands.w	r2, r2, #3
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460f      	mov	r7, r1
 8008d12:	d007      	beq.n	8008d24 <__pow5mult+0x20>
 8008d14:	4c25      	ldr	r4, [pc, #148]	; (8008dac <__pow5mult+0xa8>)
 8008d16:	3a01      	subs	r2, #1
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d1e:	f7ff fe9d 	bl	8008a5c <__multadd>
 8008d22:	4607      	mov	r7, r0
 8008d24:	10ad      	asrs	r5, r5, #2
 8008d26:	d03d      	beq.n	8008da4 <__pow5mult+0xa0>
 8008d28:	69f4      	ldr	r4, [r6, #28]
 8008d2a:	b97c      	cbnz	r4, 8008d4c <__pow5mult+0x48>
 8008d2c:	2010      	movs	r0, #16
 8008d2e:	f7ff fd7f 	bl	8008830 <malloc>
 8008d32:	4602      	mov	r2, r0
 8008d34:	61f0      	str	r0, [r6, #28]
 8008d36:	b928      	cbnz	r0, 8008d44 <__pow5mult+0x40>
 8008d38:	4b1d      	ldr	r3, [pc, #116]	; (8008db0 <__pow5mult+0xac>)
 8008d3a:	481e      	ldr	r0, [pc, #120]	; (8008db4 <__pow5mult+0xb0>)
 8008d3c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008d40:	f000 fbe4 	bl	800950c <__assert_func>
 8008d44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d48:	6004      	str	r4, [r0, #0]
 8008d4a:	60c4      	str	r4, [r0, #12]
 8008d4c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008d50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008d54:	b94c      	cbnz	r4, 8008d6a <__pow5mult+0x66>
 8008d56:	f240 2171 	movw	r1, #625	; 0x271
 8008d5a:	4630      	mov	r0, r6
 8008d5c:	f7ff ff12 	bl	8008b84 <__i2b>
 8008d60:	2300      	movs	r3, #0
 8008d62:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d66:	4604      	mov	r4, r0
 8008d68:	6003      	str	r3, [r0, #0]
 8008d6a:	f04f 0900 	mov.w	r9, #0
 8008d6e:	07eb      	lsls	r3, r5, #31
 8008d70:	d50a      	bpl.n	8008d88 <__pow5mult+0x84>
 8008d72:	4639      	mov	r1, r7
 8008d74:	4622      	mov	r2, r4
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7ff ff1a 	bl	8008bb0 <__multiply>
 8008d7c:	4639      	mov	r1, r7
 8008d7e:	4680      	mov	r8, r0
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7ff fe49 	bl	8008a18 <_Bfree>
 8008d86:	4647      	mov	r7, r8
 8008d88:	106d      	asrs	r5, r5, #1
 8008d8a:	d00b      	beq.n	8008da4 <__pow5mult+0xa0>
 8008d8c:	6820      	ldr	r0, [r4, #0]
 8008d8e:	b938      	cbnz	r0, 8008da0 <__pow5mult+0x9c>
 8008d90:	4622      	mov	r2, r4
 8008d92:	4621      	mov	r1, r4
 8008d94:	4630      	mov	r0, r6
 8008d96:	f7ff ff0b 	bl	8008bb0 <__multiply>
 8008d9a:	6020      	str	r0, [r4, #0]
 8008d9c:	f8c0 9000 	str.w	r9, [r0]
 8008da0:	4604      	mov	r4, r0
 8008da2:	e7e4      	b.n	8008d6e <__pow5mult+0x6a>
 8008da4:	4638      	mov	r0, r7
 8008da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008daa:	bf00      	nop
 8008dac:	080a0040 	.word	0x080a0040
 8008db0:	0809fe71 	.word	0x0809fe71
 8008db4:	0809fef1 	.word	0x0809fef1

08008db8 <__lshift>:
 8008db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dbc:	460c      	mov	r4, r1
 8008dbe:	6849      	ldr	r1, [r1, #4]
 8008dc0:	6923      	ldr	r3, [r4, #16]
 8008dc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	4607      	mov	r7, r0
 8008dca:	4691      	mov	r9, r2
 8008dcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008dd0:	f108 0601 	add.w	r6, r8, #1
 8008dd4:	42b3      	cmp	r3, r6
 8008dd6:	db0b      	blt.n	8008df0 <__lshift+0x38>
 8008dd8:	4638      	mov	r0, r7
 8008dda:	f7ff fddd 	bl	8008998 <_Balloc>
 8008dde:	4605      	mov	r5, r0
 8008de0:	b948      	cbnz	r0, 8008df6 <__lshift+0x3e>
 8008de2:	4602      	mov	r2, r0
 8008de4:	4b28      	ldr	r3, [pc, #160]	; (8008e88 <__lshift+0xd0>)
 8008de6:	4829      	ldr	r0, [pc, #164]	; (8008e8c <__lshift+0xd4>)
 8008de8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008dec:	f000 fb8e 	bl	800950c <__assert_func>
 8008df0:	3101      	adds	r1, #1
 8008df2:	005b      	lsls	r3, r3, #1
 8008df4:	e7ee      	b.n	8008dd4 <__lshift+0x1c>
 8008df6:	2300      	movs	r3, #0
 8008df8:	f100 0114 	add.w	r1, r0, #20
 8008dfc:	f100 0210 	add.w	r2, r0, #16
 8008e00:	4618      	mov	r0, r3
 8008e02:	4553      	cmp	r3, sl
 8008e04:	db33      	blt.n	8008e6e <__lshift+0xb6>
 8008e06:	6920      	ldr	r0, [r4, #16]
 8008e08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008e0c:	f104 0314 	add.w	r3, r4, #20
 8008e10:	f019 091f 	ands.w	r9, r9, #31
 8008e14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008e1c:	d02b      	beq.n	8008e76 <__lshift+0xbe>
 8008e1e:	f1c9 0e20 	rsb	lr, r9, #32
 8008e22:	468a      	mov	sl, r1
 8008e24:	2200      	movs	r2, #0
 8008e26:	6818      	ldr	r0, [r3, #0]
 8008e28:	fa00 f009 	lsl.w	r0, r0, r9
 8008e2c:	4310      	orrs	r0, r2
 8008e2e:	f84a 0b04 	str.w	r0, [sl], #4
 8008e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e36:	459c      	cmp	ip, r3
 8008e38:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e3c:	d8f3      	bhi.n	8008e26 <__lshift+0x6e>
 8008e3e:	ebac 0304 	sub.w	r3, ip, r4
 8008e42:	3b15      	subs	r3, #21
 8008e44:	f023 0303 	bic.w	r3, r3, #3
 8008e48:	3304      	adds	r3, #4
 8008e4a:	f104 0015 	add.w	r0, r4, #21
 8008e4e:	4584      	cmp	ip, r0
 8008e50:	bf38      	it	cc
 8008e52:	2304      	movcc	r3, #4
 8008e54:	50ca      	str	r2, [r1, r3]
 8008e56:	b10a      	cbz	r2, 8008e5c <__lshift+0xa4>
 8008e58:	f108 0602 	add.w	r6, r8, #2
 8008e5c:	3e01      	subs	r6, #1
 8008e5e:	4638      	mov	r0, r7
 8008e60:	612e      	str	r6, [r5, #16]
 8008e62:	4621      	mov	r1, r4
 8008e64:	f7ff fdd8 	bl	8008a18 <_Bfree>
 8008e68:	4628      	mov	r0, r5
 8008e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e72:	3301      	adds	r3, #1
 8008e74:	e7c5      	b.n	8008e02 <__lshift+0x4a>
 8008e76:	3904      	subs	r1, #4
 8008e78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e80:	459c      	cmp	ip, r3
 8008e82:	d8f9      	bhi.n	8008e78 <__lshift+0xc0>
 8008e84:	e7ea      	b.n	8008e5c <__lshift+0xa4>
 8008e86:	bf00      	nop
 8008e88:	0809fee0 	.word	0x0809fee0
 8008e8c:	0809fef1 	.word	0x0809fef1

08008e90 <__mcmp>:
 8008e90:	b530      	push	{r4, r5, lr}
 8008e92:	6902      	ldr	r2, [r0, #16]
 8008e94:	690c      	ldr	r4, [r1, #16]
 8008e96:	1b12      	subs	r2, r2, r4
 8008e98:	d10e      	bne.n	8008eb8 <__mcmp+0x28>
 8008e9a:	f100 0314 	add.w	r3, r0, #20
 8008e9e:	3114      	adds	r1, #20
 8008ea0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008ea4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008ea8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008eac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008eb0:	42a5      	cmp	r5, r4
 8008eb2:	d003      	beq.n	8008ebc <__mcmp+0x2c>
 8008eb4:	d305      	bcc.n	8008ec2 <__mcmp+0x32>
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	4610      	mov	r0, r2
 8008eba:	bd30      	pop	{r4, r5, pc}
 8008ebc:	4283      	cmp	r3, r0
 8008ebe:	d3f3      	bcc.n	8008ea8 <__mcmp+0x18>
 8008ec0:	e7fa      	b.n	8008eb8 <__mcmp+0x28>
 8008ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec6:	e7f7      	b.n	8008eb8 <__mcmp+0x28>

08008ec8 <__mdiff>:
 8008ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	460c      	mov	r4, r1
 8008ece:	4606      	mov	r6, r0
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	4690      	mov	r8, r2
 8008ed6:	f7ff ffdb 	bl	8008e90 <__mcmp>
 8008eda:	1e05      	subs	r5, r0, #0
 8008edc:	d110      	bne.n	8008f00 <__mdiff+0x38>
 8008ede:	4629      	mov	r1, r5
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f7ff fd59 	bl	8008998 <_Balloc>
 8008ee6:	b930      	cbnz	r0, 8008ef6 <__mdiff+0x2e>
 8008ee8:	4b3a      	ldr	r3, [pc, #232]	; (8008fd4 <__mdiff+0x10c>)
 8008eea:	4602      	mov	r2, r0
 8008eec:	f240 2137 	movw	r1, #567	; 0x237
 8008ef0:	4839      	ldr	r0, [pc, #228]	; (8008fd8 <__mdiff+0x110>)
 8008ef2:	f000 fb0b 	bl	800950c <__assert_func>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f00:	bfa4      	itt	ge
 8008f02:	4643      	movge	r3, r8
 8008f04:	46a0      	movge	r8, r4
 8008f06:	4630      	mov	r0, r6
 8008f08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008f0c:	bfa6      	itte	ge
 8008f0e:	461c      	movge	r4, r3
 8008f10:	2500      	movge	r5, #0
 8008f12:	2501      	movlt	r5, #1
 8008f14:	f7ff fd40 	bl	8008998 <_Balloc>
 8008f18:	b920      	cbnz	r0, 8008f24 <__mdiff+0x5c>
 8008f1a:	4b2e      	ldr	r3, [pc, #184]	; (8008fd4 <__mdiff+0x10c>)
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	f240 2145 	movw	r1, #581	; 0x245
 8008f22:	e7e5      	b.n	8008ef0 <__mdiff+0x28>
 8008f24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008f28:	6926      	ldr	r6, [r4, #16]
 8008f2a:	60c5      	str	r5, [r0, #12]
 8008f2c:	f104 0914 	add.w	r9, r4, #20
 8008f30:	f108 0514 	add.w	r5, r8, #20
 8008f34:	f100 0e14 	add.w	lr, r0, #20
 8008f38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008f3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f40:	f108 0210 	add.w	r2, r8, #16
 8008f44:	46f2      	mov	sl, lr
 8008f46:	2100      	movs	r1, #0
 8008f48:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008f50:	fa11 f88b 	uxtah	r8, r1, fp
 8008f54:	b299      	uxth	r1, r3
 8008f56:	0c1b      	lsrs	r3, r3, #16
 8008f58:	eba8 0801 	sub.w	r8, r8, r1
 8008f5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f60:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f64:	fa1f f888 	uxth.w	r8, r8
 8008f68:	1419      	asrs	r1, r3, #16
 8008f6a:	454e      	cmp	r6, r9
 8008f6c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f70:	f84a 3b04 	str.w	r3, [sl], #4
 8008f74:	d8e8      	bhi.n	8008f48 <__mdiff+0x80>
 8008f76:	1b33      	subs	r3, r6, r4
 8008f78:	3b15      	subs	r3, #21
 8008f7a:	f023 0303 	bic.w	r3, r3, #3
 8008f7e:	3304      	adds	r3, #4
 8008f80:	3415      	adds	r4, #21
 8008f82:	42a6      	cmp	r6, r4
 8008f84:	bf38      	it	cc
 8008f86:	2304      	movcc	r3, #4
 8008f88:	441d      	add	r5, r3
 8008f8a:	4473      	add	r3, lr
 8008f8c:	469e      	mov	lr, r3
 8008f8e:	462e      	mov	r6, r5
 8008f90:	4566      	cmp	r6, ip
 8008f92:	d30e      	bcc.n	8008fb2 <__mdiff+0xea>
 8008f94:	f10c 0203 	add.w	r2, ip, #3
 8008f98:	1b52      	subs	r2, r2, r5
 8008f9a:	f022 0203 	bic.w	r2, r2, #3
 8008f9e:	3d03      	subs	r5, #3
 8008fa0:	45ac      	cmp	ip, r5
 8008fa2:	bf38      	it	cc
 8008fa4:	2200      	movcc	r2, #0
 8008fa6:	4413      	add	r3, r2
 8008fa8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008fac:	b17a      	cbz	r2, 8008fce <__mdiff+0x106>
 8008fae:	6107      	str	r7, [r0, #16]
 8008fb0:	e7a4      	b.n	8008efc <__mdiff+0x34>
 8008fb2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008fb6:	fa11 f288 	uxtah	r2, r1, r8
 8008fba:	1414      	asrs	r4, r2, #16
 8008fbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008fc0:	b292      	uxth	r2, r2
 8008fc2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008fc6:	f84e 2b04 	str.w	r2, [lr], #4
 8008fca:	1421      	asrs	r1, r4, #16
 8008fcc:	e7e0      	b.n	8008f90 <__mdiff+0xc8>
 8008fce:	3f01      	subs	r7, #1
 8008fd0:	e7ea      	b.n	8008fa8 <__mdiff+0xe0>
 8008fd2:	bf00      	nop
 8008fd4:	0809fee0 	.word	0x0809fee0
 8008fd8:	0809fef1 	.word	0x0809fef1

08008fdc <__d2b>:
 8008fdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008fe0:	460f      	mov	r7, r1
 8008fe2:	2101      	movs	r1, #1
 8008fe4:	ec59 8b10 	vmov	r8, r9, d0
 8008fe8:	4616      	mov	r6, r2
 8008fea:	f7ff fcd5 	bl	8008998 <_Balloc>
 8008fee:	4604      	mov	r4, r0
 8008ff0:	b930      	cbnz	r0, 8009000 <__d2b+0x24>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	4b24      	ldr	r3, [pc, #144]	; (8009088 <__d2b+0xac>)
 8008ff6:	4825      	ldr	r0, [pc, #148]	; (800908c <__d2b+0xb0>)
 8008ff8:	f240 310f 	movw	r1, #783	; 0x30f
 8008ffc:	f000 fa86 	bl	800950c <__assert_func>
 8009000:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009008:	bb2d      	cbnz	r5, 8009056 <__d2b+0x7a>
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	f1b8 0300 	subs.w	r3, r8, #0
 8009010:	d026      	beq.n	8009060 <__d2b+0x84>
 8009012:	4668      	mov	r0, sp
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	f7ff fd87 	bl	8008b28 <__lo0bits>
 800901a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800901e:	b1e8      	cbz	r0, 800905c <__d2b+0x80>
 8009020:	f1c0 0320 	rsb	r3, r0, #32
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	430b      	orrs	r3, r1
 800902a:	40c2      	lsrs	r2, r0
 800902c:	6163      	str	r3, [r4, #20]
 800902e:	9201      	str	r2, [sp, #4]
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	61a3      	str	r3, [r4, #24]
 8009034:	2b00      	cmp	r3, #0
 8009036:	bf14      	ite	ne
 8009038:	2202      	movne	r2, #2
 800903a:	2201      	moveq	r2, #1
 800903c:	6122      	str	r2, [r4, #16]
 800903e:	b1bd      	cbz	r5, 8009070 <__d2b+0x94>
 8009040:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009044:	4405      	add	r5, r0
 8009046:	603d      	str	r5, [r7, #0]
 8009048:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800904c:	6030      	str	r0, [r6, #0]
 800904e:	4620      	mov	r0, r4
 8009050:	b003      	add	sp, #12
 8009052:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800905a:	e7d6      	b.n	800900a <__d2b+0x2e>
 800905c:	6161      	str	r1, [r4, #20]
 800905e:	e7e7      	b.n	8009030 <__d2b+0x54>
 8009060:	a801      	add	r0, sp, #4
 8009062:	f7ff fd61 	bl	8008b28 <__lo0bits>
 8009066:	9b01      	ldr	r3, [sp, #4]
 8009068:	6163      	str	r3, [r4, #20]
 800906a:	3020      	adds	r0, #32
 800906c:	2201      	movs	r2, #1
 800906e:	e7e5      	b.n	800903c <__d2b+0x60>
 8009070:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009074:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009078:	6038      	str	r0, [r7, #0]
 800907a:	6918      	ldr	r0, [r3, #16]
 800907c:	f7ff fd34 	bl	8008ae8 <__hi0bits>
 8009080:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009084:	e7e2      	b.n	800904c <__d2b+0x70>
 8009086:	bf00      	nop
 8009088:	0809fee0 	.word	0x0809fee0
 800908c:	0809fef1 	.word	0x0809fef1

08009090 <__ssputs_r>:
 8009090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009094:	688e      	ldr	r6, [r1, #8]
 8009096:	461f      	mov	r7, r3
 8009098:	42be      	cmp	r6, r7
 800909a:	680b      	ldr	r3, [r1, #0]
 800909c:	4682      	mov	sl, r0
 800909e:	460c      	mov	r4, r1
 80090a0:	4690      	mov	r8, r2
 80090a2:	d82c      	bhi.n	80090fe <__ssputs_r+0x6e>
 80090a4:	898a      	ldrh	r2, [r1, #12]
 80090a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090aa:	d026      	beq.n	80090fa <__ssputs_r+0x6a>
 80090ac:	6965      	ldr	r5, [r4, #20]
 80090ae:	6909      	ldr	r1, [r1, #16]
 80090b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090b4:	eba3 0901 	sub.w	r9, r3, r1
 80090b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090bc:	1c7b      	adds	r3, r7, #1
 80090be:	444b      	add	r3, r9
 80090c0:	106d      	asrs	r5, r5, #1
 80090c2:	429d      	cmp	r5, r3
 80090c4:	bf38      	it	cc
 80090c6:	461d      	movcc	r5, r3
 80090c8:	0553      	lsls	r3, r2, #21
 80090ca:	d527      	bpl.n	800911c <__ssputs_r+0x8c>
 80090cc:	4629      	mov	r1, r5
 80090ce:	f7ff fbd7 	bl	8008880 <_malloc_r>
 80090d2:	4606      	mov	r6, r0
 80090d4:	b360      	cbz	r0, 8009130 <__ssputs_r+0xa0>
 80090d6:	6921      	ldr	r1, [r4, #16]
 80090d8:	464a      	mov	r2, r9
 80090da:	f000 fa09 	bl	80094f0 <memcpy>
 80090de:	89a3      	ldrh	r3, [r4, #12]
 80090e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e8:	81a3      	strh	r3, [r4, #12]
 80090ea:	6126      	str	r6, [r4, #16]
 80090ec:	6165      	str	r5, [r4, #20]
 80090ee:	444e      	add	r6, r9
 80090f0:	eba5 0509 	sub.w	r5, r5, r9
 80090f4:	6026      	str	r6, [r4, #0]
 80090f6:	60a5      	str	r5, [r4, #8]
 80090f8:	463e      	mov	r6, r7
 80090fa:	42be      	cmp	r6, r7
 80090fc:	d900      	bls.n	8009100 <__ssputs_r+0x70>
 80090fe:	463e      	mov	r6, r7
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	4632      	mov	r2, r6
 8009104:	4641      	mov	r1, r8
 8009106:	f000 f9c9 	bl	800949c <memmove>
 800910a:	68a3      	ldr	r3, [r4, #8]
 800910c:	1b9b      	subs	r3, r3, r6
 800910e:	60a3      	str	r3, [r4, #8]
 8009110:	6823      	ldr	r3, [r4, #0]
 8009112:	4433      	add	r3, r6
 8009114:	6023      	str	r3, [r4, #0]
 8009116:	2000      	movs	r0, #0
 8009118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800911c:	462a      	mov	r2, r5
 800911e:	f000 fa3b 	bl	8009598 <_realloc_r>
 8009122:	4606      	mov	r6, r0
 8009124:	2800      	cmp	r0, #0
 8009126:	d1e0      	bne.n	80090ea <__ssputs_r+0x5a>
 8009128:	6921      	ldr	r1, [r4, #16]
 800912a:	4650      	mov	r0, sl
 800912c:	f7ff fb34 	bl	8008798 <_free_r>
 8009130:	230c      	movs	r3, #12
 8009132:	f8ca 3000 	str.w	r3, [sl]
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800913c:	81a3      	strh	r3, [r4, #12]
 800913e:	f04f 30ff 	mov.w	r0, #4294967295
 8009142:	e7e9      	b.n	8009118 <__ssputs_r+0x88>

08009144 <_svfiprintf_r>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	4698      	mov	r8, r3
 800914a:	898b      	ldrh	r3, [r1, #12]
 800914c:	061b      	lsls	r3, r3, #24
 800914e:	b09d      	sub	sp, #116	; 0x74
 8009150:	4607      	mov	r7, r0
 8009152:	460d      	mov	r5, r1
 8009154:	4614      	mov	r4, r2
 8009156:	d50e      	bpl.n	8009176 <_svfiprintf_r+0x32>
 8009158:	690b      	ldr	r3, [r1, #16]
 800915a:	b963      	cbnz	r3, 8009176 <_svfiprintf_r+0x32>
 800915c:	2140      	movs	r1, #64	; 0x40
 800915e:	f7ff fb8f 	bl	8008880 <_malloc_r>
 8009162:	6028      	str	r0, [r5, #0]
 8009164:	6128      	str	r0, [r5, #16]
 8009166:	b920      	cbnz	r0, 8009172 <_svfiprintf_r+0x2e>
 8009168:	230c      	movs	r3, #12
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	e0d0      	b.n	8009314 <_svfiprintf_r+0x1d0>
 8009172:	2340      	movs	r3, #64	; 0x40
 8009174:	616b      	str	r3, [r5, #20]
 8009176:	2300      	movs	r3, #0
 8009178:	9309      	str	r3, [sp, #36]	; 0x24
 800917a:	2320      	movs	r3, #32
 800917c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009180:	f8cd 800c 	str.w	r8, [sp, #12]
 8009184:	2330      	movs	r3, #48	; 0x30
 8009186:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800932c <_svfiprintf_r+0x1e8>
 800918a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800918e:	f04f 0901 	mov.w	r9, #1
 8009192:	4623      	mov	r3, r4
 8009194:	469a      	mov	sl, r3
 8009196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800919a:	b10a      	cbz	r2, 80091a0 <_svfiprintf_r+0x5c>
 800919c:	2a25      	cmp	r2, #37	; 0x25
 800919e:	d1f9      	bne.n	8009194 <_svfiprintf_r+0x50>
 80091a0:	ebba 0b04 	subs.w	fp, sl, r4
 80091a4:	d00b      	beq.n	80091be <_svfiprintf_r+0x7a>
 80091a6:	465b      	mov	r3, fp
 80091a8:	4622      	mov	r2, r4
 80091aa:	4629      	mov	r1, r5
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7ff ff6f 	bl	8009090 <__ssputs_r>
 80091b2:	3001      	adds	r0, #1
 80091b4:	f000 80a9 	beq.w	800930a <_svfiprintf_r+0x1c6>
 80091b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091ba:	445a      	add	r2, fp
 80091bc:	9209      	str	r2, [sp, #36]	; 0x24
 80091be:	f89a 3000 	ldrb.w	r3, [sl]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 80a1 	beq.w	800930a <_svfiprintf_r+0x1c6>
 80091c8:	2300      	movs	r3, #0
 80091ca:	f04f 32ff 	mov.w	r2, #4294967295
 80091ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d2:	f10a 0a01 	add.w	sl, sl, #1
 80091d6:	9304      	str	r3, [sp, #16]
 80091d8:	9307      	str	r3, [sp, #28]
 80091da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091de:	931a      	str	r3, [sp, #104]	; 0x68
 80091e0:	4654      	mov	r4, sl
 80091e2:	2205      	movs	r2, #5
 80091e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091e8:	4850      	ldr	r0, [pc, #320]	; (800932c <_svfiprintf_r+0x1e8>)
 80091ea:	f7f7 f829 	bl	8000240 <memchr>
 80091ee:	9a04      	ldr	r2, [sp, #16]
 80091f0:	b9d8      	cbnz	r0, 800922a <_svfiprintf_r+0xe6>
 80091f2:	06d0      	lsls	r0, r2, #27
 80091f4:	bf44      	itt	mi
 80091f6:	2320      	movmi	r3, #32
 80091f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091fc:	0711      	lsls	r1, r2, #28
 80091fe:	bf44      	itt	mi
 8009200:	232b      	movmi	r3, #43	; 0x2b
 8009202:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009206:	f89a 3000 	ldrb.w	r3, [sl]
 800920a:	2b2a      	cmp	r3, #42	; 0x2a
 800920c:	d015      	beq.n	800923a <_svfiprintf_r+0xf6>
 800920e:	9a07      	ldr	r2, [sp, #28]
 8009210:	4654      	mov	r4, sl
 8009212:	2000      	movs	r0, #0
 8009214:	f04f 0c0a 	mov.w	ip, #10
 8009218:	4621      	mov	r1, r4
 800921a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800921e:	3b30      	subs	r3, #48	; 0x30
 8009220:	2b09      	cmp	r3, #9
 8009222:	d94d      	bls.n	80092c0 <_svfiprintf_r+0x17c>
 8009224:	b1b0      	cbz	r0, 8009254 <_svfiprintf_r+0x110>
 8009226:	9207      	str	r2, [sp, #28]
 8009228:	e014      	b.n	8009254 <_svfiprintf_r+0x110>
 800922a:	eba0 0308 	sub.w	r3, r0, r8
 800922e:	fa09 f303 	lsl.w	r3, r9, r3
 8009232:	4313      	orrs	r3, r2
 8009234:	9304      	str	r3, [sp, #16]
 8009236:	46a2      	mov	sl, r4
 8009238:	e7d2      	b.n	80091e0 <_svfiprintf_r+0x9c>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	1d19      	adds	r1, r3, #4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	9103      	str	r1, [sp, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	bfbb      	ittet	lt
 8009246:	425b      	neglt	r3, r3
 8009248:	f042 0202 	orrlt.w	r2, r2, #2
 800924c:	9307      	strge	r3, [sp, #28]
 800924e:	9307      	strlt	r3, [sp, #28]
 8009250:	bfb8      	it	lt
 8009252:	9204      	strlt	r2, [sp, #16]
 8009254:	7823      	ldrb	r3, [r4, #0]
 8009256:	2b2e      	cmp	r3, #46	; 0x2e
 8009258:	d10c      	bne.n	8009274 <_svfiprintf_r+0x130>
 800925a:	7863      	ldrb	r3, [r4, #1]
 800925c:	2b2a      	cmp	r3, #42	; 0x2a
 800925e:	d134      	bne.n	80092ca <_svfiprintf_r+0x186>
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	1d1a      	adds	r2, r3, #4
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	9203      	str	r2, [sp, #12]
 8009268:	2b00      	cmp	r3, #0
 800926a:	bfb8      	it	lt
 800926c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009270:	3402      	adds	r4, #2
 8009272:	9305      	str	r3, [sp, #20]
 8009274:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800933c <_svfiprintf_r+0x1f8>
 8009278:	7821      	ldrb	r1, [r4, #0]
 800927a:	2203      	movs	r2, #3
 800927c:	4650      	mov	r0, sl
 800927e:	f7f6 ffdf 	bl	8000240 <memchr>
 8009282:	b138      	cbz	r0, 8009294 <_svfiprintf_r+0x150>
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	eba0 000a 	sub.w	r0, r0, sl
 800928a:	2240      	movs	r2, #64	; 0x40
 800928c:	4082      	lsls	r2, r0
 800928e:	4313      	orrs	r3, r2
 8009290:	3401      	adds	r4, #1
 8009292:	9304      	str	r3, [sp, #16]
 8009294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009298:	4825      	ldr	r0, [pc, #148]	; (8009330 <_svfiprintf_r+0x1ec>)
 800929a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800929e:	2206      	movs	r2, #6
 80092a0:	f7f6 ffce 	bl	8000240 <memchr>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d038      	beq.n	800931a <_svfiprintf_r+0x1d6>
 80092a8:	4b22      	ldr	r3, [pc, #136]	; (8009334 <_svfiprintf_r+0x1f0>)
 80092aa:	bb1b      	cbnz	r3, 80092f4 <_svfiprintf_r+0x1b0>
 80092ac:	9b03      	ldr	r3, [sp, #12]
 80092ae:	3307      	adds	r3, #7
 80092b0:	f023 0307 	bic.w	r3, r3, #7
 80092b4:	3308      	adds	r3, #8
 80092b6:	9303      	str	r3, [sp, #12]
 80092b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ba:	4433      	add	r3, r6
 80092bc:	9309      	str	r3, [sp, #36]	; 0x24
 80092be:	e768      	b.n	8009192 <_svfiprintf_r+0x4e>
 80092c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c4:	460c      	mov	r4, r1
 80092c6:	2001      	movs	r0, #1
 80092c8:	e7a6      	b.n	8009218 <_svfiprintf_r+0xd4>
 80092ca:	2300      	movs	r3, #0
 80092cc:	3401      	adds	r4, #1
 80092ce:	9305      	str	r3, [sp, #20]
 80092d0:	4619      	mov	r1, r3
 80092d2:	f04f 0c0a 	mov.w	ip, #10
 80092d6:	4620      	mov	r0, r4
 80092d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092dc:	3a30      	subs	r2, #48	; 0x30
 80092de:	2a09      	cmp	r2, #9
 80092e0:	d903      	bls.n	80092ea <_svfiprintf_r+0x1a6>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0c6      	beq.n	8009274 <_svfiprintf_r+0x130>
 80092e6:	9105      	str	r1, [sp, #20]
 80092e8:	e7c4      	b.n	8009274 <_svfiprintf_r+0x130>
 80092ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ee:	4604      	mov	r4, r0
 80092f0:	2301      	movs	r3, #1
 80092f2:	e7f0      	b.n	80092d6 <_svfiprintf_r+0x192>
 80092f4:	ab03      	add	r3, sp, #12
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	462a      	mov	r2, r5
 80092fa:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <_svfiprintf_r+0x1f4>)
 80092fc:	a904      	add	r1, sp, #16
 80092fe:	4638      	mov	r0, r7
 8009300:	f7fd ff1a 	bl	8007138 <_printf_float>
 8009304:	1c42      	adds	r2, r0, #1
 8009306:	4606      	mov	r6, r0
 8009308:	d1d6      	bne.n	80092b8 <_svfiprintf_r+0x174>
 800930a:	89ab      	ldrh	r3, [r5, #12]
 800930c:	065b      	lsls	r3, r3, #25
 800930e:	f53f af2d 	bmi.w	800916c <_svfiprintf_r+0x28>
 8009312:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009314:	b01d      	add	sp, #116	; 0x74
 8009316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931a:	ab03      	add	r3, sp, #12
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	462a      	mov	r2, r5
 8009320:	4b05      	ldr	r3, [pc, #20]	; (8009338 <_svfiprintf_r+0x1f4>)
 8009322:	a904      	add	r1, sp, #16
 8009324:	4638      	mov	r0, r7
 8009326:	f7fe f98f 	bl	8007648 <_printf_i>
 800932a:	e7eb      	b.n	8009304 <_svfiprintf_r+0x1c0>
 800932c:	080a004c 	.word	0x080a004c
 8009330:	080a0056 	.word	0x080a0056
 8009334:	08007139 	.word	0x08007139
 8009338:	08009091 	.word	0x08009091
 800933c:	080a0052 	.word	0x080a0052

08009340 <__sflush_r>:
 8009340:	898a      	ldrh	r2, [r1, #12]
 8009342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009346:	4605      	mov	r5, r0
 8009348:	0710      	lsls	r0, r2, #28
 800934a:	460c      	mov	r4, r1
 800934c:	d458      	bmi.n	8009400 <__sflush_r+0xc0>
 800934e:	684b      	ldr	r3, [r1, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	dc05      	bgt.n	8009360 <__sflush_r+0x20>
 8009354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009356:	2b00      	cmp	r3, #0
 8009358:	dc02      	bgt.n	8009360 <__sflush_r+0x20>
 800935a:	2000      	movs	r0, #0
 800935c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009362:	2e00      	cmp	r6, #0
 8009364:	d0f9      	beq.n	800935a <__sflush_r+0x1a>
 8009366:	2300      	movs	r3, #0
 8009368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800936c:	682f      	ldr	r7, [r5, #0]
 800936e:	6a21      	ldr	r1, [r4, #32]
 8009370:	602b      	str	r3, [r5, #0]
 8009372:	d032      	beq.n	80093da <__sflush_r+0x9a>
 8009374:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009376:	89a3      	ldrh	r3, [r4, #12]
 8009378:	075a      	lsls	r2, r3, #29
 800937a:	d505      	bpl.n	8009388 <__sflush_r+0x48>
 800937c:	6863      	ldr	r3, [r4, #4]
 800937e:	1ac0      	subs	r0, r0, r3
 8009380:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009382:	b10b      	cbz	r3, 8009388 <__sflush_r+0x48>
 8009384:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009386:	1ac0      	subs	r0, r0, r3
 8009388:	2300      	movs	r3, #0
 800938a:	4602      	mov	r2, r0
 800938c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800938e:	6a21      	ldr	r1, [r4, #32]
 8009390:	4628      	mov	r0, r5
 8009392:	47b0      	blx	r6
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	89a3      	ldrh	r3, [r4, #12]
 8009398:	d106      	bne.n	80093a8 <__sflush_r+0x68>
 800939a:	6829      	ldr	r1, [r5, #0]
 800939c:	291d      	cmp	r1, #29
 800939e:	d82b      	bhi.n	80093f8 <__sflush_r+0xb8>
 80093a0:	4a29      	ldr	r2, [pc, #164]	; (8009448 <__sflush_r+0x108>)
 80093a2:	410a      	asrs	r2, r1
 80093a4:	07d6      	lsls	r6, r2, #31
 80093a6:	d427      	bmi.n	80093f8 <__sflush_r+0xb8>
 80093a8:	2200      	movs	r2, #0
 80093aa:	6062      	str	r2, [r4, #4]
 80093ac:	04d9      	lsls	r1, r3, #19
 80093ae:	6922      	ldr	r2, [r4, #16]
 80093b0:	6022      	str	r2, [r4, #0]
 80093b2:	d504      	bpl.n	80093be <__sflush_r+0x7e>
 80093b4:	1c42      	adds	r2, r0, #1
 80093b6:	d101      	bne.n	80093bc <__sflush_r+0x7c>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b903      	cbnz	r3, 80093be <__sflush_r+0x7e>
 80093bc:	6560      	str	r0, [r4, #84]	; 0x54
 80093be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093c0:	602f      	str	r7, [r5, #0]
 80093c2:	2900      	cmp	r1, #0
 80093c4:	d0c9      	beq.n	800935a <__sflush_r+0x1a>
 80093c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80093ca:	4299      	cmp	r1, r3
 80093cc:	d002      	beq.n	80093d4 <__sflush_r+0x94>
 80093ce:	4628      	mov	r0, r5
 80093d0:	f7ff f9e2 	bl	8008798 <_free_r>
 80093d4:	2000      	movs	r0, #0
 80093d6:	6360      	str	r0, [r4, #52]	; 0x34
 80093d8:	e7c0      	b.n	800935c <__sflush_r+0x1c>
 80093da:	2301      	movs	r3, #1
 80093dc:	4628      	mov	r0, r5
 80093de:	47b0      	blx	r6
 80093e0:	1c41      	adds	r1, r0, #1
 80093e2:	d1c8      	bne.n	8009376 <__sflush_r+0x36>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d0c5      	beq.n	8009376 <__sflush_r+0x36>
 80093ea:	2b1d      	cmp	r3, #29
 80093ec:	d001      	beq.n	80093f2 <__sflush_r+0xb2>
 80093ee:	2b16      	cmp	r3, #22
 80093f0:	d101      	bne.n	80093f6 <__sflush_r+0xb6>
 80093f2:	602f      	str	r7, [r5, #0]
 80093f4:	e7b1      	b.n	800935a <__sflush_r+0x1a>
 80093f6:	89a3      	ldrh	r3, [r4, #12]
 80093f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093fc:	81a3      	strh	r3, [r4, #12]
 80093fe:	e7ad      	b.n	800935c <__sflush_r+0x1c>
 8009400:	690f      	ldr	r7, [r1, #16]
 8009402:	2f00      	cmp	r7, #0
 8009404:	d0a9      	beq.n	800935a <__sflush_r+0x1a>
 8009406:	0793      	lsls	r3, r2, #30
 8009408:	680e      	ldr	r6, [r1, #0]
 800940a:	bf08      	it	eq
 800940c:	694b      	ldreq	r3, [r1, #20]
 800940e:	600f      	str	r7, [r1, #0]
 8009410:	bf18      	it	ne
 8009412:	2300      	movne	r3, #0
 8009414:	eba6 0807 	sub.w	r8, r6, r7
 8009418:	608b      	str	r3, [r1, #8]
 800941a:	f1b8 0f00 	cmp.w	r8, #0
 800941e:	dd9c      	ble.n	800935a <__sflush_r+0x1a>
 8009420:	6a21      	ldr	r1, [r4, #32]
 8009422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009424:	4643      	mov	r3, r8
 8009426:	463a      	mov	r2, r7
 8009428:	4628      	mov	r0, r5
 800942a:	47b0      	blx	r6
 800942c:	2800      	cmp	r0, #0
 800942e:	dc06      	bgt.n	800943e <__sflush_r+0xfe>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009436:	81a3      	strh	r3, [r4, #12]
 8009438:	f04f 30ff 	mov.w	r0, #4294967295
 800943c:	e78e      	b.n	800935c <__sflush_r+0x1c>
 800943e:	4407      	add	r7, r0
 8009440:	eba8 0800 	sub.w	r8, r8, r0
 8009444:	e7e9      	b.n	800941a <__sflush_r+0xda>
 8009446:	bf00      	nop
 8009448:	dfbffffe 	.word	0xdfbffffe

0800944c <_fflush_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	690b      	ldr	r3, [r1, #16]
 8009450:	4605      	mov	r5, r0
 8009452:	460c      	mov	r4, r1
 8009454:	b913      	cbnz	r3, 800945c <_fflush_r+0x10>
 8009456:	2500      	movs	r5, #0
 8009458:	4628      	mov	r0, r5
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	b118      	cbz	r0, 8009466 <_fflush_r+0x1a>
 800945e:	6a03      	ldr	r3, [r0, #32]
 8009460:	b90b      	cbnz	r3, 8009466 <_fflush_r+0x1a>
 8009462:	f7fe fa8d 	bl	8007980 <__sinit>
 8009466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0f3      	beq.n	8009456 <_fflush_r+0xa>
 800946e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009470:	07d0      	lsls	r0, r2, #31
 8009472:	d404      	bmi.n	800947e <_fflush_r+0x32>
 8009474:	0599      	lsls	r1, r3, #22
 8009476:	d402      	bmi.n	800947e <_fflush_r+0x32>
 8009478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800947a:	f7fe fb97 	bl	8007bac <__retarget_lock_acquire_recursive>
 800947e:	4628      	mov	r0, r5
 8009480:	4621      	mov	r1, r4
 8009482:	f7ff ff5d 	bl	8009340 <__sflush_r>
 8009486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009488:	07da      	lsls	r2, r3, #31
 800948a:	4605      	mov	r5, r0
 800948c:	d4e4      	bmi.n	8009458 <_fflush_r+0xc>
 800948e:	89a3      	ldrh	r3, [r4, #12]
 8009490:	059b      	lsls	r3, r3, #22
 8009492:	d4e1      	bmi.n	8009458 <_fflush_r+0xc>
 8009494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009496:	f7fe fb8a 	bl	8007bae <__retarget_lock_release_recursive>
 800949a:	e7dd      	b.n	8009458 <_fflush_r+0xc>

0800949c <memmove>:
 800949c:	4288      	cmp	r0, r1
 800949e:	b510      	push	{r4, lr}
 80094a0:	eb01 0402 	add.w	r4, r1, r2
 80094a4:	d902      	bls.n	80094ac <memmove+0x10>
 80094a6:	4284      	cmp	r4, r0
 80094a8:	4623      	mov	r3, r4
 80094aa:	d807      	bhi.n	80094bc <memmove+0x20>
 80094ac:	1e43      	subs	r3, r0, #1
 80094ae:	42a1      	cmp	r1, r4
 80094b0:	d008      	beq.n	80094c4 <memmove+0x28>
 80094b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094ba:	e7f8      	b.n	80094ae <memmove+0x12>
 80094bc:	4402      	add	r2, r0
 80094be:	4601      	mov	r1, r0
 80094c0:	428a      	cmp	r2, r1
 80094c2:	d100      	bne.n	80094c6 <memmove+0x2a>
 80094c4:	bd10      	pop	{r4, pc}
 80094c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094ce:	e7f7      	b.n	80094c0 <memmove+0x24>

080094d0 <_sbrk_r>:
 80094d0:	b538      	push	{r3, r4, r5, lr}
 80094d2:	4d06      	ldr	r5, [pc, #24]	; (80094ec <_sbrk_r+0x1c>)
 80094d4:	2300      	movs	r3, #0
 80094d6:	4604      	mov	r4, r0
 80094d8:	4608      	mov	r0, r1
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	f7f7 ffd4 	bl	8001488 <_sbrk>
 80094e0:	1c43      	adds	r3, r0, #1
 80094e2:	d102      	bne.n	80094ea <_sbrk_r+0x1a>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	b103      	cbz	r3, 80094ea <_sbrk_r+0x1a>
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	bd38      	pop	{r3, r4, r5, pc}
 80094ec:	20000630 	.word	0x20000630

080094f0 <memcpy>:
 80094f0:	440a      	add	r2, r1
 80094f2:	4291      	cmp	r1, r2
 80094f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80094f8:	d100      	bne.n	80094fc <memcpy+0xc>
 80094fa:	4770      	bx	lr
 80094fc:	b510      	push	{r4, lr}
 80094fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009506:	4291      	cmp	r1, r2
 8009508:	d1f9      	bne.n	80094fe <memcpy+0xe>
 800950a:	bd10      	pop	{r4, pc}

0800950c <__assert_func>:
 800950c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800950e:	4614      	mov	r4, r2
 8009510:	461a      	mov	r2, r3
 8009512:	4b09      	ldr	r3, [pc, #36]	; (8009538 <__assert_func+0x2c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4605      	mov	r5, r0
 8009518:	68d8      	ldr	r0, [r3, #12]
 800951a:	b14c      	cbz	r4, 8009530 <__assert_func+0x24>
 800951c:	4b07      	ldr	r3, [pc, #28]	; (800953c <__assert_func+0x30>)
 800951e:	9100      	str	r1, [sp, #0]
 8009520:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009524:	4906      	ldr	r1, [pc, #24]	; (8009540 <__assert_func+0x34>)
 8009526:	462b      	mov	r3, r5
 8009528:	f000 f872 	bl	8009610 <fiprintf>
 800952c:	f000 f882 	bl	8009634 <abort>
 8009530:	4b04      	ldr	r3, [pc, #16]	; (8009544 <__assert_func+0x38>)
 8009532:	461c      	mov	r4, r3
 8009534:	e7f3      	b.n	800951e <__assert_func+0x12>
 8009536:	bf00      	nop
 8009538:	20000074 	.word	0x20000074
 800953c:	080a0067 	.word	0x080a0067
 8009540:	080a0074 	.word	0x080a0074
 8009544:	080a00a2 	.word	0x080a00a2

08009548 <_calloc_r>:
 8009548:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800954a:	fba1 2402 	umull	r2, r4, r1, r2
 800954e:	b94c      	cbnz	r4, 8009564 <_calloc_r+0x1c>
 8009550:	4611      	mov	r1, r2
 8009552:	9201      	str	r2, [sp, #4]
 8009554:	f7ff f994 	bl	8008880 <_malloc_r>
 8009558:	9a01      	ldr	r2, [sp, #4]
 800955a:	4605      	mov	r5, r0
 800955c:	b930      	cbnz	r0, 800956c <_calloc_r+0x24>
 800955e:	4628      	mov	r0, r5
 8009560:	b003      	add	sp, #12
 8009562:	bd30      	pop	{r4, r5, pc}
 8009564:	220c      	movs	r2, #12
 8009566:	6002      	str	r2, [r0, #0]
 8009568:	2500      	movs	r5, #0
 800956a:	e7f8      	b.n	800955e <_calloc_r+0x16>
 800956c:	4621      	mov	r1, r4
 800956e:	f7fe faa0 	bl	8007ab2 <memset>
 8009572:	e7f4      	b.n	800955e <_calloc_r+0x16>

08009574 <__ascii_mbtowc>:
 8009574:	b082      	sub	sp, #8
 8009576:	b901      	cbnz	r1, 800957a <__ascii_mbtowc+0x6>
 8009578:	a901      	add	r1, sp, #4
 800957a:	b142      	cbz	r2, 800958e <__ascii_mbtowc+0x1a>
 800957c:	b14b      	cbz	r3, 8009592 <__ascii_mbtowc+0x1e>
 800957e:	7813      	ldrb	r3, [r2, #0]
 8009580:	600b      	str	r3, [r1, #0]
 8009582:	7812      	ldrb	r2, [r2, #0]
 8009584:	1e10      	subs	r0, r2, #0
 8009586:	bf18      	it	ne
 8009588:	2001      	movne	r0, #1
 800958a:	b002      	add	sp, #8
 800958c:	4770      	bx	lr
 800958e:	4610      	mov	r0, r2
 8009590:	e7fb      	b.n	800958a <__ascii_mbtowc+0x16>
 8009592:	f06f 0001 	mvn.w	r0, #1
 8009596:	e7f8      	b.n	800958a <__ascii_mbtowc+0x16>

08009598 <_realloc_r>:
 8009598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	4680      	mov	r8, r0
 800959e:	4614      	mov	r4, r2
 80095a0:	460e      	mov	r6, r1
 80095a2:	b921      	cbnz	r1, 80095ae <_realloc_r+0x16>
 80095a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095a8:	4611      	mov	r1, r2
 80095aa:	f7ff b969 	b.w	8008880 <_malloc_r>
 80095ae:	b92a      	cbnz	r2, 80095bc <_realloc_r+0x24>
 80095b0:	f7ff f8f2 	bl	8008798 <_free_r>
 80095b4:	4625      	mov	r5, r4
 80095b6:	4628      	mov	r0, r5
 80095b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095bc:	f000 f841 	bl	8009642 <_malloc_usable_size_r>
 80095c0:	4284      	cmp	r4, r0
 80095c2:	4607      	mov	r7, r0
 80095c4:	d802      	bhi.n	80095cc <_realloc_r+0x34>
 80095c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095ca:	d812      	bhi.n	80095f2 <_realloc_r+0x5a>
 80095cc:	4621      	mov	r1, r4
 80095ce:	4640      	mov	r0, r8
 80095d0:	f7ff f956 	bl	8008880 <_malloc_r>
 80095d4:	4605      	mov	r5, r0
 80095d6:	2800      	cmp	r0, #0
 80095d8:	d0ed      	beq.n	80095b6 <_realloc_r+0x1e>
 80095da:	42bc      	cmp	r4, r7
 80095dc:	4622      	mov	r2, r4
 80095de:	4631      	mov	r1, r6
 80095e0:	bf28      	it	cs
 80095e2:	463a      	movcs	r2, r7
 80095e4:	f7ff ff84 	bl	80094f0 <memcpy>
 80095e8:	4631      	mov	r1, r6
 80095ea:	4640      	mov	r0, r8
 80095ec:	f7ff f8d4 	bl	8008798 <_free_r>
 80095f0:	e7e1      	b.n	80095b6 <_realloc_r+0x1e>
 80095f2:	4635      	mov	r5, r6
 80095f4:	e7df      	b.n	80095b6 <_realloc_r+0x1e>

080095f6 <__ascii_wctomb>:
 80095f6:	b149      	cbz	r1, 800960c <__ascii_wctomb+0x16>
 80095f8:	2aff      	cmp	r2, #255	; 0xff
 80095fa:	bf85      	ittet	hi
 80095fc:	238a      	movhi	r3, #138	; 0x8a
 80095fe:	6003      	strhi	r3, [r0, #0]
 8009600:	700a      	strbls	r2, [r1, #0]
 8009602:	f04f 30ff 	movhi.w	r0, #4294967295
 8009606:	bf98      	it	ls
 8009608:	2001      	movls	r0, #1
 800960a:	4770      	bx	lr
 800960c:	4608      	mov	r0, r1
 800960e:	4770      	bx	lr

08009610 <fiprintf>:
 8009610:	b40e      	push	{r1, r2, r3}
 8009612:	b503      	push	{r0, r1, lr}
 8009614:	4601      	mov	r1, r0
 8009616:	ab03      	add	r3, sp, #12
 8009618:	4805      	ldr	r0, [pc, #20]	; (8009630 <fiprintf+0x20>)
 800961a:	f853 2b04 	ldr.w	r2, [r3], #4
 800961e:	6800      	ldr	r0, [r0, #0]
 8009620:	9301      	str	r3, [sp, #4]
 8009622:	f000 f83f 	bl	80096a4 <_vfiprintf_r>
 8009626:	b002      	add	sp, #8
 8009628:	f85d eb04 	ldr.w	lr, [sp], #4
 800962c:	b003      	add	sp, #12
 800962e:	4770      	bx	lr
 8009630:	20000074 	.word	0x20000074

08009634 <abort>:
 8009634:	b508      	push	{r3, lr}
 8009636:	2006      	movs	r0, #6
 8009638:	f000 fa0c 	bl	8009a54 <raise>
 800963c:	2001      	movs	r0, #1
 800963e:	f7f7 feab 	bl	8001398 <_exit>

08009642 <_malloc_usable_size_r>:
 8009642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009646:	1f18      	subs	r0, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	bfbc      	itt	lt
 800964c:	580b      	ldrlt	r3, [r1, r0]
 800964e:	18c0      	addlt	r0, r0, r3
 8009650:	4770      	bx	lr

08009652 <__sfputc_r>:
 8009652:	6893      	ldr	r3, [r2, #8]
 8009654:	3b01      	subs	r3, #1
 8009656:	2b00      	cmp	r3, #0
 8009658:	b410      	push	{r4}
 800965a:	6093      	str	r3, [r2, #8]
 800965c:	da08      	bge.n	8009670 <__sfputc_r+0x1e>
 800965e:	6994      	ldr	r4, [r2, #24]
 8009660:	42a3      	cmp	r3, r4
 8009662:	db01      	blt.n	8009668 <__sfputc_r+0x16>
 8009664:	290a      	cmp	r1, #10
 8009666:	d103      	bne.n	8009670 <__sfputc_r+0x1e>
 8009668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800966c:	f000 b934 	b.w	80098d8 <__swbuf_r>
 8009670:	6813      	ldr	r3, [r2, #0]
 8009672:	1c58      	adds	r0, r3, #1
 8009674:	6010      	str	r0, [r2, #0]
 8009676:	7019      	strb	r1, [r3, #0]
 8009678:	4608      	mov	r0, r1
 800967a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800967e:	4770      	bx	lr

08009680 <__sfputs_r>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	4606      	mov	r6, r0
 8009684:	460f      	mov	r7, r1
 8009686:	4614      	mov	r4, r2
 8009688:	18d5      	adds	r5, r2, r3
 800968a:	42ac      	cmp	r4, r5
 800968c:	d101      	bne.n	8009692 <__sfputs_r+0x12>
 800968e:	2000      	movs	r0, #0
 8009690:	e007      	b.n	80096a2 <__sfputs_r+0x22>
 8009692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009696:	463a      	mov	r2, r7
 8009698:	4630      	mov	r0, r6
 800969a:	f7ff ffda 	bl	8009652 <__sfputc_r>
 800969e:	1c43      	adds	r3, r0, #1
 80096a0:	d1f3      	bne.n	800968a <__sfputs_r+0xa>
 80096a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096a4 <_vfiprintf_r>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	460d      	mov	r5, r1
 80096aa:	b09d      	sub	sp, #116	; 0x74
 80096ac:	4614      	mov	r4, r2
 80096ae:	4698      	mov	r8, r3
 80096b0:	4606      	mov	r6, r0
 80096b2:	b118      	cbz	r0, 80096bc <_vfiprintf_r+0x18>
 80096b4:	6a03      	ldr	r3, [r0, #32]
 80096b6:	b90b      	cbnz	r3, 80096bc <_vfiprintf_r+0x18>
 80096b8:	f7fe f962 	bl	8007980 <__sinit>
 80096bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096be:	07d9      	lsls	r1, r3, #31
 80096c0:	d405      	bmi.n	80096ce <_vfiprintf_r+0x2a>
 80096c2:	89ab      	ldrh	r3, [r5, #12]
 80096c4:	059a      	lsls	r2, r3, #22
 80096c6:	d402      	bmi.n	80096ce <_vfiprintf_r+0x2a>
 80096c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096ca:	f7fe fa6f 	bl	8007bac <__retarget_lock_acquire_recursive>
 80096ce:	89ab      	ldrh	r3, [r5, #12]
 80096d0:	071b      	lsls	r3, r3, #28
 80096d2:	d501      	bpl.n	80096d8 <_vfiprintf_r+0x34>
 80096d4:	692b      	ldr	r3, [r5, #16]
 80096d6:	b99b      	cbnz	r3, 8009700 <_vfiprintf_r+0x5c>
 80096d8:	4629      	mov	r1, r5
 80096da:	4630      	mov	r0, r6
 80096dc:	f000 f93a 	bl	8009954 <__swsetup_r>
 80096e0:	b170      	cbz	r0, 8009700 <_vfiprintf_r+0x5c>
 80096e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e4:	07dc      	lsls	r4, r3, #31
 80096e6:	d504      	bpl.n	80096f2 <_vfiprintf_r+0x4e>
 80096e8:	f04f 30ff 	mov.w	r0, #4294967295
 80096ec:	b01d      	add	sp, #116	; 0x74
 80096ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f2:	89ab      	ldrh	r3, [r5, #12]
 80096f4:	0598      	lsls	r0, r3, #22
 80096f6:	d4f7      	bmi.n	80096e8 <_vfiprintf_r+0x44>
 80096f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096fa:	f7fe fa58 	bl	8007bae <__retarget_lock_release_recursive>
 80096fe:	e7f3      	b.n	80096e8 <_vfiprintf_r+0x44>
 8009700:	2300      	movs	r3, #0
 8009702:	9309      	str	r3, [sp, #36]	; 0x24
 8009704:	2320      	movs	r3, #32
 8009706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800970a:	f8cd 800c 	str.w	r8, [sp, #12]
 800970e:	2330      	movs	r3, #48	; 0x30
 8009710:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80098c4 <_vfiprintf_r+0x220>
 8009714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009718:	f04f 0901 	mov.w	r9, #1
 800971c:	4623      	mov	r3, r4
 800971e:	469a      	mov	sl, r3
 8009720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009724:	b10a      	cbz	r2, 800972a <_vfiprintf_r+0x86>
 8009726:	2a25      	cmp	r2, #37	; 0x25
 8009728:	d1f9      	bne.n	800971e <_vfiprintf_r+0x7a>
 800972a:	ebba 0b04 	subs.w	fp, sl, r4
 800972e:	d00b      	beq.n	8009748 <_vfiprintf_r+0xa4>
 8009730:	465b      	mov	r3, fp
 8009732:	4622      	mov	r2, r4
 8009734:	4629      	mov	r1, r5
 8009736:	4630      	mov	r0, r6
 8009738:	f7ff ffa2 	bl	8009680 <__sfputs_r>
 800973c:	3001      	adds	r0, #1
 800973e:	f000 80a9 	beq.w	8009894 <_vfiprintf_r+0x1f0>
 8009742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009744:	445a      	add	r2, fp
 8009746:	9209      	str	r2, [sp, #36]	; 0x24
 8009748:	f89a 3000 	ldrb.w	r3, [sl]
 800974c:	2b00      	cmp	r3, #0
 800974e:	f000 80a1 	beq.w	8009894 <_vfiprintf_r+0x1f0>
 8009752:	2300      	movs	r3, #0
 8009754:	f04f 32ff 	mov.w	r2, #4294967295
 8009758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800975c:	f10a 0a01 	add.w	sl, sl, #1
 8009760:	9304      	str	r3, [sp, #16]
 8009762:	9307      	str	r3, [sp, #28]
 8009764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009768:	931a      	str	r3, [sp, #104]	; 0x68
 800976a:	4654      	mov	r4, sl
 800976c:	2205      	movs	r2, #5
 800976e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009772:	4854      	ldr	r0, [pc, #336]	; (80098c4 <_vfiprintf_r+0x220>)
 8009774:	f7f6 fd64 	bl	8000240 <memchr>
 8009778:	9a04      	ldr	r2, [sp, #16]
 800977a:	b9d8      	cbnz	r0, 80097b4 <_vfiprintf_r+0x110>
 800977c:	06d1      	lsls	r1, r2, #27
 800977e:	bf44      	itt	mi
 8009780:	2320      	movmi	r3, #32
 8009782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009786:	0713      	lsls	r3, r2, #28
 8009788:	bf44      	itt	mi
 800978a:	232b      	movmi	r3, #43	; 0x2b
 800978c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009790:	f89a 3000 	ldrb.w	r3, [sl]
 8009794:	2b2a      	cmp	r3, #42	; 0x2a
 8009796:	d015      	beq.n	80097c4 <_vfiprintf_r+0x120>
 8009798:	9a07      	ldr	r2, [sp, #28]
 800979a:	4654      	mov	r4, sl
 800979c:	2000      	movs	r0, #0
 800979e:	f04f 0c0a 	mov.w	ip, #10
 80097a2:	4621      	mov	r1, r4
 80097a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097a8:	3b30      	subs	r3, #48	; 0x30
 80097aa:	2b09      	cmp	r3, #9
 80097ac:	d94d      	bls.n	800984a <_vfiprintf_r+0x1a6>
 80097ae:	b1b0      	cbz	r0, 80097de <_vfiprintf_r+0x13a>
 80097b0:	9207      	str	r2, [sp, #28]
 80097b2:	e014      	b.n	80097de <_vfiprintf_r+0x13a>
 80097b4:	eba0 0308 	sub.w	r3, r0, r8
 80097b8:	fa09 f303 	lsl.w	r3, r9, r3
 80097bc:	4313      	orrs	r3, r2
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	46a2      	mov	sl, r4
 80097c2:	e7d2      	b.n	800976a <_vfiprintf_r+0xc6>
 80097c4:	9b03      	ldr	r3, [sp, #12]
 80097c6:	1d19      	adds	r1, r3, #4
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	9103      	str	r1, [sp, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	bfbb      	ittet	lt
 80097d0:	425b      	neglt	r3, r3
 80097d2:	f042 0202 	orrlt.w	r2, r2, #2
 80097d6:	9307      	strge	r3, [sp, #28]
 80097d8:	9307      	strlt	r3, [sp, #28]
 80097da:	bfb8      	it	lt
 80097dc:	9204      	strlt	r2, [sp, #16]
 80097de:	7823      	ldrb	r3, [r4, #0]
 80097e0:	2b2e      	cmp	r3, #46	; 0x2e
 80097e2:	d10c      	bne.n	80097fe <_vfiprintf_r+0x15a>
 80097e4:	7863      	ldrb	r3, [r4, #1]
 80097e6:	2b2a      	cmp	r3, #42	; 0x2a
 80097e8:	d134      	bne.n	8009854 <_vfiprintf_r+0x1b0>
 80097ea:	9b03      	ldr	r3, [sp, #12]
 80097ec:	1d1a      	adds	r2, r3, #4
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	9203      	str	r2, [sp, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bfb8      	it	lt
 80097f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80097fa:	3402      	adds	r4, #2
 80097fc:	9305      	str	r3, [sp, #20]
 80097fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80098d4 <_vfiprintf_r+0x230>
 8009802:	7821      	ldrb	r1, [r4, #0]
 8009804:	2203      	movs	r2, #3
 8009806:	4650      	mov	r0, sl
 8009808:	f7f6 fd1a 	bl	8000240 <memchr>
 800980c:	b138      	cbz	r0, 800981e <_vfiprintf_r+0x17a>
 800980e:	9b04      	ldr	r3, [sp, #16]
 8009810:	eba0 000a 	sub.w	r0, r0, sl
 8009814:	2240      	movs	r2, #64	; 0x40
 8009816:	4082      	lsls	r2, r0
 8009818:	4313      	orrs	r3, r2
 800981a:	3401      	adds	r4, #1
 800981c:	9304      	str	r3, [sp, #16]
 800981e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009822:	4829      	ldr	r0, [pc, #164]	; (80098c8 <_vfiprintf_r+0x224>)
 8009824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009828:	2206      	movs	r2, #6
 800982a:	f7f6 fd09 	bl	8000240 <memchr>
 800982e:	2800      	cmp	r0, #0
 8009830:	d03f      	beq.n	80098b2 <_vfiprintf_r+0x20e>
 8009832:	4b26      	ldr	r3, [pc, #152]	; (80098cc <_vfiprintf_r+0x228>)
 8009834:	bb1b      	cbnz	r3, 800987e <_vfiprintf_r+0x1da>
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	3307      	adds	r3, #7
 800983a:	f023 0307 	bic.w	r3, r3, #7
 800983e:	3308      	adds	r3, #8
 8009840:	9303      	str	r3, [sp, #12]
 8009842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009844:	443b      	add	r3, r7
 8009846:	9309      	str	r3, [sp, #36]	; 0x24
 8009848:	e768      	b.n	800971c <_vfiprintf_r+0x78>
 800984a:	fb0c 3202 	mla	r2, ip, r2, r3
 800984e:	460c      	mov	r4, r1
 8009850:	2001      	movs	r0, #1
 8009852:	e7a6      	b.n	80097a2 <_vfiprintf_r+0xfe>
 8009854:	2300      	movs	r3, #0
 8009856:	3401      	adds	r4, #1
 8009858:	9305      	str	r3, [sp, #20]
 800985a:	4619      	mov	r1, r3
 800985c:	f04f 0c0a 	mov.w	ip, #10
 8009860:	4620      	mov	r0, r4
 8009862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009866:	3a30      	subs	r2, #48	; 0x30
 8009868:	2a09      	cmp	r2, #9
 800986a:	d903      	bls.n	8009874 <_vfiprintf_r+0x1d0>
 800986c:	2b00      	cmp	r3, #0
 800986e:	d0c6      	beq.n	80097fe <_vfiprintf_r+0x15a>
 8009870:	9105      	str	r1, [sp, #20]
 8009872:	e7c4      	b.n	80097fe <_vfiprintf_r+0x15a>
 8009874:	fb0c 2101 	mla	r1, ip, r1, r2
 8009878:	4604      	mov	r4, r0
 800987a:	2301      	movs	r3, #1
 800987c:	e7f0      	b.n	8009860 <_vfiprintf_r+0x1bc>
 800987e:	ab03      	add	r3, sp, #12
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	462a      	mov	r2, r5
 8009884:	4b12      	ldr	r3, [pc, #72]	; (80098d0 <_vfiprintf_r+0x22c>)
 8009886:	a904      	add	r1, sp, #16
 8009888:	4630      	mov	r0, r6
 800988a:	f7fd fc55 	bl	8007138 <_printf_float>
 800988e:	4607      	mov	r7, r0
 8009890:	1c78      	adds	r0, r7, #1
 8009892:	d1d6      	bne.n	8009842 <_vfiprintf_r+0x19e>
 8009894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009896:	07d9      	lsls	r1, r3, #31
 8009898:	d405      	bmi.n	80098a6 <_vfiprintf_r+0x202>
 800989a:	89ab      	ldrh	r3, [r5, #12]
 800989c:	059a      	lsls	r2, r3, #22
 800989e:	d402      	bmi.n	80098a6 <_vfiprintf_r+0x202>
 80098a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098a2:	f7fe f984 	bl	8007bae <__retarget_lock_release_recursive>
 80098a6:	89ab      	ldrh	r3, [r5, #12]
 80098a8:	065b      	lsls	r3, r3, #25
 80098aa:	f53f af1d 	bmi.w	80096e8 <_vfiprintf_r+0x44>
 80098ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098b0:	e71c      	b.n	80096ec <_vfiprintf_r+0x48>
 80098b2:	ab03      	add	r3, sp, #12
 80098b4:	9300      	str	r3, [sp, #0]
 80098b6:	462a      	mov	r2, r5
 80098b8:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <_vfiprintf_r+0x22c>)
 80098ba:	a904      	add	r1, sp, #16
 80098bc:	4630      	mov	r0, r6
 80098be:	f7fd fec3 	bl	8007648 <_printf_i>
 80098c2:	e7e4      	b.n	800988e <_vfiprintf_r+0x1ea>
 80098c4:	080a004c 	.word	0x080a004c
 80098c8:	080a0056 	.word	0x080a0056
 80098cc:	08007139 	.word	0x08007139
 80098d0:	08009681 	.word	0x08009681
 80098d4:	080a0052 	.word	0x080a0052

080098d8 <__swbuf_r>:
 80098d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098da:	460e      	mov	r6, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	4605      	mov	r5, r0
 80098e0:	b118      	cbz	r0, 80098ea <__swbuf_r+0x12>
 80098e2:	6a03      	ldr	r3, [r0, #32]
 80098e4:	b90b      	cbnz	r3, 80098ea <__swbuf_r+0x12>
 80098e6:	f7fe f84b 	bl	8007980 <__sinit>
 80098ea:	69a3      	ldr	r3, [r4, #24]
 80098ec:	60a3      	str	r3, [r4, #8]
 80098ee:	89a3      	ldrh	r3, [r4, #12]
 80098f0:	071a      	lsls	r2, r3, #28
 80098f2:	d525      	bpl.n	8009940 <__swbuf_r+0x68>
 80098f4:	6923      	ldr	r3, [r4, #16]
 80098f6:	b31b      	cbz	r3, 8009940 <__swbuf_r+0x68>
 80098f8:	6823      	ldr	r3, [r4, #0]
 80098fa:	6922      	ldr	r2, [r4, #16]
 80098fc:	1a98      	subs	r0, r3, r2
 80098fe:	6963      	ldr	r3, [r4, #20]
 8009900:	b2f6      	uxtb	r6, r6
 8009902:	4283      	cmp	r3, r0
 8009904:	4637      	mov	r7, r6
 8009906:	dc04      	bgt.n	8009912 <__swbuf_r+0x3a>
 8009908:	4621      	mov	r1, r4
 800990a:	4628      	mov	r0, r5
 800990c:	f7ff fd9e 	bl	800944c <_fflush_r>
 8009910:	b9e0      	cbnz	r0, 800994c <__swbuf_r+0x74>
 8009912:	68a3      	ldr	r3, [r4, #8]
 8009914:	3b01      	subs	r3, #1
 8009916:	60a3      	str	r3, [r4, #8]
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	6022      	str	r2, [r4, #0]
 800991e:	701e      	strb	r6, [r3, #0]
 8009920:	6962      	ldr	r2, [r4, #20]
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	429a      	cmp	r2, r3
 8009926:	d004      	beq.n	8009932 <__swbuf_r+0x5a>
 8009928:	89a3      	ldrh	r3, [r4, #12]
 800992a:	07db      	lsls	r3, r3, #31
 800992c:	d506      	bpl.n	800993c <__swbuf_r+0x64>
 800992e:	2e0a      	cmp	r6, #10
 8009930:	d104      	bne.n	800993c <__swbuf_r+0x64>
 8009932:	4621      	mov	r1, r4
 8009934:	4628      	mov	r0, r5
 8009936:	f7ff fd89 	bl	800944c <_fflush_r>
 800993a:	b938      	cbnz	r0, 800994c <__swbuf_r+0x74>
 800993c:	4638      	mov	r0, r7
 800993e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009940:	4621      	mov	r1, r4
 8009942:	4628      	mov	r0, r5
 8009944:	f000 f806 	bl	8009954 <__swsetup_r>
 8009948:	2800      	cmp	r0, #0
 800994a:	d0d5      	beq.n	80098f8 <__swbuf_r+0x20>
 800994c:	f04f 37ff 	mov.w	r7, #4294967295
 8009950:	e7f4      	b.n	800993c <__swbuf_r+0x64>
	...

08009954 <__swsetup_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <__swsetup_r+0xac>)
 8009958:	4605      	mov	r5, r0
 800995a:	6818      	ldr	r0, [r3, #0]
 800995c:	460c      	mov	r4, r1
 800995e:	b118      	cbz	r0, 8009968 <__swsetup_r+0x14>
 8009960:	6a03      	ldr	r3, [r0, #32]
 8009962:	b90b      	cbnz	r3, 8009968 <__swsetup_r+0x14>
 8009964:	f7fe f80c 	bl	8007980 <__sinit>
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800996e:	0718      	lsls	r0, r3, #28
 8009970:	d422      	bmi.n	80099b8 <__swsetup_r+0x64>
 8009972:	06d9      	lsls	r1, r3, #27
 8009974:	d407      	bmi.n	8009986 <__swsetup_r+0x32>
 8009976:	2309      	movs	r3, #9
 8009978:	602b      	str	r3, [r5, #0]
 800997a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800997e:	81a3      	strh	r3, [r4, #12]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	e034      	b.n	80099f0 <__swsetup_r+0x9c>
 8009986:	0758      	lsls	r0, r3, #29
 8009988:	d512      	bpl.n	80099b0 <__swsetup_r+0x5c>
 800998a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800998c:	b141      	cbz	r1, 80099a0 <__swsetup_r+0x4c>
 800998e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009992:	4299      	cmp	r1, r3
 8009994:	d002      	beq.n	800999c <__swsetup_r+0x48>
 8009996:	4628      	mov	r0, r5
 8009998:	f7fe fefe 	bl	8008798 <_free_r>
 800999c:	2300      	movs	r3, #0
 800999e:	6363      	str	r3, [r4, #52]	; 0x34
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	2300      	movs	r3, #0
 80099aa:	6063      	str	r3, [r4, #4]
 80099ac:	6923      	ldr	r3, [r4, #16]
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	f043 0308 	orr.w	r3, r3, #8
 80099b6:	81a3      	strh	r3, [r4, #12]
 80099b8:	6923      	ldr	r3, [r4, #16]
 80099ba:	b94b      	cbnz	r3, 80099d0 <__swsetup_r+0x7c>
 80099bc:	89a3      	ldrh	r3, [r4, #12]
 80099be:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80099c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80099c6:	d003      	beq.n	80099d0 <__swsetup_r+0x7c>
 80099c8:	4621      	mov	r1, r4
 80099ca:	4628      	mov	r0, r5
 80099cc:	f000 f884 	bl	8009ad8 <__smakebuf_r>
 80099d0:	89a0      	ldrh	r0, [r4, #12]
 80099d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80099d6:	f010 0301 	ands.w	r3, r0, #1
 80099da:	d00a      	beq.n	80099f2 <__swsetup_r+0x9e>
 80099dc:	2300      	movs	r3, #0
 80099de:	60a3      	str	r3, [r4, #8]
 80099e0:	6963      	ldr	r3, [r4, #20]
 80099e2:	425b      	negs	r3, r3
 80099e4:	61a3      	str	r3, [r4, #24]
 80099e6:	6923      	ldr	r3, [r4, #16]
 80099e8:	b943      	cbnz	r3, 80099fc <__swsetup_r+0xa8>
 80099ea:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80099ee:	d1c4      	bne.n	800997a <__swsetup_r+0x26>
 80099f0:	bd38      	pop	{r3, r4, r5, pc}
 80099f2:	0781      	lsls	r1, r0, #30
 80099f4:	bf58      	it	pl
 80099f6:	6963      	ldrpl	r3, [r4, #20]
 80099f8:	60a3      	str	r3, [r4, #8]
 80099fa:	e7f4      	b.n	80099e6 <__swsetup_r+0x92>
 80099fc:	2000      	movs	r0, #0
 80099fe:	e7f7      	b.n	80099f0 <__swsetup_r+0x9c>
 8009a00:	20000074 	.word	0x20000074

08009a04 <_raise_r>:
 8009a04:	291f      	cmp	r1, #31
 8009a06:	b538      	push	{r3, r4, r5, lr}
 8009a08:	4604      	mov	r4, r0
 8009a0a:	460d      	mov	r5, r1
 8009a0c:	d904      	bls.n	8009a18 <_raise_r+0x14>
 8009a0e:	2316      	movs	r3, #22
 8009a10:	6003      	str	r3, [r0, #0]
 8009a12:	f04f 30ff 	mov.w	r0, #4294967295
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009a1a:	b112      	cbz	r2, 8009a22 <_raise_r+0x1e>
 8009a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a20:	b94b      	cbnz	r3, 8009a36 <_raise_r+0x32>
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 f830 	bl	8009a88 <_getpid_r>
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a32:	f000 b817 	b.w	8009a64 <_kill_r>
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d00a      	beq.n	8009a50 <_raise_r+0x4c>
 8009a3a:	1c59      	adds	r1, r3, #1
 8009a3c:	d103      	bne.n	8009a46 <_raise_r+0x42>
 8009a3e:	2316      	movs	r3, #22
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	2001      	movs	r0, #1
 8009a44:	e7e7      	b.n	8009a16 <_raise_r+0x12>
 8009a46:	2400      	movs	r4, #0
 8009a48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	4798      	blx	r3
 8009a50:	2000      	movs	r0, #0
 8009a52:	e7e0      	b.n	8009a16 <_raise_r+0x12>

08009a54 <raise>:
 8009a54:	4b02      	ldr	r3, [pc, #8]	; (8009a60 <raise+0xc>)
 8009a56:	4601      	mov	r1, r0
 8009a58:	6818      	ldr	r0, [r3, #0]
 8009a5a:	f7ff bfd3 	b.w	8009a04 <_raise_r>
 8009a5e:	bf00      	nop
 8009a60:	20000074 	.word	0x20000074

08009a64 <_kill_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4d07      	ldr	r5, [pc, #28]	; (8009a84 <_kill_r+0x20>)
 8009a68:	2300      	movs	r3, #0
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	4611      	mov	r1, r2
 8009a70:	602b      	str	r3, [r5, #0]
 8009a72:	f7f7 fc81 	bl	8001378 <_kill>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	d102      	bne.n	8009a80 <_kill_r+0x1c>
 8009a7a:	682b      	ldr	r3, [r5, #0]
 8009a7c:	b103      	cbz	r3, 8009a80 <_kill_r+0x1c>
 8009a7e:	6023      	str	r3, [r4, #0]
 8009a80:	bd38      	pop	{r3, r4, r5, pc}
 8009a82:	bf00      	nop
 8009a84:	20000630 	.word	0x20000630

08009a88 <_getpid_r>:
 8009a88:	f7f7 bc6e 	b.w	8001368 <_getpid>

08009a8c <__swhatbuf_r>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	460c      	mov	r4, r1
 8009a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a94:	2900      	cmp	r1, #0
 8009a96:	b096      	sub	sp, #88	; 0x58
 8009a98:	4615      	mov	r5, r2
 8009a9a:	461e      	mov	r6, r3
 8009a9c:	da0d      	bge.n	8009aba <__swhatbuf_r+0x2e>
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009aa4:	f04f 0100 	mov.w	r1, #0
 8009aa8:	bf0c      	ite	eq
 8009aaa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009aae:	2340      	movne	r3, #64	; 0x40
 8009ab0:	2000      	movs	r0, #0
 8009ab2:	6031      	str	r1, [r6, #0]
 8009ab4:	602b      	str	r3, [r5, #0]
 8009ab6:	b016      	add	sp, #88	; 0x58
 8009ab8:	bd70      	pop	{r4, r5, r6, pc}
 8009aba:	466a      	mov	r2, sp
 8009abc:	f000 f848 	bl	8009b50 <_fstat_r>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	dbec      	blt.n	8009a9e <__swhatbuf_r+0x12>
 8009ac4:	9901      	ldr	r1, [sp, #4]
 8009ac6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009aca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009ace:	4259      	negs	r1, r3
 8009ad0:	4159      	adcs	r1, r3
 8009ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ad6:	e7eb      	b.n	8009ab0 <__swhatbuf_r+0x24>

08009ad8 <__smakebuf_r>:
 8009ad8:	898b      	ldrh	r3, [r1, #12]
 8009ada:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009adc:	079d      	lsls	r5, r3, #30
 8009ade:	4606      	mov	r6, r0
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	d507      	bpl.n	8009af4 <__smakebuf_r+0x1c>
 8009ae4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009ae8:	6023      	str	r3, [r4, #0]
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	2301      	movs	r3, #1
 8009aee:	6163      	str	r3, [r4, #20]
 8009af0:	b002      	add	sp, #8
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	ab01      	add	r3, sp, #4
 8009af6:	466a      	mov	r2, sp
 8009af8:	f7ff ffc8 	bl	8009a8c <__swhatbuf_r>
 8009afc:	9900      	ldr	r1, [sp, #0]
 8009afe:	4605      	mov	r5, r0
 8009b00:	4630      	mov	r0, r6
 8009b02:	f7fe febd 	bl	8008880 <_malloc_r>
 8009b06:	b948      	cbnz	r0, 8009b1c <__smakebuf_r+0x44>
 8009b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b0c:	059a      	lsls	r2, r3, #22
 8009b0e:	d4ef      	bmi.n	8009af0 <__smakebuf_r+0x18>
 8009b10:	f023 0303 	bic.w	r3, r3, #3
 8009b14:	f043 0302 	orr.w	r3, r3, #2
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	e7e3      	b.n	8009ae4 <__smakebuf_r+0xc>
 8009b1c:	89a3      	ldrh	r3, [r4, #12]
 8009b1e:	6020      	str	r0, [r4, #0]
 8009b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b24:	81a3      	strh	r3, [r4, #12]
 8009b26:	9b00      	ldr	r3, [sp, #0]
 8009b28:	6163      	str	r3, [r4, #20]
 8009b2a:	9b01      	ldr	r3, [sp, #4]
 8009b2c:	6120      	str	r0, [r4, #16]
 8009b2e:	b15b      	cbz	r3, 8009b48 <__smakebuf_r+0x70>
 8009b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b34:	4630      	mov	r0, r6
 8009b36:	f000 f81d 	bl	8009b74 <_isatty_r>
 8009b3a:	b128      	cbz	r0, 8009b48 <__smakebuf_r+0x70>
 8009b3c:	89a3      	ldrh	r3, [r4, #12]
 8009b3e:	f023 0303 	bic.w	r3, r3, #3
 8009b42:	f043 0301 	orr.w	r3, r3, #1
 8009b46:	81a3      	strh	r3, [r4, #12]
 8009b48:	89a3      	ldrh	r3, [r4, #12]
 8009b4a:	431d      	orrs	r5, r3
 8009b4c:	81a5      	strh	r5, [r4, #12]
 8009b4e:	e7cf      	b.n	8009af0 <__smakebuf_r+0x18>

08009b50 <_fstat_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d07      	ldr	r5, [pc, #28]	; (8009b70 <_fstat_r+0x20>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	602b      	str	r3, [r5, #0]
 8009b5e:	f7f7 fc6a 	bl	8001436 <_fstat>
 8009b62:	1c43      	adds	r3, r0, #1
 8009b64:	d102      	bne.n	8009b6c <_fstat_r+0x1c>
 8009b66:	682b      	ldr	r3, [r5, #0]
 8009b68:	b103      	cbz	r3, 8009b6c <_fstat_r+0x1c>
 8009b6a:	6023      	str	r3, [r4, #0]
 8009b6c:	bd38      	pop	{r3, r4, r5, pc}
 8009b6e:	bf00      	nop
 8009b70:	20000630 	.word	0x20000630

08009b74 <_isatty_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4d06      	ldr	r5, [pc, #24]	; (8009b90 <_isatty_r+0x1c>)
 8009b78:	2300      	movs	r3, #0
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	4608      	mov	r0, r1
 8009b7e:	602b      	str	r3, [r5, #0]
 8009b80:	f7f7 fc69 	bl	8001456 <_isatty>
 8009b84:	1c43      	adds	r3, r0, #1
 8009b86:	d102      	bne.n	8009b8e <_isatty_r+0x1a>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	b103      	cbz	r3, 8009b8e <_isatty_r+0x1a>
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	bd38      	pop	{r3, r4, r5, pc}
 8009b90:	20000630 	.word	0x20000630

08009b94 <_init>:
 8009b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b96:	bf00      	nop
 8009b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b9a:	bc08      	pop	{r3}
 8009b9c:	469e      	mov	lr, r3
 8009b9e:	4770      	bx	lr

08009ba0 <_fini>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr
